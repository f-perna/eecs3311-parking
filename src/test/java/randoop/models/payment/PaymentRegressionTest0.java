package randoop.models.payment;

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class PaymentRegressionTest0 {

    public static boolean debug = false;

    @Test
    public void test001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test001");
        java.util.UUID uUID0 = null;
        models.booking.Booking booking1 = null;
        models.payment.PaymentMethod paymentMethod3 = null;
        models.payment.Payment.PaymentStatus paymentStatus4 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType5 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment6 = new models.payment.Payment(uUID0, booking1, 100.0d, paymentMethod3, paymentStatus4, paymentType5);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean7 = payment6.processPayment();
            org.junit.Assert.fail("Expected exception of type models.ParkingSystemException; message: Cannot process payment of a payment that is not pending.");
        } catch (models.ParkingSystemException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + paymentStatus4 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus4.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType5 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType5.equals(models.payment.Payment.PaymentType.FINAL));
    }

    @Test
    public void test002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test002");
        models.payment.Payment.PaymentStatus paymentStatus0 = models.payment.Payment.PaymentStatus.FAILED;
        java.lang.Class<?> wildcardClass1 = paymentStatus0.getClass();
        org.junit.Assert.assertTrue("'" + paymentStatus0 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus0.equals(models.payment.Payment.PaymentStatus.FAILED));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass1);
    }

    @Test
    public void test003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test003");
        models.payment.Payment.PaymentStatus paymentStatus0 = models.payment.Payment.PaymentStatus.PENDING;
        java.lang.Class<?> wildcardClass1 = paymentStatus0.getClass();
        org.junit.Assert.assertTrue("'" + paymentStatus0 + "' != '" + models.payment.Payment.PaymentStatus.PENDING + "'", paymentStatus0.equals(models.payment.Payment.PaymentStatus.PENDING));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass1);
    }

    @Test
    public void test004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test004");
        java.util.UUID uUID0 = null;
        models.booking.Booking booking1 = null;
        models.payment.PaymentMethod paymentMethod3 = null;
        models.payment.Payment.PaymentStatus paymentStatus4 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType5 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment6 = new models.payment.Payment(uUID0, booking1, 100.0d, paymentMethod3, paymentStatus4, paymentType5);
        models.payment.PaymentMethod paymentMethod7 = null;
        payment6.setPaymentMethod(paymentMethod7);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean9 = payment6.processPayment();
            org.junit.Assert.fail("Expected exception of type models.ParkingSystemException; message: Cannot process payment of a payment that is not pending.");
        } catch (models.ParkingSystemException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + paymentStatus4 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus4.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType5 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType5.equals(models.payment.Payment.PaymentType.FINAL));
    }

    @Test
    public void test005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test005");
        java.util.UUID uUID0 = null;
        models.booking.Booking booking1 = null;
        models.payment.PaymentMethod paymentMethod3 = null;
        models.payment.Payment.PaymentStatus paymentStatus4 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType5 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment6 = new models.payment.Payment(uUID0, booking1, 100.0d, paymentMethod3, paymentStatus4, paymentType5);
        models.payment.Payment.PaymentType paymentType7 = payment6.getPaymentType();
        java.util.UUID uUID8 = payment6.getBookingID();
        models.payment.PaymentMethod paymentMethod9 = payment6.getMethod();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean10 = payment6.processPayment();
            org.junit.Assert.fail("Expected exception of type models.ParkingSystemException; message: Cannot process payment of a payment that is not pending.");
        } catch (models.ParkingSystemException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + paymentStatus4 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus4.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType5 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType5.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType7 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType7.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(paymentMethod9);
    }

    @Test
    public void test006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test006");
        java.util.UUID uUID0 = null;
        models.booking.Booking booking1 = null;
        models.payment.PaymentMethod paymentMethod3 = null;
        models.payment.Payment.PaymentStatus paymentStatus4 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType5 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment6 = new models.payment.Payment(uUID0, booking1, 100.0d, paymentMethod3, paymentStatus4, paymentType5);
        java.lang.Class<?> wildcardClass7 = paymentType5.getClass();
        org.junit.Assert.assertTrue("'" + paymentStatus4 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus4.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType5 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType5.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test007");
        java.util.UUID uUID0 = null;
        models.booking.Booking booking1 = null;
        models.payment.PaymentMethod paymentMethod3 = null;
        models.payment.Payment.PaymentStatus paymentStatus4 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType5 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment6 = new models.payment.Payment(uUID0, booking1, 100.0d, paymentMethod3, paymentStatus4, paymentType5);
        models.payment.Payment.PaymentType paymentType7 = payment6.getPaymentType();
        java.util.UUID uUID8 = payment6.getBookingID();
        models.payment.Payment.PaymentType paymentType9 = models.payment.Payment.PaymentType.FINAL;
        payment6.setPaymentType(paymentType9);
        models.payment.PaymentMethod paymentMethod11 = payment6.getMethod();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean12 = payment6.processPayment();
            org.junit.Assert.fail("Expected exception of type models.ParkingSystemException; message: Cannot process payment of a payment that is not pending.");
        } catch (models.ParkingSystemException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + paymentStatus4 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus4.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType5 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType5.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType7 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType7.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID8);
        org.junit.Assert.assertTrue("'" + paymentType9 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType9.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(paymentMethod11);
    }

    @Test
    public void test008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test008");
        models.payment.PaymentMethod paymentMethod1 = models.payment.Payment.generateMethod("hi!");
        java.lang.Class<?> wildcardClass2 = paymentMethod1.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
    }

    @Test
    public void test009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test009");
        java.util.UUID uUID0 = null;
        models.booking.Booking booking1 = null;
        models.booking.Booking booking4 = null;
        java.util.UUID uUID5 = null;
        models.booking.Booking booking6 = null;
        models.payment.PaymentMethod paymentMethod8 = null;
        models.payment.Payment.PaymentStatus paymentStatus9 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType10 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment11 = new models.payment.Payment(uUID5, booking6, 100.0d, paymentMethod8, paymentStatus9, paymentType10);
        models.payment.Payment.PaymentType paymentType12 = payment11.getPaymentType();
        java.util.UUID uUID13 = payment11.getBookingID();
        models.payment.Payment.PaymentType paymentType14 = models.payment.Payment.PaymentType.FINAL;
        payment11.setPaymentType(paymentType14);
        java.util.UUID uUID16 = payment11.getPaymentID();
        models.payment.PaymentMethod paymentMethod18 = models.payment.Payment.generateMethod("");
        payment11.setPaymentMethod(paymentMethod18);
        java.util.UUID uUID20 = null;
        models.booking.Booking booking21 = null;
        models.payment.PaymentMethod paymentMethod23 = null;
        models.payment.Payment.PaymentStatus paymentStatus24 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType25 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment26 = new models.payment.Payment(uUID20, booking21, 100.0d, paymentMethod23, paymentStatus24, paymentType25);
        models.payment.Payment.PaymentType paymentType27 = payment26.getPaymentType();
        models.payment.Payment.PaymentType paymentType28 = payment26.getPaymentType();
        models.payment.Payment payment29 = new models.payment.Payment((double) 10, booking4, paymentMethod18, paymentType28);
        java.util.UUID uUID30 = null;
        models.booking.Booking booking31 = null;
        models.payment.PaymentMethod paymentMethod34 = models.payment.Payment.generateMethod("");
        java.util.UUID uUID35 = null;
        models.booking.Booking booking36 = null;
        models.payment.PaymentMethod paymentMethod38 = null;
        models.payment.Payment.PaymentStatus paymentStatus39 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType40 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment41 = new models.payment.Payment(uUID35, booking36, 100.0d, paymentMethod38, paymentStatus39, paymentType40);
        models.payment.Payment.PaymentStatus paymentStatus42 = payment41.getStatus();
        java.util.UUID uUID43 = null;
        models.booking.Booking booking44 = null;
        models.payment.PaymentMethod paymentMethod46 = null;
        models.payment.Payment.PaymentStatus paymentStatus47 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType48 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment49 = new models.payment.Payment(uUID43, booking44, 100.0d, paymentMethod46, paymentStatus47, paymentType48);
        models.payment.Payment.PaymentType paymentType50 = payment49.getPaymentType();
        java.util.UUID uUID51 = payment49.getBookingID();
        models.payment.Payment.PaymentType paymentType52 = models.payment.Payment.PaymentType.FINAL;
        payment49.setPaymentType(paymentType52);
        models.payment.PaymentMethod paymentMethod54 = payment49.getMethod();
        models.payment.Payment.PaymentType paymentType55 = payment49.getPaymentType();
        models.payment.Payment payment56 = new models.payment.Payment(uUID30, booking31, (double) 1L, paymentMethod34, paymentStatus42, paymentType55);
        java.util.UUID uUID57 = null;
        models.booking.Booking booking58 = null;
        models.payment.PaymentMethod paymentMethod60 = null;
        models.payment.Payment.PaymentStatus paymentStatus61 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType62 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment63 = new models.payment.Payment(uUID57, booking58, (-1.0d), paymentMethod60, paymentStatus61, paymentType62);
        models.payment.Payment payment64 = new models.payment.Payment(uUID0, booking1, (double) (byte) 0, paymentMethod18, paymentStatus42, paymentType62);
        models.payment.Payment.PaymentType paymentType65 = models.payment.Payment.PaymentType.REFUND;
        payment64.setPaymentType(paymentType65);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean67 = payment64.processPayment();
            org.junit.Assert.fail("Expected exception of type models.ParkingSystemException; message: Cannot process payment of a payment that is not pending.");
        } catch (models.ParkingSystemException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + paymentStatus9 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus9.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType10 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType10.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType12 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType12.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID13);
        org.junit.Assert.assertTrue("'" + paymentType14 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType14.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod18);
        org.junit.Assert.assertTrue("'" + paymentStatus24 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus24.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType25 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType25.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType27 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType27.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType28 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType28.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod34);
        org.junit.Assert.assertTrue("'" + paymentStatus39 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus39.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType40 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType40.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentStatus42 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus42.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentStatus47 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus47.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType48 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType48.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType50 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType50.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID51);
        org.junit.Assert.assertTrue("'" + paymentType52 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType52.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(paymentMethod54);
        org.junit.Assert.assertTrue("'" + paymentType55 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType55.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentStatus61 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus61.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType62 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType62.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType65 + "' != '" + models.payment.Payment.PaymentType.REFUND + "'", paymentType65.equals(models.payment.Payment.PaymentType.REFUND));
    }

    @Test
    public void test010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test010");
        java.lang.Object obj0 = new java.lang.Object();
        java.lang.Class<?> wildcardClass1 = obj0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass1);
    }

    @Test
    public void test011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test011");
        java.util.UUID uUID0 = null;
        models.booking.Booking booking1 = null;
        models.payment.PaymentMethod paymentMethod3 = null;
        models.payment.Payment.PaymentStatus paymentStatus4 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType5 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment6 = new models.payment.Payment(uUID0, booking1, 100.0d, paymentMethod3, paymentStatus4, paymentType5);
        models.payment.Payment.PaymentType paymentType7 = payment6.getPaymentType();
        java.util.UUID uUID8 = payment6.getBookingID();
        models.payment.Payment.PaymentType paymentType9 = models.payment.Payment.PaymentType.FINAL;
        payment6.setPaymentType(paymentType9);
        java.util.UUID uUID11 = payment6.getPaymentID();
        double double12 = payment6.getAmount();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean13 = payment6.processPayment();
            org.junit.Assert.fail("Expected exception of type models.ParkingSystemException; message: Cannot process payment of a payment that is not pending.");
        } catch (models.ParkingSystemException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + paymentStatus4 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus4.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType5 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType5.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType7 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType7.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID8);
        org.junit.Assert.assertTrue("'" + paymentType9 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType9.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 100.0d + "'", double12 == 100.0d);
    }

    @Test
    public void test012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test012");
        java.util.UUID uUID0 = null;
        models.booking.Booking booking1 = null;
        java.util.UUID uUID3 = null;
        models.booking.Booking booking4 = null;
        models.payment.PaymentMethod paymentMethod6 = null;
        models.payment.Payment.PaymentStatus paymentStatus7 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType8 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment9 = new models.payment.Payment(uUID3, booking4, 100.0d, paymentMethod6, paymentStatus7, paymentType8);
        models.payment.Payment.PaymentType paymentType10 = payment9.getPaymentType();
        java.util.UUID uUID11 = payment9.getBookingID();
        models.payment.Payment.PaymentType paymentType12 = models.payment.Payment.PaymentType.FINAL;
        payment9.setPaymentType(paymentType12);
        java.util.UUID uUID14 = payment9.getPaymentID();
        models.payment.PaymentMethod paymentMethod16 = models.payment.Payment.generateMethod("");
        payment9.setPaymentMethod(paymentMethod16);
        java.util.UUID uUID18 = null;
        models.booking.Booking booking19 = null;
        models.payment.PaymentMethod paymentMethod21 = null;
        models.payment.Payment.PaymentStatus paymentStatus22 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType23 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment24 = new models.payment.Payment(uUID18, booking19, 100.0d, paymentMethod21, paymentStatus22, paymentType23);
        models.payment.Payment.PaymentType paymentType25 = payment24.getPaymentType();
        java.util.UUID uUID26 = payment24.getBookingID();
        models.payment.Payment.PaymentType paymentType27 = models.payment.Payment.PaymentType.FINAL;
        payment24.setPaymentType(paymentType27);
        models.payment.PaymentMethod paymentMethod29 = payment24.getMethod();
        models.payment.Payment.PaymentType paymentType30 = payment24.getPaymentType();
        models.payment.Payment.PaymentStatus paymentStatus31 = payment24.getStatus();
        models.payment.Payment.PaymentType paymentType32 = models.payment.Payment.PaymentType.REFUND;
        models.payment.Payment payment33 = new models.payment.Payment(uUID0, booking1, (double) '#', paymentMethod16, paymentStatus31, paymentType32);
        java.lang.Class<?> wildcardClass34 = payment33.getClass();
        org.junit.Assert.assertTrue("'" + paymentStatus7 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus7.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType8 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType8.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType10 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType10.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID11);
        org.junit.Assert.assertTrue("'" + paymentType12 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType12.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod16);
        org.junit.Assert.assertTrue("'" + paymentStatus22 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus22.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType23 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType23.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType25 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType25.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID26);
        org.junit.Assert.assertTrue("'" + paymentType27 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType27.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(paymentMethod29);
        org.junit.Assert.assertTrue("'" + paymentType30 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType30.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentStatus31 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus31.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType32 + "' != '" + models.payment.Payment.PaymentType.REFUND + "'", paymentType32.equals(models.payment.Payment.PaymentType.REFUND));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass34);
    }

    @Test
    public void test013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test013");
        java.util.UUID uUID0 = null;
        models.booking.Booking booking1 = null;
        models.payment.PaymentMethod paymentMethod3 = null;
        models.payment.Payment.PaymentStatus paymentStatus4 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType5 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment6 = new models.payment.Payment(uUID0, booking1, 100.0d, paymentMethod3, paymentStatus4, paymentType5);
        models.payment.Payment.PaymentType paymentType7 = payment6.getPaymentType();
        java.util.UUID uUID8 = payment6.getBookingID();
        models.payment.Payment.PaymentType paymentType9 = models.payment.Payment.PaymentType.FINAL;
        payment6.setPaymentType(paymentType9);
        java.util.UUID uUID11 = payment6.getPaymentID();
        models.payment.PaymentMethod paymentMethod13 = models.payment.Payment.generateMethod("");
        payment6.setPaymentMethod(paymentMethod13);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean15 = payment6.processPayment();
            org.junit.Assert.fail("Expected exception of type models.ParkingSystemException; message: Cannot process payment of a payment that is not pending.");
        } catch (models.ParkingSystemException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + paymentStatus4 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus4.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType5 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType5.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType7 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType7.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID8);
        org.junit.Assert.assertTrue("'" + paymentType9 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType9.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod13);
    }

    @Test
    public void test014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test014");
        java.util.UUID uUID0 = null;
        models.booking.Booking booking1 = null;
        models.booking.Booking booking4 = null;
        java.util.UUID uUID5 = null;
        models.booking.Booking booking6 = null;
        models.payment.PaymentMethod paymentMethod8 = null;
        models.payment.Payment.PaymentStatus paymentStatus9 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType10 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment11 = new models.payment.Payment(uUID5, booking6, 100.0d, paymentMethod8, paymentStatus9, paymentType10);
        models.payment.Payment.PaymentType paymentType12 = payment11.getPaymentType();
        java.util.UUID uUID13 = payment11.getBookingID();
        models.payment.Payment.PaymentType paymentType14 = models.payment.Payment.PaymentType.FINAL;
        payment11.setPaymentType(paymentType14);
        java.util.UUID uUID16 = payment11.getPaymentID();
        models.payment.PaymentMethod paymentMethod18 = models.payment.Payment.generateMethod("");
        payment11.setPaymentMethod(paymentMethod18);
        java.util.UUID uUID20 = null;
        models.booking.Booking booking21 = null;
        models.payment.PaymentMethod paymentMethod23 = null;
        models.payment.Payment.PaymentStatus paymentStatus24 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType25 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment26 = new models.payment.Payment(uUID20, booking21, 100.0d, paymentMethod23, paymentStatus24, paymentType25);
        models.payment.Payment.PaymentType paymentType27 = payment26.getPaymentType();
        models.payment.Payment.PaymentType paymentType28 = payment26.getPaymentType();
        models.payment.Payment payment29 = new models.payment.Payment((double) 10, booking4, paymentMethod18, paymentType28);
        java.util.UUID uUID30 = null;
        models.booking.Booking booking31 = null;
        models.payment.PaymentMethod paymentMethod34 = models.payment.Payment.generateMethod("");
        java.util.UUID uUID35 = null;
        models.booking.Booking booking36 = null;
        models.payment.PaymentMethod paymentMethod38 = null;
        models.payment.Payment.PaymentStatus paymentStatus39 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType40 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment41 = new models.payment.Payment(uUID35, booking36, 100.0d, paymentMethod38, paymentStatus39, paymentType40);
        models.payment.Payment.PaymentStatus paymentStatus42 = payment41.getStatus();
        java.util.UUID uUID43 = null;
        models.booking.Booking booking44 = null;
        models.payment.PaymentMethod paymentMethod46 = null;
        models.payment.Payment.PaymentStatus paymentStatus47 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType48 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment49 = new models.payment.Payment(uUID43, booking44, 100.0d, paymentMethod46, paymentStatus47, paymentType48);
        models.payment.Payment.PaymentType paymentType50 = payment49.getPaymentType();
        java.util.UUID uUID51 = payment49.getBookingID();
        models.payment.Payment.PaymentType paymentType52 = models.payment.Payment.PaymentType.FINAL;
        payment49.setPaymentType(paymentType52);
        models.payment.PaymentMethod paymentMethod54 = payment49.getMethod();
        models.payment.Payment.PaymentType paymentType55 = payment49.getPaymentType();
        models.payment.Payment payment56 = new models.payment.Payment(uUID30, booking31, (double) 1L, paymentMethod34, paymentStatus42, paymentType55);
        java.util.UUID uUID57 = null;
        models.booking.Booking booking58 = null;
        models.payment.PaymentMethod paymentMethod60 = null;
        models.payment.Payment.PaymentStatus paymentStatus61 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType62 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment63 = new models.payment.Payment(uUID57, booking58, (-1.0d), paymentMethod60, paymentStatus61, paymentType62);
        models.payment.Payment payment64 = new models.payment.Payment(uUID0, booking1, (double) (byte) 0, paymentMethod18, paymentStatus42, paymentType62);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean65 = payment64.processPayment();
            org.junit.Assert.fail("Expected exception of type models.ParkingSystemException; message: Cannot process payment of a payment that is not pending.");
        } catch (models.ParkingSystemException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + paymentStatus9 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus9.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType10 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType10.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType12 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType12.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID13);
        org.junit.Assert.assertTrue("'" + paymentType14 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType14.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod18);
        org.junit.Assert.assertTrue("'" + paymentStatus24 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus24.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType25 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType25.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType27 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType27.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType28 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType28.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod34);
        org.junit.Assert.assertTrue("'" + paymentStatus39 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus39.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType40 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType40.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentStatus42 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus42.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentStatus47 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus47.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType48 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType48.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType50 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType50.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID51);
        org.junit.Assert.assertTrue("'" + paymentType52 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType52.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(paymentMethod54);
        org.junit.Assert.assertTrue("'" + paymentType55 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType55.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentStatus61 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus61.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType62 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType62.equals(models.payment.Payment.PaymentType.FINAL));
    }

    @Test
    public void test015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test015");
        models.booking.Booking booking1 = null;
        models.booking.Booking booking3 = null;
        java.util.UUID uUID4 = null;
        models.booking.Booking booking5 = null;
        models.payment.PaymentMethod paymentMethod7 = null;
        models.payment.Payment.PaymentStatus paymentStatus8 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType9 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment10 = new models.payment.Payment(uUID4, booking5, 100.0d, paymentMethod7, paymentStatus8, paymentType9);
        models.payment.Payment.PaymentType paymentType11 = payment10.getPaymentType();
        java.util.UUID uUID12 = payment10.getBookingID();
        models.payment.Payment.PaymentType paymentType13 = models.payment.Payment.PaymentType.FINAL;
        payment10.setPaymentType(paymentType13);
        java.util.UUID uUID15 = payment10.getPaymentID();
        models.payment.PaymentMethod paymentMethod17 = models.payment.Payment.generateMethod("");
        payment10.setPaymentMethod(paymentMethod17);
        java.util.UUID uUID19 = null;
        models.booking.Booking booking20 = null;
        models.payment.PaymentMethod paymentMethod22 = null;
        models.payment.Payment.PaymentStatus paymentStatus23 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType24 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment25 = new models.payment.Payment(uUID19, booking20, 100.0d, paymentMethod22, paymentStatus23, paymentType24);
        models.payment.Payment.PaymentType paymentType26 = payment25.getPaymentType();
        models.payment.Payment.PaymentType paymentType27 = payment25.getPaymentType();
        models.payment.Payment payment28 = new models.payment.Payment((double) 10, booking3, paymentMethod17, paymentType27);
        java.util.UUID uUID29 = null;
        models.booking.Booking booking30 = null;
        models.payment.PaymentMethod paymentMethod32 = null;
        models.payment.Payment.PaymentStatus paymentStatus33 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType34 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment35 = new models.payment.Payment(uUID29, booking30, 100.0d, paymentMethod32, paymentStatus33, paymentType34);
        models.payment.Payment.PaymentType paymentType36 = payment35.getPaymentType();
        java.util.UUID uUID37 = payment35.getBookingID();
        models.payment.Payment.PaymentType paymentType38 = models.payment.Payment.PaymentType.FINAL;
        payment35.setPaymentType(paymentType38);
        models.payment.PaymentMethod paymentMethod40 = payment35.getMethod();
        models.payment.Payment.PaymentType paymentType41 = payment35.getPaymentType();
        models.payment.Payment payment42 = new models.payment.Payment((double) 0, booking1, paymentMethod17, paymentType41);
        java.util.UUID uUID43 = payment42.getBookingID();
        java.util.UUID uUID44 = payment42.getBookingID();
        models.payment.Payment.PaymentStatus paymentStatus45 = payment42.getStatus();
        models.payment.Payment.PaymentStatus paymentStatus46 = payment42.getStatus();
        java.lang.Class<?> wildcardClass47 = payment42.getClass();
        org.junit.Assert.assertTrue("'" + paymentStatus8 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus8.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType9 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType9.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType11 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType11.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID12);
        org.junit.Assert.assertTrue("'" + paymentType13 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType13.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod17);
        org.junit.Assert.assertTrue("'" + paymentStatus23 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus23.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType24 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType24.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType26 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType26.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType27 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType27.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentStatus33 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus33.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType34 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType34.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType36 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType36.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID37);
        org.junit.Assert.assertTrue("'" + paymentType38 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType38.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(paymentMethod40);
        org.junit.Assert.assertTrue("'" + paymentType41 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType41.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID44);
        org.junit.Assert.assertTrue("'" + paymentStatus45 + "' != '" + models.payment.Payment.PaymentStatus.PENDING + "'", paymentStatus45.equals(models.payment.Payment.PaymentStatus.PENDING));
        org.junit.Assert.assertTrue("'" + paymentStatus46 + "' != '" + models.payment.Payment.PaymentStatus.PENDING + "'", paymentStatus46.equals(models.payment.Payment.PaymentStatus.PENDING));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass47);
    }

    @Test
    public void test016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test016");
        java.util.UUID uUID0 = null;
        models.booking.Booking booking1 = null;
        models.payment.PaymentMethod paymentMethod3 = null;
        models.payment.Payment.PaymentStatus paymentStatus4 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType5 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment6 = new models.payment.Payment(uUID0, booking1, 100.0d, paymentMethod3, paymentStatus4, paymentType5);
        models.payment.Payment.PaymentType paymentType7 = payment6.getPaymentType();
        java.util.UUID uUID8 = payment6.getBookingID();
        models.payment.Payment.PaymentType paymentType9 = models.payment.Payment.PaymentType.FINAL;
        payment6.setPaymentType(paymentType9);
        models.payment.PaymentMethod paymentMethod11 = payment6.getMethod();
        models.payment.Payment.PaymentType paymentType12 = payment6.getPaymentType();
        models.booking.Booking booking14 = null;
        models.booking.Booking booking16 = null;
        java.util.UUID uUID17 = null;
        models.booking.Booking booking18 = null;
        models.payment.PaymentMethod paymentMethod20 = null;
        models.payment.Payment.PaymentStatus paymentStatus21 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType22 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment23 = new models.payment.Payment(uUID17, booking18, 100.0d, paymentMethod20, paymentStatus21, paymentType22);
        models.payment.Payment.PaymentType paymentType24 = payment23.getPaymentType();
        java.util.UUID uUID25 = payment23.getBookingID();
        models.payment.Payment.PaymentType paymentType26 = models.payment.Payment.PaymentType.FINAL;
        payment23.setPaymentType(paymentType26);
        java.util.UUID uUID28 = payment23.getPaymentID();
        models.payment.PaymentMethod paymentMethod30 = models.payment.Payment.generateMethod("");
        payment23.setPaymentMethod(paymentMethod30);
        java.util.UUID uUID32 = null;
        models.booking.Booking booking33 = null;
        models.payment.PaymentMethod paymentMethod35 = null;
        models.payment.Payment.PaymentStatus paymentStatus36 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType37 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment38 = new models.payment.Payment(uUID32, booking33, 100.0d, paymentMethod35, paymentStatus36, paymentType37);
        models.payment.Payment.PaymentType paymentType39 = payment38.getPaymentType();
        models.payment.Payment.PaymentType paymentType40 = payment38.getPaymentType();
        models.payment.Payment payment41 = new models.payment.Payment((double) 10, booking16, paymentMethod30, paymentType40);
        java.util.UUID uUID42 = null;
        models.booking.Booking booking43 = null;
        models.payment.PaymentMethod paymentMethod45 = null;
        models.payment.Payment.PaymentStatus paymentStatus46 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType47 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment48 = new models.payment.Payment(uUID42, booking43, 100.0d, paymentMethod45, paymentStatus46, paymentType47);
        models.payment.Payment.PaymentType paymentType49 = payment48.getPaymentType();
        java.util.UUID uUID50 = payment48.getBookingID();
        models.payment.Payment.PaymentType paymentType51 = models.payment.Payment.PaymentType.FINAL;
        payment48.setPaymentType(paymentType51);
        models.payment.PaymentMethod paymentMethod53 = payment48.getMethod();
        models.payment.Payment.PaymentType paymentType54 = payment48.getPaymentType();
        models.payment.Payment payment55 = new models.payment.Payment((double) (short) -1, booking14, paymentMethod30, paymentType54);
        payment6.setPaymentMethod(paymentMethod30);
        org.junit.Assert.assertTrue("'" + paymentStatus4 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus4.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType5 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType5.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType7 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType7.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID8);
        org.junit.Assert.assertTrue("'" + paymentType9 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType9.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(paymentMethod11);
        org.junit.Assert.assertTrue("'" + paymentType12 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType12.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentStatus21 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus21.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType22 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType22.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType24 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType24.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID25);
        org.junit.Assert.assertTrue("'" + paymentType26 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType26.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod30);
        org.junit.Assert.assertTrue("'" + paymentStatus36 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus36.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType37 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType37.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType39 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType39.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType40 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType40.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentStatus46 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus46.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType47 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType47.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType49 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType49.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID50);
        org.junit.Assert.assertTrue("'" + paymentType51 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType51.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(paymentMethod53);
        org.junit.Assert.assertTrue("'" + paymentType54 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType54.equals(models.payment.Payment.PaymentType.FINAL));
    }

    @Test
    public void test017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test017");
        models.booking.Booking booking1 = null;
        java.util.UUID uUID2 = null;
        models.booking.Booking booking3 = null;
        models.payment.PaymentMethod paymentMethod5 = null;
        models.payment.Payment.PaymentStatus paymentStatus6 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType7 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment8 = new models.payment.Payment(uUID2, booking3, 100.0d, paymentMethod5, paymentStatus6, paymentType7);
        models.payment.Payment.PaymentType paymentType9 = models.payment.Payment.PaymentType.DEPOSIT;
        payment8.setPaymentType(paymentType9);
        java.util.UUID uUID11 = payment8.getBookingID();
        java.util.UUID uUID12 = null;
        models.booking.Booking booking13 = null;
        java.util.UUID uUID15 = null;
        models.booking.Booking booking16 = null;
        models.payment.PaymentMethod paymentMethod18 = null;
        models.payment.Payment.PaymentStatus paymentStatus19 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType20 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment21 = new models.payment.Payment(uUID15, booking16, 100.0d, paymentMethod18, paymentStatus19, paymentType20);
        models.payment.Payment.PaymentType paymentType22 = payment21.getPaymentType();
        java.util.UUID uUID23 = payment21.getBookingID();
        models.payment.Payment.PaymentType paymentType24 = models.payment.Payment.PaymentType.FINAL;
        payment21.setPaymentType(paymentType24);
        java.util.UUID uUID26 = payment21.getPaymentID();
        models.payment.PaymentMethod paymentMethod28 = models.payment.Payment.generateMethod("");
        payment21.setPaymentMethod(paymentMethod28);
        models.payment.Payment.PaymentStatus paymentStatus30 = models.payment.Payment.PaymentStatus.PENDING;
        models.payment.Payment.PaymentType paymentType31 = null;
        models.payment.Payment payment32 = new models.payment.Payment(uUID12, booking13, (double) (byte) 0, paymentMethod28, paymentStatus30, paymentType31);
        payment8.setPaymentMethod(paymentMethod28);
        java.util.UUID uUID34 = null;
        models.booking.Booking booking35 = null;
        models.booking.Booking booking38 = null;
        java.util.UUID uUID39 = null;
        models.booking.Booking booking40 = null;
        models.payment.PaymentMethod paymentMethod42 = null;
        models.payment.Payment.PaymentStatus paymentStatus43 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType44 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment45 = new models.payment.Payment(uUID39, booking40, 100.0d, paymentMethod42, paymentStatus43, paymentType44);
        models.payment.Payment.PaymentType paymentType46 = payment45.getPaymentType();
        java.util.UUID uUID47 = payment45.getBookingID();
        models.payment.Payment.PaymentType paymentType48 = models.payment.Payment.PaymentType.FINAL;
        payment45.setPaymentType(paymentType48);
        java.util.UUID uUID50 = payment45.getPaymentID();
        models.payment.PaymentMethod paymentMethod52 = models.payment.Payment.generateMethod("");
        payment45.setPaymentMethod(paymentMethod52);
        java.util.UUID uUID54 = null;
        models.booking.Booking booking55 = null;
        models.payment.PaymentMethod paymentMethod57 = null;
        models.payment.Payment.PaymentStatus paymentStatus58 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType59 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment60 = new models.payment.Payment(uUID54, booking55, 100.0d, paymentMethod57, paymentStatus58, paymentType59);
        models.payment.Payment.PaymentType paymentType61 = payment60.getPaymentType();
        models.payment.Payment.PaymentType paymentType62 = payment60.getPaymentType();
        models.payment.Payment payment63 = new models.payment.Payment((double) 10, booking38, paymentMethod52, paymentType62);
        java.util.UUID uUID64 = null;
        models.booking.Booking booking65 = null;
        models.payment.PaymentMethod paymentMethod68 = models.payment.Payment.generateMethod("");
        java.util.UUID uUID69 = null;
        models.booking.Booking booking70 = null;
        models.payment.PaymentMethod paymentMethod72 = null;
        models.payment.Payment.PaymentStatus paymentStatus73 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType74 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment75 = new models.payment.Payment(uUID69, booking70, 100.0d, paymentMethod72, paymentStatus73, paymentType74);
        models.payment.Payment.PaymentStatus paymentStatus76 = payment75.getStatus();
        java.util.UUID uUID77 = null;
        models.booking.Booking booking78 = null;
        models.payment.PaymentMethod paymentMethod80 = null;
        models.payment.Payment.PaymentStatus paymentStatus81 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType82 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment83 = new models.payment.Payment(uUID77, booking78, 100.0d, paymentMethod80, paymentStatus81, paymentType82);
        models.payment.Payment.PaymentType paymentType84 = payment83.getPaymentType();
        java.util.UUID uUID85 = payment83.getBookingID();
        models.payment.Payment.PaymentType paymentType86 = models.payment.Payment.PaymentType.FINAL;
        payment83.setPaymentType(paymentType86);
        models.payment.PaymentMethod paymentMethod88 = payment83.getMethod();
        models.payment.Payment.PaymentType paymentType89 = payment83.getPaymentType();
        models.payment.Payment payment90 = new models.payment.Payment(uUID64, booking65, (double) 1L, paymentMethod68, paymentStatus76, paymentType89);
        java.util.UUID uUID91 = null;
        models.booking.Booking booking92 = null;
        models.payment.PaymentMethod paymentMethod94 = null;
        models.payment.Payment.PaymentStatus paymentStatus95 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType96 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment97 = new models.payment.Payment(uUID91, booking92, (-1.0d), paymentMethod94, paymentStatus95, paymentType96);
        models.payment.Payment payment98 = new models.payment.Payment(uUID34, booking35, (double) (byte) 0, paymentMethod52, paymentStatus76, paymentType96);
        models.payment.Payment payment99 = new models.payment.Payment((double) 1, booking1, paymentMethod28, paymentType96);
        org.junit.Assert.assertTrue("'" + paymentStatus6 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus6.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType7 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType7.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType9 + "' != '" + models.payment.Payment.PaymentType.DEPOSIT + "'", paymentType9.equals(models.payment.Payment.PaymentType.DEPOSIT));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID11);
        org.junit.Assert.assertTrue("'" + paymentStatus19 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus19.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType20 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType20.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType22 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType22.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID23);
        org.junit.Assert.assertTrue("'" + paymentType24 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType24.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod28);
        org.junit.Assert.assertTrue("'" + paymentStatus30 + "' != '" + models.payment.Payment.PaymentStatus.PENDING + "'", paymentStatus30.equals(models.payment.Payment.PaymentStatus.PENDING));
        org.junit.Assert.assertTrue("'" + paymentStatus43 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus43.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType44 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType44.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType46 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType46.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID47);
        org.junit.Assert.assertTrue("'" + paymentType48 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType48.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod52);
        org.junit.Assert.assertTrue("'" + paymentStatus58 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus58.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType59 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType59.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType61 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType61.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType62 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType62.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod68);
        org.junit.Assert.assertTrue("'" + paymentStatus73 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus73.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType74 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType74.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentStatus76 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus76.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentStatus81 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus81.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType82 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType82.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType84 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType84.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID85);
        org.junit.Assert.assertTrue("'" + paymentType86 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType86.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(paymentMethod88);
        org.junit.Assert.assertTrue("'" + paymentType89 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType89.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentStatus95 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus95.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType96 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType96.equals(models.payment.Payment.PaymentType.FINAL));
    }

    @Test
    public void test018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test018");
        java.util.UUID uUID0 = null;
        models.booking.Booking booking1 = null;
        models.payment.PaymentMethod paymentMethod3 = null;
        models.payment.Payment.PaymentStatus paymentStatus4 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType5 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment6 = new models.payment.Payment(uUID0, booking1, 100.0d, paymentMethod3, paymentStatus4, paymentType5);
        models.payment.Payment.PaymentType paymentType7 = payment6.getPaymentType();
        java.util.UUID uUID8 = payment6.getBookingID();
        models.payment.Payment.PaymentType paymentType9 = models.payment.Payment.PaymentType.FINAL;
        payment6.setPaymentType(paymentType9);
        java.util.UUID uUID11 = payment6.getPaymentID();
        double double12 = payment6.getAmount();
        java.util.UUID uUID13 = null;
        models.booking.Booking booking14 = null;
        models.payment.PaymentMethod paymentMethod16 = null;
        models.payment.Payment.PaymentStatus paymentStatus17 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType18 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment19 = new models.payment.Payment(uUID13, booking14, 100.0d, paymentMethod16, paymentStatus17, paymentType18);
        payment6.setPaymentType(paymentType18);
        java.lang.Class<?> wildcardClass21 = payment6.getClass();
        org.junit.Assert.assertTrue("'" + paymentStatus4 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus4.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType5 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType5.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType7 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType7.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID8);
        org.junit.Assert.assertTrue("'" + paymentType9 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType9.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 100.0d + "'", double12 == 100.0d);
        org.junit.Assert.assertTrue("'" + paymentStatus17 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus17.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType18 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType18.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test019");
        java.util.UUID uUID0 = null;
        models.booking.Booking booking1 = null;
        models.payment.PaymentMethod paymentMethod3 = null;
        models.payment.Payment.PaymentStatus paymentStatus4 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType5 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment6 = new models.payment.Payment(uUID0, booking1, 100.0d, paymentMethod3, paymentStatus4, paymentType5);
        models.payment.Payment.PaymentType paymentType7 = payment6.getPaymentType();
        java.lang.Class<?> wildcardClass8 = payment6.getClass();
        org.junit.Assert.assertTrue("'" + paymentStatus4 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus4.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType5 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType5.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType7 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType7.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test020");
        java.util.UUID uUID0 = null;
        models.booking.Booking booking1 = null;
        models.payment.PaymentMethod paymentMethod3 = null;
        models.payment.Payment.PaymentStatus paymentStatus4 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType5 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment6 = new models.payment.Payment(uUID0, booking1, 100.0d, paymentMethod3, paymentStatus4, paymentType5);
        models.payment.PaymentMethod paymentMethod7 = null;
        payment6.setPaymentMethod(paymentMethod7);
        java.util.UUID uUID9 = null;
        models.booking.Booking booking10 = null;
        models.payment.PaymentMethod paymentMethod12 = null;
        models.payment.Payment.PaymentStatus paymentStatus13 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType14 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment15 = new models.payment.Payment(uUID9, booking10, 100.0d, paymentMethod12, paymentStatus13, paymentType14);
        payment6.setPaymentType(paymentType14);
        org.junit.Assert.assertTrue("'" + paymentStatus4 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus4.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType5 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType5.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentStatus13 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus13.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType14 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType14.equals(models.payment.Payment.PaymentType.FINAL));
    }

    @Test
    public void test021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test021");
        java.util.UUID uUID0 = null;
        models.booking.Booking booking1 = null;
        models.payment.PaymentMethod paymentMethod3 = null;
        models.payment.Payment.PaymentStatus paymentStatus4 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType5 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment6 = new models.payment.Payment(uUID0, booking1, 100.0d, paymentMethod3, paymentStatus4, paymentType5);
        models.payment.Payment.PaymentType paymentType7 = payment6.getPaymentType();
        java.util.UUID uUID8 = payment6.getBookingID();
        models.payment.Payment.PaymentType paymentType9 = models.payment.Payment.PaymentType.FINAL;
        payment6.setPaymentType(paymentType9);
        java.util.UUID uUID11 = payment6.getPaymentID();
        models.payment.PaymentMethod paymentMethod13 = models.payment.Payment.generateMethod("");
        payment6.setPaymentMethod(paymentMethod13);
        models.payment.Payment.PaymentStatus paymentStatus15 = payment6.getStatus();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean16 = payment6.processPayment();
            org.junit.Assert.fail("Expected exception of type models.ParkingSystemException; message: Cannot process payment of a payment that is not pending.");
        } catch (models.ParkingSystemException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + paymentStatus4 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus4.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType5 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType5.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType7 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType7.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID8);
        org.junit.Assert.assertTrue("'" + paymentType9 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType9.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod13);
        org.junit.Assert.assertTrue("'" + paymentStatus15 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus15.equals(models.payment.Payment.PaymentStatus.FAILED));
    }

    @Test
    public void test022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test022");
        java.util.UUID uUID0 = null;
        models.booking.Booking booking1 = null;
        models.payment.PaymentMethod paymentMethod3 = null;
        models.payment.Payment.PaymentStatus paymentStatus4 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType5 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment6 = new models.payment.Payment(uUID0, booking1, 100.0d, paymentMethod3, paymentStatus4, paymentType5);
        models.payment.Payment.PaymentType paymentType7 = payment6.getPaymentType();
        java.util.UUID uUID8 = payment6.getBookingID();
        models.payment.Payment.PaymentType paymentType9 = models.payment.Payment.PaymentType.FINAL;
        payment6.setPaymentType(paymentType9);
        java.util.UUID uUID11 = payment6.getPaymentID();
        models.payment.PaymentMethod paymentMethod13 = models.payment.Payment.generateMethod("");
        payment6.setPaymentMethod(paymentMethod13);
        models.payment.Payment.PaymentStatus paymentStatus15 = payment6.getStatus();
        java.lang.Class<?> wildcardClass16 = paymentStatus15.getClass();
        org.junit.Assert.assertTrue("'" + paymentStatus4 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus4.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType5 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType5.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType7 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType7.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID8);
        org.junit.Assert.assertTrue("'" + paymentType9 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType9.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod13);
        org.junit.Assert.assertTrue("'" + paymentStatus15 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus15.equals(models.payment.Payment.PaymentStatus.FAILED));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test023");
        java.util.UUID uUID0 = null;
        models.booking.Booking booking1 = null;
        models.payment.PaymentMethod paymentMethod3 = null;
        models.payment.Payment.PaymentStatus paymentStatus4 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType5 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment6 = new models.payment.Payment(uUID0, booking1, (-1.0d), paymentMethod3, paymentStatus4, paymentType5);
        models.booking.Booking booking7 = payment6.getBooking();
        java.util.UUID uUID8 = payment6.getBookingID();
        double double9 = payment6.getAmount();
        org.junit.Assert.assertTrue("'" + paymentStatus4 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus4.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType5 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType5.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(booking7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + (-1.0d) + "'", double9 == (-1.0d));
    }

    @Test
    public void test024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test024");
        java.util.UUID uUID0 = null;
        models.booking.Booking booking1 = null;
        java.util.UUID uUID3 = null;
        models.booking.Booking booking4 = null;
        models.payment.PaymentMethod paymentMethod6 = null;
        models.payment.Payment.PaymentStatus paymentStatus7 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType8 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment9 = new models.payment.Payment(uUID3, booking4, 100.0d, paymentMethod6, paymentStatus7, paymentType8);
        models.payment.Payment.PaymentType paymentType10 = payment9.getPaymentType();
        java.util.UUID uUID11 = payment9.getBookingID();
        models.payment.Payment.PaymentType paymentType12 = models.payment.Payment.PaymentType.FINAL;
        payment9.setPaymentType(paymentType12);
        java.util.UUID uUID14 = payment9.getPaymentID();
        models.payment.PaymentMethod paymentMethod16 = models.payment.Payment.generateMethod("");
        payment9.setPaymentMethod(paymentMethod16);
        models.payment.Payment.PaymentStatus paymentStatus18 = models.payment.Payment.PaymentStatus.PENDING;
        models.payment.Payment.PaymentType paymentType19 = null;
        models.payment.Payment payment20 = new models.payment.Payment(uUID0, booking1, (double) (byte) 0, paymentMethod16, paymentStatus18, paymentType19);
        models.payment.Payment.PaymentStatus paymentStatus21 = payment20.getStatus();
        models.payment.PaymentMethod paymentMethod22 = payment20.getMethod();
        org.junit.Assert.assertTrue("'" + paymentStatus7 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus7.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType8 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType8.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType10 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType10.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID11);
        org.junit.Assert.assertTrue("'" + paymentType12 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType12.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod16);
        org.junit.Assert.assertTrue("'" + paymentStatus18 + "' != '" + models.payment.Payment.PaymentStatus.PENDING + "'", paymentStatus18.equals(models.payment.Payment.PaymentStatus.PENDING));
        org.junit.Assert.assertTrue("'" + paymentStatus21 + "' != '" + models.payment.Payment.PaymentStatus.PENDING + "'", paymentStatus21.equals(models.payment.Payment.PaymentStatus.PENDING));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod22);
    }

    @Test
    public void test025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test025");
        java.util.UUID uUID0 = null;
        models.booking.Booking booking1 = null;
        java.util.UUID uUID3 = null;
        models.booking.Booking booking4 = null;
        models.payment.PaymentMethod paymentMethod6 = null;
        models.payment.Payment.PaymentStatus paymentStatus7 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType8 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment9 = new models.payment.Payment(uUID3, booking4, 100.0d, paymentMethod6, paymentStatus7, paymentType8);
        models.payment.Payment.PaymentType paymentType10 = payment9.getPaymentType();
        java.util.UUID uUID11 = payment9.getBookingID();
        models.payment.Payment.PaymentType paymentType12 = models.payment.Payment.PaymentType.FINAL;
        payment9.setPaymentType(paymentType12);
        java.util.UUID uUID14 = payment9.getPaymentID();
        models.payment.PaymentMethod paymentMethod16 = models.payment.Payment.generateMethod("");
        payment9.setPaymentMethod(paymentMethod16);
        models.payment.Payment.PaymentStatus paymentStatus18 = models.payment.Payment.PaymentStatus.PENDING;
        models.payment.Payment.PaymentType paymentType19 = null;
        models.payment.Payment payment20 = new models.payment.Payment(uUID0, booking1, (double) (byte) 0, paymentMethod16, paymentStatus18, paymentType19);
        java.lang.Class<?> wildcardClass21 = payment20.getClass();
        org.junit.Assert.assertTrue("'" + paymentStatus7 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus7.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType8 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType8.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType10 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType10.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID11);
        org.junit.Assert.assertTrue("'" + paymentType12 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType12.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod16);
        org.junit.Assert.assertTrue("'" + paymentStatus18 + "' != '" + models.payment.Payment.PaymentStatus.PENDING + "'", paymentStatus18.equals(models.payment.Payment.PaymentStatus.PENDING));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test026");
        java.util.UUID uUID0 = null;
        models.booking.Booking booking1 = null;
        models.payment.PaymentMethod paymentMethod3 = null;
        models.payment.Payment.PaymentStatus paymentStatus4 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType5 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment6 = new models.payment.Payment(uUID0, booking1, 100.0d, paymentMethod3, paymentStatus4, paymentType5);
        models.payment.Payment.PaymentType paymentType7 = payment6.getPaymentType();
        java.util.UUID uUID8 = payment6.getBookingID();
        models.payment.Payment.PaymentType paymentType9 = models.payment.Payment.PaymentType.FINAL;
        payment6.setPaymentType(paymentType9);
        java.util.UUID uUID11 = payment6.getPaymentID();
        models.payment.PaymentMethod paymentMethod13 = models.payment.Payment.generateMethod("");
        payment6.setPaymentMethod(paymentMethod13);
        models.payment.Payment.PaymentStatus paymentStatus15 = payment6.getStatus();
        java.util.UUID uUID16 = payment6.getPaymentID();
        models.booking.Booking booking17 = payment6.getBooking();
        double double18 = payment6.getAmount();
        org.junit.Assert.assertTrue("'" + paymentStatus4 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus4.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType5 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType5.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType7 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType7.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID8);
        org.junit.Assert.assertTrue("'" + paymentType9 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType9.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod13);
        org.junit.Assert.assertTrue("'" + paymentStatus15 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus15.equals(models.payment.Payment.PaymentStatus.FAILED));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(booking17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 100.0d + "'", double18 == 100.0d);
    }

    @Test
    public void test027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test027");
        java.util.UUID uUID0 = null;
        models.booking.Booking booking1 = null;
        models.payment.PaymentMethod paymentMethod3 = null;
        models.payment.Payment.PaymentStatus paymentStatus4 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType5 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment6 = new models.payment.Payment(uUID0, booking1, 100.0d, paymentMethod3, paymentStatus4, paymentType5);
        double double7 = payment6.getAmount();
        models.booking.Booking booking8 = payment6.getBooking();
        models.booking.Booking booking9 = payment6.getBooking();
        models.booking.Booking booking10 = payment6.getBooking();
        java.util.UUID uUID11 = null;
        models.booking.Booking booking12 = null;
        java.util.UUID uUID14 = null;
        models.booking.Booking booking15 = null;
        models.payment.PaymentMethod paymentMethod17 = null;
        models.payment.Payment.PaymentStatus paymentStatus18 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType19 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment20 = new models.payment.Payment(uUID14, booking15, 100.0d, paymentMethod17, paymentStatus18, paymentType19);
        java.util.UUID uUID21 = null;
        models.booking.Booking booking22 = null;
        java.util.UUID uUID24 = null;
        models.booking.Booking booking25 = null;
        models.payment.PaymentMethod paymentMethod27 = null;
        models.payment.Payment.PaymentStatus paymentStatus28 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType29 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment30 = new models.payment.Payment(uUID24, booking25, 100.0d, paymentMethod27, paymentStatus28, paymentType29);
        models.payment.Payment.PaymentType paymentType31 = payment30.getPaymentType();
        java.util.UUID uUID32 = payment30.getBookingID();
        models.payment.Payment.PaymentType paymentType33 = models.payment.Payment.PaymentType.FINAL;
        payment30.setPaymentType(paymentType33);
        java.util.UUID uUID35 = payment30.getPaymentID();
        models.payment.PaymentMethod paymentMethod37 = models.payment.Payment.generateMethod("");
        payment30.setPaymentMethod(paymentMethod37);
        models.payment.Payment.PaymentStatus paymentStatus39 = models.payment.Payment.PaymentStatus.PENDING;
        models.payment.Payment.PaymentType paymentType40 = null;
        models.payment.Payment payment41 = new models.payment.Payment(uUID21, booking22, (double) (byte) 0, paymentMethod37, paymentStatus39, paymentType40);
        payment20.setPaymentMethod(paymentMethod37);
        java.util.UUID uUID43 = null;
        models.booking.Booking booking44 = null;
        java.util.UUID uUID46 = null;
        models.booking.Booking booking47 = null;
        models.payment.PaymentMethod paymentMethod49 = null;
        models.payment.Payment.PaymentStatus paymentStatus50 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType51 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment52 = new models.payment.Payment(uUID46, booking47, 100.0d, paymentMethod49, paymentStatus50, paymentType51);
        models.payment.Payment.PaymentType paymentType53 = payment52.getPaymentType();
        java.util.UUID uUID54 = payment52.getBookingID();
        models.payment.Payment.PaymentType paymentType55 = models.payment.Payment.PaymentType.FINAL;
        payment52.setPaymentType(paymentType55);
        java.util.UUID uUID57 = payment52.getPaymentID();
        models.payment.PaymentMethod paymentMethod59 = models.payment.Payment.generateMethod("");
        payment52.setPaymentMethod(paymentMethod59);
        models.payment.Payment.PaymentStatus paymentStatus61 = models.payment.Payment.PaymentStatus.PENDING;
        models.payment.Payment.PaymentType paymentType62 = null;
        models.payment.Payment payment63 = new models.payment.Payment(uUID43, booking44, (double) (byte) 0, paymentMethod59, paymentStatus61, paymentType62);
        models.payment.Payment.PaymentStatus paymentStatus64 = payment63.getStatus();
        java.util.UUID uUID65 = null;
        models.booking.Booking booking66 = null;
        models.payment.PaymentMethod paymentMethod68 = null;
        models.payment.Payment.PaymentStatus paymentStatus69 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType70 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment71 = new models.payment.Payment(uUID65, booking66, 100.0d, paymentMethod68, paymentStatus69, paymentType70);
        models.payment.Payment.PaymentType paymentType72 = payment71.getPaymentType();
        java.util.UUID uUID73 = payment71.getBookingID();
        models.payment.Payment.PaymentType paymentType74 = models.payment.Payment.PaymentType.FINAL;
        payment71.setPaymentType(paymentType74);
        models.payment.Payment payment76 = new models.payment.Payment(uUID11, booking12, (double) 'a', paymentMethod37, paymentStatus64, paymentType74);
        payment6.setPaymentType(paymentType74);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean78 = payment6.processPayment();
            org.junit.Assert.fail("Expected exception of type models.ParkingSystemException; message: Cannot process payment of a payment that is not pending.");
        } catch (models.ParkingSystemException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + paymentStatus4 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus4.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType5 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType5.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 100.0d + "'", double7 == 100.0d);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(booking8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(booking9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(booking10);
        org.junit.Assert.assertTrue("'" + paymentStatus18 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus18.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType19 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType19.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentStatus28 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus28.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType29 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType29.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType31 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType31.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID32);
        org.junit.Assert.assertTrue("'" + paymentType33 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType33.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod37);
        org.junit.Assert.assertTrue("'" + paymentStatus39 + "' != '" + models.payment.Payment.PaymentStatus.PENDING + "'", paymentStatus39.equals(models.payment.Payment.PaymentStatus.PENDING));
        org.junit.Assert.assertTrue("'" + paymentStatus50 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus50.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType51 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType51.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType53 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType53.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID54);
        org.junit.Assert.assertTrue("'" + paymentType55 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType55.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod59);
        org.junit.Assert.assertTrue("'" + paymentStatus61 + "' != '" + models.payment.Payment.PaymentStatus.PENDING + "'", paymentStatus61.equals(models.payment.Payment.PaymentStatus.PENDING));
        org.junit.Assert.assertTrue("'" + paymentStatus64 + "' != '" + models.payment.Payment.PaymentStatus.PENDING + "'", paymentStatus64.equals(models.payment.Payment.PaymentStatus.PENDING));
        org.junit.Assert.assertTrue("'" + paymentStatus69 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus69.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType70 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType70.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType72 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType72.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID73);
        org.junit.Assert.assertTrue("'" + paymentType74 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType74.equals(models.payment.Payment.PaymentType.FINAL));
    }

    @Test
    public void test028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test028");
        java.util.UUID uUID0 = null;
        models.booking.Booking booking1 = null;
        models.payment.PaymentMethod paymentMethod3 = null;
        models.payment.Payment.PaymentStatus paymentStatus4 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType5 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment6 = new models.payment.Payment(uUID0, booking1, 100.0d, paymentMethod3, paymentStatus4, paymentType5);
        models.payment.Payment.PaymentType paymentType7 = payment6.getPaymentType();
        double double8 = payment6.getAmount();
        models.booking.Booking booking9 = payment6.getBooking();
        org.junit.Assert.assertTrue("'" + paymentStatus4 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus4.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType5 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType5.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType7 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType7.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 100.0d + "'", double8 == 100.0d);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(booking9);
    }

    @Test
    public void test029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test029");
        java.util.UUID uUID0 = null;
        models.booking.Booking booking1 = null;
        models.payment.PaymentMethod paymentMethod3 = null;
        models.payment.Payment.PaymentStatus paymentStatus4 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType5 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment6 = new models.payment.Payment(uUID0, booking1, 100.0d, paymentMethod3, paymentStatus4, paymentType5);
        models.payment.Payment.PaymentType paymentType7 = payment6.getPaymentType();
        java.util.UUID uUID8 = payment6.getBookingID();
        models.payment.Payment.PaymentType paymentType9 = models.payment.Payment.PaymentType.FINAL;
        payment6.setPaymentType(paymentType9);
        java.util.UUID uUID11 = payment6.getPaymentID();
        double double12 = payment6.getAmount();
        java.util.UUID uUID13 = null;
        models.booking.Booking booking14 = null;
        models.payment.PaymentMethod paymentMethod16 = null;
        models.payment.Payment.PaymentStatus paymentStatus17 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType18 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment19 = new models.payment.Payment(uUID13, booking14, 100.0d, paymentMethod16, paymentStatus17, paymentType18);
        payment6.setPaymentType(paymentType18);
        models.payment.Payment.PaymentStatus paymentStatus21 = payment6.getStatus();
        java.lang.Class<?> wildcardClass22 = paymentStatus21.getClass();
        org.junit.Assert.assertTrue("'" + paymentStatus4 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus4.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType5 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType5.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType7 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType7.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID8);
        org.junit.Assert.assertTrue("'" + paymentType9 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType9.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 100.0d + "'", double12 == 100.0d);
        org.junit.Assert.assertTrue("'" + paymentStatus17 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus17.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType18 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType18.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentStatus21 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus21.equals(models.payment.Payment.PaymentStatus.FAILED));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass22);
    }

    @Test
    public void test030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test030");
        java.util.UUID uUID0 = null;
        models.booking.Booking booking1 = null;
        models.payment.PaymentMethod paymentMethod3 = null;
        models.payment.Payment.PaymentStatus paymentStatus4 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType5 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment6 = new models.payment.Payment(uUID0, booking1, 100.0d, paymentMethod3, paymentStatus4, paymentType5);
        models.payment.Payment.PaymentType paymentType7 = payment6.getPaymentType();
        java.util.UUID uUID8 = payment6.getBookingID();
        models.payment.Payment.PaymentType paymentType9 = models.payment.Payment.PaymentType.FINAL;
        payment6.setPaymentType(paymentType9);
        models.payment.PaymentMethod paymentMethod11 = payment6.getMethod();
        models.payment.Payment.PaymentType paymentType12 = payment6.getPaymentType();
        models.payment.Payment.PaymentStatus paymentStatus13 = payment6.getStatus();
        java.util.UUID uUID14 = payment6.getBookingID();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean15 = payment6.processPayment();
            org.junit.Assert.fail("Expected exception of type models.ParkingSystemException; message: Cannot process payment of a payment that is not pending.");
        } catch (models.ParkingSystemException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + paymentStatus4 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus4.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType5 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType5.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType7 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType7.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID8);
        org.junit.Assert.assertTrue("'" + paymentType9 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType9.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(paymentMethod11);
        org.junit.Assert.assertTrue("'" + paymentType12 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType12.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentStatus13 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus13.equals(models.payment.Payment.PaymentStatus.FAILED));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID14);
    }

    @Test
    public void test031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test031");
        java.util.UUID uUID0 = null;
        models.booking.Booking booking1 = null;
        models.payment.PaymentMethod paymentMethod3 = null;
        models.payment.Payment.PaymentStatus paymentStatus4 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType5 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment6 = new models.payment.Payment(uUID0, booking1, (-1.0d), paymentMethod3, paymentStatus4, paymentType5);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean7 = payment6.processPayment();
            org.junit.Assert.fail("Expected exception of type models.ParkingSystemException; message: Cannot process payment of a payment that is not pending.");
        } catch (models.ParkingSystemException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + paymentStatus4 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus4.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType5 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType5.equals(models.payment.Payment.PaymentType.FINAL));
    }

    @Test
    public void test032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test032");
        java.util.UUID uUID0 = null;
        models.booking.Booking booking1 = null;
        java.util.UUID uUID3 = null;
        models.booking.Booking booking4 = null;
        models.payment.PaymentMethod paymentMethod6 = null;
        models.payment.Payment.PaymentStatus paymentStatus7 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType8 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment9 = new models.payment.Payment(uUID3, booking4, 100.0d, paymentMethod6, paymentStatus7, paymentType8);
        models.payment.Payment.PaymentType paymentType10 = payment9.getPaymentType();
        java.util.UUID uUID11 = payment9.getBookingID();
        models.payment.Payment.PaymentType paymentType12 = models.payment.Payment.PaymentType.FINAL;
        payment9.setPaymentType(paymentType12);
        java.util.UUID uUID14 = payment9.getPaymentID();
        models.payment.PaymentMethod paymentMethod16 = models.payment.Payment.generateMethod("");
        payment9.setPaymentMethod(paymentMethod16);
        models.payment.Payment.PaymentStatus paymentStatus18 = models.payment.Payment.PaymentStatus.PENDING;
        models.payment.Payment.PaymentType paymentType19 = null;
        models.payment.Payment payment20 = new models.payment.Payment(uUID0, booking1, (double) (byte) 0, paymentMethod16, paymentStatus18, paymentType19);
        models.payment.Payment.PaymentStatus paymentStatus21 = payment20.getStatus();
        boolean boolean22 = payment20.processPayment();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean23 = payment20.processPayment();
            org.junit.Assert.fail("Expected exception of type models.ParkingSystemException; message: Cannot process payment of a payment that is not pending.");
        } catch (models.ParkingSystemException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + paymentStatus7 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus7.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType8 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType8.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType10 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType10.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID11);
        org.junit.Assert.assertTrue("'" + paymentType12 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType12.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod16);
        org.junit.Assert.assertTrue("'" + paymentStatus18 + "' != '" + models.payment.Payment.PaymentStatus.PENDING + "'", paymentStatus18.equals(models.payment.Payment.PaymentStatus.PENDING));
        org.junit.Assert.assertTrue("'" + paymentStatus21 + "' != '" + models.payment.Payment.PaymentStatus.PENDING + "'", paymentStatus21.equals(models.payment.Payment.PaymentStatus.PENDING));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
    }

    @Test
    public void test033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test033");
        java.util.UUID uUID0 = null;
        models.booking.Booking booking1 = null;
        models.payment.PaymentMethod paymentMethod3 = null;
        models.payment.Payment.PaymentStatus paymentStatus4 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType5 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment6 = new models.payment.Payment(uUID0, booking1, 100.0d, paymentMethod3, paymentStatus4, paymentType5);
        models.payment.Payment.PaymentType paymentType7 = payment6.getPaymentType();
        java.util.UUID uUID8 = payment6.getBookingID();
        models.payment.Payment.PaymentType paymentType9 = models.payment.Payment.PaymentType.FINAL;
        payment6.setPaymentType(paymentType9);
        models.payment.PaymentMethod paymentMethod11 = payment6.getMethod();
        java.util.UUID uUID12 = payment6.getBookingID();
        models.booking.Booking booking13 = payment6.getBooking();
        java.util.UUID uUID14 = null;
        models.booking.Booking booking15 = null;
        models.payment.PaymentMethod paymentMethod17 = null;
        models.payment.Payment.PaymentStatus paymentStatus18 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType19 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment20 = new models.payment.Payment(uUID14, booking15, 100.0d, paymentMethod17, paymentStatus18, paymentType19);
        models.payment.Payment.PaymentType paymentType21 = payment20.getPaymentType();
        java.util.UUID uUID22 = payment20.getBookingID();
        java.util.UUID uUID23 = payment20.getPaymentID();
        java.util.UUID uUID24 = null;
        models.booking.Booking booking25 = null;
        java.util.UUID uUID27 = null;
        models.booking.Booking booking28 = null;
        java.util.UUID uUID30 = null;
        models.booking.Booking booking31 = null;
        models.payment.PaymentMethod paymentMethod33 = null;
        models.payment.Payment.PaymentStatus paymentStatus34 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType35 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment36 = new models.payment.Payment(uUID30, booking31, 100.0d, paymentMethod33, paymentStatus34, paymentType35);
        models.payment.Payment.PaymentType paymentType37 = payment36.getPaymentType();
        java.util.UUID uUID38 = payment36.getBookingID();
        models.payment.Payment.PaymentType paymentType39 = models.payment.Payment.PaymentType.FINAL;
        payment36.setPaymentType(paymentType39);
        java.util.UUID uUID41 = payment36.getPaymentID();
        models.payment.PaymentMethod paymentMethod43 = models.payment.Payment.generateMethod("");
        payment36.setPaymentMethod(paymentMethod43);
        models.payment.Payment.PaymentStatus paymentStatus45 = models.payment.Payment.PaymentStatus.PENDING;
        models.payment.Payment.PaymentType paymentType46 = null;
        models.payment.Payment payment47 = new models.payment.Payment(uUID27, booking28, (double) (byte) 0, paymentMethod43, paymentStatus45, paymentType46);
        models.payment.Payment.PaymentStatus paymentStatus48 = models.payment.Payment.PaymentStatus.PENDING;
        models.payment.Payment.PaymentType paymentType49 = models.payment.Payment.PaymentType.DEPOSIT;
        models.payment.Payment payment50 = new models.payment.Payment(uUID24, booking25, (double) (byte) 100, paymentMethod43, paymentStatus48, paymentType49);
        models.booking.Booking booking51 = payment50.getBooking();
        double double52 = payment50.getAmount();
        java.util.UUID uUID53 = payment50.getBookingID();
        models.payment.PaymentMethod paymentMethod54 = payment50.getMethod();
        payment20.setPaymentMethod(paymentMethod54);
        payment6.setPaymentMethod(paymentMethod54);
        models.payment.Payment.PaymentStatus paymentStatus57 = payment6.getStatus();
        java.util.UUID uUID58 = payment6.getPaymentID();
        org.junit.Assert.assertTrue("'" + paymentStatus4 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus4.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType5 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType5.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType7 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType7.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID8);
        org.junit.Assert.assertTrue("'" + paymentType9 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType9.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(paymentMethod11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(booking13);
        org.junit.Assert.assertTrue("'" + paymentStatus18 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus18.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType19 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType19.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType21 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType21.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID23);
        org.junit.Assert.assertTrue("'" + paymentStatus34 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus34.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType35 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType35.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType37 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType37.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID38);
        org.junit.Assert.assertTrue("'" + paymentType39 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType39.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod43);
        org.junit.Assert.assertTrue("'" + paymentStatus45 + "' != '" + models.payment.Payment.PaymentStatus.PENDING + "'", paymentStatus45.equals(models.payment.Payment.PaymentStatus.PENDING));
        org.junit.Assert.assertTrue("'" + paymentStatus48 + "' != '" + models.payment.Payment.PaymentStatus.PENDING + "'", paymentStatus48.equals(models.payment.Payment.PaymentStatus.PENDING));
        org.junit.Assert.assertTrue("'" + paymentType49 + "' != '" + models.payment.Payment.PaymentType.DEPOSIT + "'", paymentType49.equals(models.payment.Payment.PaymentType.DEPOSIT));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(booking51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 100.0d + "'", double52 == 100.0d);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod54);
        org.junit.Assert.assertTrue("'" + paymentStatus57 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus57.equals(models.payment.Payment.PaymentStatus.FAILED));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID58);
    }

    @Test
    public void test034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test034");
        java.util.UUID uUID0 = null;
        models.booking.Booking booking1 = null;
        models.booking.Booking booking4 = null;
        models.booking.Booking booking6 = null;
        java.util.UUID uUID7 = null;
        models.booking.Booking booking8 = null;
        models.payment.PaymentMethod paymentMethod10 = null;
        models.payment.Payment.PaymentStatus paymentStatus11 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType12 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment13 = new models.payment.Payment(uUID7, booking8, 100.0d, paymentMethod10, paymentStatus11, paymentType12);
        models.payment.Payment.PaymentType paymentType14 = payment13.getPaymentType();
        java.util.UUID uUID15 = payment13.getBookingID();
        models.payment.Payment.PaymentType paymentType16 = models.payment.Payment.PaymentType.FINAL;
        payment13.setPaymentType(paymentType16);
        java.util.UUID uUID18 = payment13.getPaymentID();
        models.payment.PaymentMethod paymentMethod20 = models.payment.Payment.generateMethod("");
        payment13.setPaymentMethod(paymentMethod20);
        java.util.UUID uUID22 = null;
        models.booking.Booking booking23 = null;
        models.payment.PaymentMethod paymentMethod25 = null;
        models.payment.Payment.PaymentStatus paymentStatus26 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType27 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment28 = new models.payment.Payment(uUID22, booking23, 100.0d, paymentMethod25, paymentStatus26, paymentType27);
        models.payment.Payment.PaymentType paymentType29 = payment28.getPaymentType();
        models.payment.Payment.PaymentType paymentType30 = payment28.getPaymentType();
        models.payment.Payment payment31 = new models.payment.Payment((double) 10, booking6, paymentMethod20, paymentType30);
        models.payment.Payment.PaymentType paymentType32 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment33 = new models.payment.Payment((double) 0.0f, booking4, paymentMethod20, paymentType32);
        java.util.UUID uUID34 = null;
        models.booking.Booking booking35 = null;
        models.payment.PaymentMethod paymentMethod37 = null;
        models.payment.Payment.PaymentStatus paymentStatus38 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType39 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment40 = new models.payment.Payment(uUID34, booking35, (-1.0d), paymentMethod37, paymentStatus38, paymentType39);
        java.util.UUID uUID41 = null;
        models.booking.Booking booking42 = null;
        models.payment.PaymentMethod paymentMethod44 = null;
        models.payment.Payment.PaymentStatus paymentStatus45 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType46 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment47 = new models.payment.Payment(uUID41, booking42, 100.0d, paymentMethod44, paymentStatus45, paymentType46);
        models.payment.Payment.PaymentType paymentType48 = payment47.getPaymentType();
        java.util.UUID uUID49 = payment47.getBookingID();
        models.payment.Payment.PaymentType paymentType50 = models.payment.Payment.PaymentType.FINAL;
        payment47.setPaymentType(paymentType50);
        models.payment.PaymentMethod paymentMethod52 = payment47.getMethod();
        java.util.UUID uUID53 = null;
        models.booking.Booking booking54 = null;
        models.payment.PaymentMethod paymentMethod56 = null;
        models.payment.Payment.PaymentStatus paymentStatus57 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType58 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment59 = new models.payment.Payment(uUID53, booking54, 100.0d, paymentMethod56, paymentStatus57, paymentType58);
        models.payment.Payment.PaymentType paymentType60 = payment59.getPaymentType();
        java.util.UUID uUID61 = payment59.getBookingID();
        models.payment.Payment.PaymentType paymentType62 = models.payment.Payment.PaymentType.FINAL;
        payment59.setPaymentType(paymentType62);
        payment47.setPaymentType(paymentType62);
        models.payment.Payment payment65 = new models.payment.Payment(uUID0, booking1, (double) (byte) 10, paymentMethod20, paymentStatus38, paymentType62);
        models.payment.Payment.PaymentType paymentType66 = payment65.getPaymentType();
        models.payment.Payment.PaymentType paymentType67 = payment65.getPaymentType();
        org.junit.Assert.assertTrue("'" + paymentStatus11 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus11.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType12 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType12.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType14 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType14.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID15);
        org.junit.Assert.assertTrue("'" + paymentType16 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType16.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod20);
        org.junit.Assert.assertTrue("'" + paymentStatus26 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus26.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType27 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType27.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType29 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType29.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType30 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType30.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType32 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType32.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentStatus38 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus38.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType39 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType39.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentStatus45 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus45.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType46 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType46.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType48 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType48.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID49);
        org.junit.Assert.assertTrue("'" + paymentType50 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType50.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(paymentMethod52);
        org.junit.Assert.assertTrue("'" + paymentStatus57 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus57.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType58 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType58.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType60 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType60.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID61);
        org.junit.Assert.assertTrue("'" + paymentType62 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType62.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType66 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType66.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType67 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType67.equals(models.payment.Payment.PaymentType.FINAL));
    }

    @Test
    public void test035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test035");
        java.util.UUID uUID0 = null;
        models.booking.Booking booking1 = null;
        java.util.UUID uUID3 = null;
        models.booking.Booking booking4 = null;
        java.util.UUID uUID6 = null;
        models.booking.Booking booking7 = null;
        models.payment.PaymentMethod paymentMethod9 = null;
        models.payment.Payment.PaymentStatus paymentStatus10 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType11 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment12 = new models.payment.Payment(uUID6, booking7, 100.0d, paymentMethod9, paymentStatus10, paymentType11);
        models.payment.Payment.PaymentType paymentType13 = payment12.getPaymentType();
        java.util.UUID uUID14 = payment12.getBookingID();
        models.payment.Payment.PaymentType paymentType15 = models.payment.Payment.PaymentType.FINAL;
        payment12.setPaymentType(paymentType15);
        java.util.UUID uUID17 = payment12.getPaymentID();
        models.payment.PaymentMethod paymentMethod19 = models.payment.Payment.generateMethod("");
        payment12.setPaymentMethod(paymentMethod19);
        models.payment.Payment.PaymentStatus paymentStatus21 = models.payment.Payment.PaymentStatus.PENDING;
        models.payment.Payment.PaymentType paymentType22 = null;
        models.payment.Payment payment23 = new models.payment.Payment(uUID3, booking4, (double) (byte) 0, paymentMethod19, paymentStatus21, paymentType22);
        models.payment.Payment.PaymentStatus paymentStatus24 = models.payment.Payment.PaymentStatus.PENDING;
        models.payment.Payment.PaymentType paymentType25 = models.payment.Payment.PaymentType.DEPOSIT;
        models.payment.Payment payment26 = new models.payment.Payment(uUID0, booking1, (double) (byte) 100, paymentMethod19, paymentStatus24, paymentType25);
        models.booking.Booking booking27 = payment26.getBooking();
        double double28 = payment26.getAmount();
        double double29 = payment26.getAmount();
        models.booking.Booking booking30 = payment26.getBooking();
        org.junit.Assert.assertTrue("'" + paymentStatus10 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus10.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType11 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType11.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType13 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType13.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID14);
        org.junit.Assert.assertTrue("'" + paymentType15 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType15.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod19);
        org.junit.Assert.assertTrue("'" + paymentStatus21 + "' != '" + models.payment.Payment.PaymentStatus.PENDING + "'", paymentStatus21.equals(models.payment.Payment.PaymentStatus.PENDING));
        org.junit.Assert.assertTrue("'" + paymentStatus24 + "' != '" + models.payment.Payment.PaymentStatus.PENDING + "'", paymentStatus24.equals(models.payment.Payment.PaymentStatus.PENDING));
        org.junit.Assert.assertTrue("'" + paymentType25 + "' != '" + models.payment.Payment.PaymentType.DEPOSIT + "'", paymentType25.equals(models.payment.Payment.PaymentType.DEPOSIT));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(booking27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 100.0d + "'", double28 == 100.0d);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 100.0d + "'", double29 == 100.0d);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(booking30);
    }

    @Test
    public void test036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test036");
        models.booking.Booking booking1 = null;
        models.booking.Booking booking3 = null;
        java.util.UUID uUID4 = null;
        models.booking.Booking booking5 = null;
        models.payment.PaymentMethod paymentMethod7 = null;
        models.payment.Payment.PaymentStatus paymentStatus8 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType9 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment10 = new models.payment.Payment(uUID4, booking5, 100.0d, paymentMethod7, paymentStatus8, paymentType9);
        models.payment.Payment.PaymentType paymentType11 = payment10.getPaymentType();
        java.util.UUID uUID12 = payment10.getBookingID();
        models.payment.Payment.PaymentType paymentType13 = models.payment.Payment.PaymentType.FINAL;
        payment10.setPaymentType(paymentType13);
        java.util.UUID uUID15 = payment10.getPaymentID();
        models.payment.PaymentMethod paymentMethod17 = models.payment.Payment.generateMethod("");
        payment10.setPaymentMethod(paymentMethod17);
        java.util.UUID uUID19 = null;
        models.booking.Booking booking20 = null;
        models.payment.PaymentMethod paymentMethod22 = null;
        models.payment.Payment.PaymentStatus paymentStatus23 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType24 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment25 = new models.payment.Payment(uUID19, booking20, 100.0d, paymentMethod22, paymentStatus23, paymentType24);
        models.payment.Payment.PaymentType paymentType26 = payment25.getPaymentType();
        models.payment.Payment.PaymentType paymentType27 = payment25.getPaymentType();
        models.payment.Payment payment28 = new models.payment.Payment((double) 10, booking3, paymentMethod17, paymentType27);
        java.util.UUID uUID29 = null;
        models.booking.Booking booking30 = null;
        models.payment.PaymentMethod paymentMethod32 = null;
        models.payment.Payment.PaymentStatus paymentStatus33 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType34 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment35 = new models.payment.Payment(uUID29, booking30, 100.0d, paymentMethod32, paymentStatus33, paymentType34);
        models.payment.Payment.PaymentType paymentType36 = payment35.getPaymentType();
        java.util.UUID uUID37 = payment35.getBookingID();
        models.payment.Payment.PaymentType paymentType38 = models.payment.Payment.PaymentType.FINAL;
        payment35.setPaymentType(paymentType38);
        models.payment.PaymentMethod paymentMethod40 = payment35.getMethod();
        models.payment.Payment.PaymentType paymentType41 = payment35.getPaymentType();
        models.payment.Payment payment42 = new models.payment.Payment((double) 0, booking1, paymentMethod17, paymentType41);
        double double43 = payment42.getAmount();
        models.payment.Payment.PaymentStatus paymentStatus44 = payment42.getStatus();
        org.junit.Assert.assertTrue("'" + paymentStatus8 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus8.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType9 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType9.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType11 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType11.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID12);
        org.junit.Assert.assertTrue("'" + paymentType13 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType13.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod17);
        org.junit.Assert.assertTrue("'" + paymentStatus23 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus23.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType24 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType24.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType26 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType26.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType27 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType27.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentStatus33 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus33.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType34 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType34.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType36 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType36.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID37);
        org.junit.Assert.assertTrue("'" + paymentType38 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType38.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(paymentMethod40);
        org.junit.Assert.assertTrue("'" + paymentType41 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType41.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertTrue("'" + paymentStatus44 + "' != '" + models.payment.Payment.PaymentStatus.PENDING + "'", paymentStatus44.equals(models.payment.Payment.PaymentStatus.PENDING));
    }

    @Test
    public void test037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test037");
        java.util.UUID uUID0 = null;
        models.booking.Booking booking1 = null;
        models.payment.PaymentMethod paymentMethod3 = null;
        models.payment.Payment.PaymentStatus paymentStatus4 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType5 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment6 = new models.payment.Payment(uUID0, booking1, 100.0d, paymentMethod3, paymentStatus4, paymentType5);
        models.payment.Payment.PaymentType paymentType7 = models.payment.Payment.PaymentType.DEPOSIT;
        payment6.setPaymentType(paymentType7);
        java.util.UUID uUID9 = payment6.getBookingID();
        models.payment.Payment.PaymentType paymentType10 = payment6.getPaymentType();
        java.util.UUID uUID11 = payment6.getPaymentID();
        models.payment.Payment.PaymentType paymentType12 = payment6.getPaymentType();
        org.junit.Assert.assertTrue("'" + paymentStatus4 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus4.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType5 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType5.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType7 + "' != '" + models.payment.Payment.PaymentType.DEPOSIT + "'", paymentType7.equals(models.payment.Payment.PaymentType.DEPOSIT));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID9);
        org.junit.Assert.assertTrue("'" + paymentType10 + "' != '" + models.payment.Payment.PaymentType.DEPOSIT + "'", paymentType10.equals(models.payment.Payment.PaymentType.DEPOSIT));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID11);
        org.junit.Assert.assertTrue("'" + paymentType12 + "' != '" + models.payment.Payment.PaymentType.DEPOSIT + "'", paymentType12.equals(models.payment.Payment.PaymentType.DEPOSIT));
    }

    @Test
    public void test038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test038");
        java.util.UUID uUID0 = null;
        models.booking.Booking booking1 = null;
        java.util.UUID uUID3 = null;
        models.booking.Booking booking4 = null;
        models.payment.PaymentMethod paymentMethod6 = null;
        models.payment.Payment.PaymentStatus paymentStatus7 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType8 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment9 = new models.payment.Payment(uUID3, booking4, 100.0d, paymentMethod6, paymentStatus7, paymentType8);
        java.util.UUID uUID10 = null;
        models.booking.Booking booking11 = null;
        java.util.UUID uUID13 = null;
        models.booking.Booking booking14 = null;
        models.payment.PaymentMethod paymentMethod16 = null;
        models.payment.Payment.PaymentStatus paymentStatus17 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType18 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment19 = new models.payment.Payment(uUID13, booking14, 100.0d, paymentMethod16, paymentStatus17, paymentType18);
        models.payment.Payment.PaymentType paymentType20 = payment19.getPaymentType();
        java.util.UUID uUID21 = payment19.getBookingID();
        models.payment.Payment.PaymentType paymentType22 = models.payment.Payment.PaymentType.FINAL;
        payment19.setPaymentType(paymentType22);
        java.util.UUID uUID24 = payment19.getPaymentID();
        models.payment.PaymentMethod paymentMethod26 = models.payment.Payment.generateMethod("");
        payment19.setPaymentMethod(paymentMethod26);
        models.payment.Payment.PaymentStatus paymentStatus28 = models.payment.Payment.PaymentStatus.PENDING;
        models.payment.Payment.PaymentType paymentType29 = null;
        models.payment.Payment payment30 = new models.payment.Payment(uUID10, booking11, (double) (byte) 0, paymentMethod26, paymentStatus28, paymentType29);
        payment9.setPaymentMethod(paymentMethod26);
        java.util.UUID uUID32 = null;
        models.booking.Booking booking33 = null;
        java.util.UUID uUID35 = null;
        models.booking.Booking booking36 = null;
        models.payment.PaymentMethod paymentMethod38 = null;
        models.payment.Payment.PaymentStatus paymentStatus39 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType40 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment41 = new models.payment.Payment(uUID35, booking36, 100.0d, paymentMethod38, paymentStatus39, paymentType40);
        models.payment.Payment.PaymentType paymentType42 = payment41.getPaymentType();
        java.util.UUID uUID43 = payment41.getBookingID();
        models.payment.Payment.PaymentType paymentType44 = models.payment.Payment.PaymentType.FINAL;
        payment41.setPaymentType(paymentType44);
        java.util.UUID uUID46 = payment41.getPaymentID();
        models.payment.PaymentMethod paymentMethod48 = models.payment.Payment.generateMethod("");
        payment41.setPaymentMethod(paymentMethod48);
        models.payment.Payment.PaymentStatus paymentStatus50 = models.payment.Payment.PaymentStatus.PENDING;
        models.payment.Payment.PaymentType paymentType51 = null;
        models.payment.Payment payment52 = new models.payment.Payment(uUID32, booking33, (double) (byte) 0, paymentMethod48, paymentStatus50, paymentType51);
        models.payment.Payment.PaymentStatus paymentStatus53 = payment52.getStatus();
        java.util.UUID uUID54 = null;
        models.booking.Booking booking55 = null;
        models.payment.PaymentMethod paymentMethod57 = null;
        models.payment.Payment.PaymentStatus paymentStatus58 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType59 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment60 = new models.payment.Payment(uUID54, booking55, 100.0d, paymentMethod57, paymentStatus58, paymentType59);
        models.payment.Payment.PaymentType paymentType61 = payment60.getPaymentType();
        java.util.UUID uUID62 = payment60.getBookingID();
        models.payment.Payment.PaymentType paymentType63 = models.payment.Payment.PaymentType.FINAL;
        payment60.setPaymentType(paymentType63);
        models.payment.Payment payment65 = new models.payment.Payment(uUID0, booking1, (double) 'a', paymentMethod26, paymentStatus53, paymentType63);
        java.lang.Class<?> wildcardClass66 = paymentType63.getClass();
        org.junit.Assert.assertTrue("'" + paymentStatus7 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus7.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType8 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType8.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentStatus17 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus17.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType18 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType18.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType20 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType20.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID21);
        org.junit.Assert.assertTrue("'" + paymentType22 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType22.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod26);
        org.junit.Assert.assertTrue("'" + paymentStatus28 + "' != '" + models.payment.Payment.PaymentStatus.PENDING + "'", paymentStatus28.equals(models.payment.Payment.PaymentStatus.PENDING));
        org.junit.Assert.assertTrue("'" + paymentStatus39 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus39.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType40 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType40.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType42 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType42.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID43);
        org.junit.Assert.assertTrue("'" + paymentType44 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType44.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod48);
        org.junit.Assert.assertTrue("'" + paymentStatus50 + "' != '" + models.payment.Payment.PaymentStatus.PENDING + "'", paymentStatus50.equals(models.payment.Payment.PaymentStatus.PENDING));
        org.junit.Assert.assertTrue("'" + paymentStatus53 + "' != '" + models.payment.Payment.PaymentStatus.PENDING + "'", paymentStatus53.equals(models.payment.Payment.PaymentStatus.PENDING));
        org.junit.Assert.assertTrue("'" + paymentStatus58 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus58.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType59 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType59.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType61 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType61.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID62);
        org.junit.Assert.assertTrue("'" + paymentType63 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType63.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass66);
    }

    @Test
    public void test039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test039");
        java.util.UUID uUID0 = null;
        models.booking.Booking booking1 = null;
        models.payment.PaymentMethod paymentMethod3 = null;
        models.payment.Payment.PaymentStatus paymentStatus4 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType5 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment6 = new models.payment.Payment(uUID0, booking1, 100.0d, paymentMethod3, paymentStatus4, paymentType5);
        models.payment.Payment.PaymentType paymentType7 = payment6.getPaymentType();
        java.util.UUID uUID8 = payment6.getBookingID();
        models.payment.Payment.PaymentType paymentType9 = models.payment.Payment.PaymentType.FINAL;
        payment6.setPaymentType(paymentType9);
        models.payment.PaymentMethod paymentMethod11 = payment6.getMethod();
        models.payment.Payment.PaymentType paymentType12 = payment6.getPaymentType();
        java.util.UUID uUID13 = payment6.getBookingID();
        models.payment.PaymentMethod paymentMethod14 = payment6.getMethod();
        java.lang.Class<?> wildcardClass15 = payment6.getClass();
        org.junit.Assert.assertTrue("'" + paymentStatus4 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus4.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType5 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType5.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType7 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType7.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID8);
        org.junit.Assert.assertTrue("'" + paymentType9 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType9.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(paymentMethod11);
        org.junit.Assert.assertTrue("'" + paymentType12 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType12.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(paymentMethod14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test040");
        models.booking.Booking booking1 = null;
        models.booking.Booking booking3 = null;
        java.util.UUID uUID4 = null;
        models.booking.Booking booking5 = null;
        models.payment.PaymentMethod paymentMethod7 = null;
        models.payment.Payment.PaymentStatus paymentStatus8 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType9 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment10 = new models.payment.Payment(uUID4, booking5, 100.0d, paymentMethod7, paymentStatus8, paymentType9);
        models.payment.Payment.PaymentType paymentType11 = payment10.getPaymentType();
        java.util.UUID uUID12 = payment10.getBookingID();
        models.payment.Payment.PaymentType paymentType13 = models.payment.Payment.PaymentType.FINAL;
        payment10.setPaymentType(paymentType13);
        java.util.UUID uUID15 = payment10.getPaymentID();
        models.payment.PaymentMethod paymentMethod17 = models.payment.Payment.generateMethod("");
        payment10.setPaymentMethod(paymentMethod17);
        java.util.UUID uUID19 = null;
        models.booking.Booking booking20 = null;
        models.payment.PaymentMethod paymentMethod22 = null;
        models.payment.Payment.PaymentStatus paymentStatus23 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType24 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment25 = new models.payment.Payment(uUID19, booking20, 100.0d, paymentMethod22, paymentStatus23, paymentType24);
        models.payment.Payment.PaymentType paymentType26 = payment25.getPaymentType();
        models.payment.Payment.PaymentType paymentType27 = payment25.getPaymentType();
        models.payment.Payment payment28 = new models.payment.Payment((double) 10, booking3, paymentMethod17, paymentType27);
        java.util.UUID uUID29 = null;
        models.booking.Booking booking30 = null;
        models.payment.PaymentMethod paymentMethod32 = null;
        models.payment.Payment.PaymentStatus paymentStatus33 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType34 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment35 = new models.payment.Payment(uUID29, booking30, 100.0d, paymentMethod32, paymentStatus33, paymentType34);
        models.payment.Payment.PaymentType paymentType36 = payment35.getPaymentType();
        java.util.UUID uUID37 = payment35.getBookingID();
        models.payment.Payment.PaymentType paymentType38 = models.payment.Payment.PaymentType.FINAL;
        payment35.setPaymentType(paymentType38);
        models.payment.PaymentMethod paymentMethod40 = payment35.getMethod();
        models.payment.Payment.PaymentType paymentType41 = payment35.getPaymentType();
        models.payment.Payment payment42 = new models.payment.Payment((double) 0, booking1, paymentMethod17, paymentType41);
        java.util.UUID uUID43 = payment42.getBookingID();
        java.util.UUID uUID44 = payment42.getBookingID();
        models.payment.Payment.PaymentStatus paymentStatus45 = payment42.getStatus();
        java.lang.Class<?> wildcardClass46 = payment42.getClass();
        org.junit.Assert.assertTrue("'" + paymentStatus8 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus8.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType9 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType9.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType11 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType11.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID12);
        org.junit.Assert.assertTrue("'" + paymentType13 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType13.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod17);
        org.junit.Assert.assertTrue("'" + paymentStatus23 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus23.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType24 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType24.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType26 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType26.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType27 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType27.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentStatus33 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus33.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType34 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType34.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType36 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType36.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID37);
        org.junit.Assert.assertTrue("'" + paymentType38 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType38.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(paymentMethod40);
        org.junit.Assert.assertTrue("'" + paymentType41 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType41.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID44);
        org.junit.Assert.assertTrue("'" + paymentStatus45 + "' != '" + models.payment.Payment.PaymentStatus.PENDING + "'", paymentStatus45.equals(models.payment.Payment.PaymentStatus.PENDING));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass46);
    }

    @Test
    public void test041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test041");
        java.util.UUID uUID0 = null;
        models.booking.Booking booking1 = null;
        models.payment.PaymentMethod paymentMethod3 = null;
        models.payment.Payment.PaymentStatus paymentStatus4 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType5 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment6 = new models.payment.Payment(uUID0, booking1, 100.0d, paymentMethod3, paymentStatus4, paymentType5);
        models.payment.Payment.PaymentType paymentType7 = payment6.getPaymentType();
        java.util.UUID uUID8 = payment6.getBookingID();
        models.payment.Payment.PaymentType paymentType9 = models.payment.Payment.PaymentType.FINAL;
        payment6.setPaymentType(paymentType9);
        java.util.UUID uUID11 = payment6.getPaymentID();
        models.payment.PaymentMethod paymentMethod13 = models.payment.Payment.generateMethod("");
        payment6.setPaymentMethod(paymentMethod13);
        models.payment.Payment.PaymentStatus paymentStatus15 = payment6.getStatus();
        java.util.UUID uUID16 = payment6.getPaymentID();
        double double17 = payment6.getAmount();
        org.junit.Assert.assertTrue("'" + paymentStatus4 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus4.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType5 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType5.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType7 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType7.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID8);
        org.junit.Assert.assertTrue("'" + paymentType9 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType9.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod13);
        org.junit.Assert.assertTrue("'" + paymentStatus15 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus15.equals(models.payment.Payment.PaymentStatus.FAILED));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 100.0d + "'", double17 == 100.0d);
    }

    @Test
    public void test042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test042");
        models.booking.Booking booking1 = null;
        models.booking.Booking booking3 = null;
        java.util.UUID uUID4 = null;
        models.booking.Booking booking5 = null;
        models.payment.PaymentMethod paymentMethod7 = null;
        models.payment.Payment.PaymentStatus paymentStatus8 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType9 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment10 = new models.payment.Payment(uUID4, booking5, 100.0d, paymentMethod7, paymentStatus8, paymentType9);
        models.payment.Payment.PaymentType paymentType11 = payment10.getPaymentType();
        java.util.UUID uUID12 = payment10.getBookingID();
        models.payment.Payment.PaymentType paymentType13 = models.payment.Payment.PaymentType.FINAL;
        payment10.setPaymentType(paymentType13);
        java.util.UUID uUID15 = payment10.getPaymentID();
        models.payment.PaymentMethod paymentMethod17 = models.payment.Payment.generateMethod("");
        payment10.setPaymentMethod(paymentMethod17);
        java.util.UUID uUID19 = null;
        models.booking.Booking booking20 = null;
        models.payment.PaymentMethod paymentMethod22 = null;
        models.payment.Payment.PaymentStatus paymentStatus23 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType24 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment25 = new models.payment.Payment(uUID19, booking20, 100.0d, paymentMethod22, paymentStatus23, paymentType24);
        models.payment.Payment.PaymentType paymentType26 = payment25.getPaymentType();
        models.payment.Payment.PaymentType paymentType27 = payment25.getPaymentType();
        models.payment.Payment payment28 = new models.payment.Payment((double) 10, booking3, paymentMethod17, paymentType27);
        java.util.UUID uUID29 = null;
        models.booking.Booking booking30 = null;
        models.payment.PaymentMethod paymentMethod32 = null;
        models.payment.Payment.PaymentStatus paymentStatus33 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType34 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment35 = new models.payment.Payment(uUID29, booking30, 100.0d, paymentMethod32, paymentStatus33, paymentType34);
        models.payment.Payment payment36 = new models.payment.Payment((double) '4', booking1, paymentMethod17, paymentType34);
        java.util.UUID uUID37 = payment36.getBookingID();
        java.util.UUID uUID38 = payment36.getPaymentID();
        boolean boolean39 = payment36.processPayment();
        org.junit.Assert.assertTrue("'" + paymentStatus8 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus8.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType9 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType9.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType11 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType11.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID12);
        org.junit.Assert.assertTrue("'" + paymentType13 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType13.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod17);
        org.junit.Assert.assertTrue("'" + paymentStatus23 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus23.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType24 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType24.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType26 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType26.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType27 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType27.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentStatus33 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus33.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType34 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType34.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(uUID38);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(uUID38.toString(), "116831ca-e999-478b-871e-b3eb7bb2295b");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
    }

    @Test
    public void test043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test043");
        java.util.UUID uUID0 = null;
        models.booking.Booking booking1 = null;
        models.payment.PaymentMethod paymentMethod3 = null;
        models.payment.Payment.PaymentStatus paymentStatus4 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType5 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment6 = new models.payment.Payment(uUID0, booking1, 100.0d, paymentMethod3, paymentStatus4, paymentType5);
        double double7 = payment6.getAmount();
        models.payment.Payment.PaymentStatus paymentStatus8 = payment6.getStatus();
        double double9 = payment6.getAmount();
        org.junit.Assert.assertTrue("'" + paymentStatus4 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus4.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType5 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType5.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 100.0d + "'", double7 == 100.0d);
        org.junit.Assert.assertTrue("'" + paymentStatus8 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus8.equals(models.payment.Payment.PaymentStatus.FAILED));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 100.0d + "'", double9 == 100.0d);
    }

    @Test
    public void test044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test044");
        java.util.UUID uUID0 = null;
        models.booking.Booking booking1 = null;
        models.payment.PaymentMethod paymentMethod3 = null;
        models.payment.Payment.PaymentStatus paymentStatus4 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType5 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment6 = new models.payment.Payment(uUID0, booking1, 100.0d, paymentMethod3, paymentStatus4, paymentType5);
        models.payment.Payment.PaymentStatus paymentStatus7 = payment6.getStatus();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean8 = payment6.processPayment();
            org.junit.Assert.fail("Expected exception of type models.ParkingSystemException; message: Cannot process payment of a payment that is not pending.");
        } catch (models.ParkingSystemException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + paymentStatus4 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus4.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType5 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType5.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentStatus7 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus7.equals(models.payment.Payment.PaymentStatus.FAILED));
    }

    @Test
    public void test045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test045");
        java.util.UUID uUID0 = null;
        models.booking.Booking booking1 = null;
        java.util.UUID uUID3 = null;
        models.booking.Booking booking4 = null;
        java.util.UUID uUID6 = null;
        models.booking.Booking booking7 = null;
        models.payment.PaymentMethod paymentMethod9 = null;
        models.payment.Payment.PaymentStatus paymentStatus10 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType11 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment12 = new models.payment.Payment(uUID6, booking7, 100.0d, paymentMethod9, paymentStatus10, paymentType11);
        models.payment.Payment.PaymentType paymentType13 = payment12.getPaymentType();
        java.util.UUID uUID14 = payment12.getBookingID();
        models.payment.Payment.PaymentType paymentType15 = models.payment.Payment.PaymentType.FINAL;
        payment12.setPaymentType(paymentType15);
        java.util.UUID uUID17 = payment12.getPaymentID();
        models.payment.PaymentMethod paymentMethod19 = models.payment.Payment.generateMethod("");
        payment12.setPaymentMethod(paymentMethod19);
        models.payment.Payment.PaymentStatus paymentStatus21 = models.payment.Payment.PaymentStatus.PENDING;
        models.payment.Payment.PaymentType paymentType22 = null;
        models.payment.Payment payment23 = new models.payment.Payment(uUID3, booking4, (double) (byte) 0, paymentMethod19, paymentStatus21, paymentType22);
        models.payment.Payment.PaymentStatus paymentStatus24 = models.payment.Payment.PaymentStatus.PENDING;
        models.payment.Payment.PaymentType paymentType25 = models.payment.Payment.PaymentType.DEPOSIT;
        models.payment.Payment payment26 = new models.payment.Payment(uUID0, booking1, (double) (byte) 100, paymentMethod19, paymentStatus24, paymentType25);
        models.booking.Booking booking27 = payment26.getBooking();
        double double28 = payment26.getAmount();
        java.util.UUID uUID29 = payment26.getBookingID();
        models.payment.Payment.PaymentType paymentType30 = payment26.getPaymentType();
        models.booking.Booking booking32 = null;
        models.booking.Booking booking34 = null;
        java.util.UUID uUID35 = null;
        models.booking.Booking booking36 = null;
        models.payment.PaymentMethod paymentMethod38 = null;
        models.payment.Payment.PaymentStatus paymentStatus39 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType40 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment41 = new models.payment.Payment(uUID35, booking36, 100.0d, paymentMethod38, paymentStatus39, paymentType40);
        models.payment.Payment.PaymentType paymentType42 = payment41.getPaymentType();
        java.util.UUID uUID43 = payment41.getBookingID();
        models.payment.Payment.PaymentType paymentType44 = models.payment.Payment.PaymentType.FINAL;
        payment41.setPaymentType(paymentType44);
        java.util.UUID uUID46 = payment41.getPaymentID();
        models.payment.PaymentMethod paymentMethod48 = models.payment.Payment.generateMethod("");
        payment41.setPaymentMethod(paymentMethod48);
        java.util.UUID uUID50 = null;
        models.booking.Booking booking51 = null;
        models.payment.PaymentMethod paymentMethod53 = null;
        models.payment.Payment.PaymentStatus paymentStatus54 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType55 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment56 = new models.payment.Payment(uUID50, booking51, 100.0d, paymentMethod53, paymentStatus54, paymentType55);
        models.payment.Payment.PaymentType paymentType57 = payment56.getPaymentType();
        models.payment.Payment.PaymentType paymentType58 = payment56.getPaymentType();
        models.payment.Payment payment59 = new models.payment.Payment((double) 10, booking34, paymentMethod48, paymentType58);
        java.util.UUID uUID60 = null;
        models.booking.Booking booking61 = null;
        models.payment.PaymentMethod paymentMethod63 = null;
        models.payment.Payment.PaymentStatus paymentStatus64 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType65 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment66 = new models.payment.Payment(uUID60, booking61, 100.0d, paymentMethod63, paymentStatus64, paymentType65);
        models.payment.Payment.PaymentType paymentType67 = payment66.getPaymentType();
        java.util.UUID uUID68 = payment66.getBookingID();
        models.payment.Payment.PaymentType paymentType69 = models.payment.Payment.PaymentType.FINAL;
        payment66.setPaymentType(paymentType69);
        models.payment.PaymentMethod paymentMethod71 = payment66.getMethod();
        models.payment.Payment.PaymentType paymentType72 = payment66.getPaymentType();
        models.payment.Payment payment73 = new models.payment.Payment((double) (short) -1, booking32, paymentMethod48, paymentType72);
        payment26.setPaymentMethod(paymentMethod48);
        org.junit.Assert.assertTrue("'" + paymentStatus10 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus10.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType11 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType11.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType13 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType13.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID14);
        org.junit.Assert.assertTrue("'" + paymentType15 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType15.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod19);
        org.junit.Assert.assertTrue("'" + paymentStatus21 + "' != '" + models.payment.Payment.PaymentStatus.PENDING + "'", paymentStatus21.equals(models.payment.Payment.PaymentStatus.PENDING));
        org.junit.Assert.assertTrue("'" + paymentStatus24 + "' != '" + models.payment.Payment.PaymentStatus.PENDING + "'", paymentStatus24.equals(models.payment.Payment.PaymentStatus.PENDING));
        org.junit.Assert.assertTrue("'" + paymentType25 + "' != '" + models.payment.Payment.PaymentType.DEPOSIT + "'", paymentType25.equals(models.payment.Payment.PaymentType.DEPOSIT));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(booking27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 100.0d + "'", double28 == 100.0d);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID29);
        org.junit.Assert.assertTrue("'" + paymentType30 + "' != '" + models.payment.Payment.PaymentType.DEPOSIT + "'", paymentType30.equals(models.payment.Payment.PaymentType.DEPOSIT));
        org.junit.Assert.assertTrue("'" + paymentStatus39 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus39.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType40 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType40.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType42 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType42.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID43);
        org.junit.Assert.assertTrue("'" + paymentType44 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType44.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod48);
        org.junit.Assert.assertTrue("'" + paymentStatus54 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus54.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType55 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType55.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType57 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType57.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType58 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType58.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentStatus64 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus64.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType65 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType65.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType67 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType67.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID68);
        org.junit.Assert.assertTrue("'" + paymentType69 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType69.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(paymentMethod71);
        org.junit.Assert.assertTrue("'" + paymentType72 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType72.equals(models.payment.Payment.PaymentType.FINAL));
    }

    @Test
    public void test046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test046");
        java.util.UUID uUID0 = null;
        models.booking.Booking booking1 = null;
        models.payment.PaymentMethod paymentMethod3 = null;
        models.payment.Payment.PaymentStatus paymentStatus4 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType5 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment6 = new models.payment.Payment(uUID0, booking1, 100.0d, paymentMethod3, paymentStatus4, paymentType5);
        models.payment.Payment.PaymentType paymentType7 = payment6.getPaymentType();
        java.util.UUID uUID8 = payment6.getBookingID();
        models.payment.Payment.PaymentType paymentType9 = models.payment.Payment.PaymentType.FINAL;
        payment6.setPaymentType(paymentType9);
        java.util.UUID uUID11 = payment6.getPaymentID();
        double double12 = payment6.getAmount();
        java.util.UUID uUID13 = null;
        models.booking.Booking booking14 = null;
        models.payment.PaymentMethod paymentMethod16 = null;
        models.payment.Payment.PaymentStatus paymentStatus17 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType18 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment19 = new models.payment.Payment(uUID13, booking14, 100.0d, paymentMethod16, paymentStatus17, paymentType18);
        payment6.setPaymentType(paymentType18);
        models.payment.Payment.PaymentStatus paymentStatus21 = payment6.getStatus();
        models.payment.PaymentMethod paymentMethod22 = payment6.getMethod();
        java.util.UUID uUID23 = payment6.getBookingID();
        org.junit.Assert.assertTrue("'" + paymentStatus4 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus4.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType5 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType5.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType7 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType7.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID8);
        org.junit.Assert.assertTrue("'" + paymentType9 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType9.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 100.0d + "'", double12 == 100.0d);
        org.junit.Assert.assertTrue("'" + paymentStatus17 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus17.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType18 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType18.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentStatus21 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus21.equals(models.payment.Payment.PaymentStatus.FAILED));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(paymentMethod22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID23);
    }

    @Test
    public void test047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test047");
        java.util.UUID uUID0 = null;
        models.booking.Booking booking1 = null;
        models.payment.PaymentMethod paymentMethod3 = null;
        models.payment.Payment.PaymentStatus paymentStatus4 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType5 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment6 = new models.payment.Payment(uUID0, booking1, 100.0d, paymentMethod3, paymentStatus4, paymentType5);
        java.util.UUID uUID7 = payment6.getPaymentID();
        java.util.UUID uUID8 = payment6.getBookingID();
        org.junit.Assert.assertTrue("'" + paymentStatus4 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus4.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType5 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType5.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID8);
    }

    @Test
    public void test048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test048");
        java.util.UUID uUID0 = null;
        models.booking.Booking booking1 = null;
        models.booking.Booking booking4 = null;
        java.util.UUID uUID5 = null;
        models.booking.Booking booking6 = null;
        models.payment.PaymentMethod paymentMethod8 = null;
        models.payment.Payment.PaymentStatus paymentStatus9 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType10 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment11 = new models.payment.Payment(uUID5, booking6, 100.0d, paymentMethod8, paymentStatus9, paymentType10);
        models.payment.Payment.PaymentType paymentType12 = payment11.getPaymentType();
        java.util.UUID uUID13 = payment11.getBookingID();
        models.payment.Payment.PaymentType paymentType14 = models.payment.Payment.PaymentType.FINAL;
        payment11.setPaymentType(paymentType14);
        java.util.UUID uUID16 = payment11.getPaymentID();
        models.payment.PaymentMethod paymentMethod18 = models.payment.Payment.generateMethod("");
        payment11.setPaymentMethod(paymentMethod18);
        java.util.UUID uUID20 = null;
        models.booking.Booking booking21 = null;
        models.payment.PaymentMethod paymentMethod23 = null;
        models.payment.Payment.PaymentStatus paymentStatus24 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType25 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment26 = new models.payment.Payment(uUID20, booking21, 100.0d, paymentMethod23, paymentStatus24, paymentType25);
        models.payment.Payment.PaymentType paymentType27 = payment26.getPaymentType();
        models.payment.Payment.PaymentType paymentType28 = payment26.getPaymentType();
        models.payment.Payment payment29 = new models.payment.Payment((double) 10, booking4, paymentMethod18, paymentType28);
        java.util.UUID uUID30 = null;
        models.booking.Booking booking31 = null;
        models.payment.PaymentMethod paymentMethod34 = models.payment.Payment.generateMethod("");
        java.util.UUID uUID35 = null;
        models.booking.Booking booking36 = null;
        models.payment.PaymentMethod paymentMethod38 = null;
        models.payment.Payment.PaymentStatus paymentStatus39 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType40 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment41 = new models.payment.Payment(uUID35, booking36, 100.0d, paymentMethod38, paymentStatus39, paymentType40);
        models.payment.Payment.PaymentStatus paymentStatus42 = payment41.getStatus();
        java.util.UUID uUID43 = null;
        models.booking.Booking booking44 = null;
        models.payment.PaymentMethod paymentMethod46 = null;
        models.payment.Payment.PaymentStatus paymentStatus47 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType48 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment49 = new models.payment.Payment(uUID43, booking44, 100.0d, paymentMethod46, paymentStatus47, paymentType48);
        models.payment.Payment.PaymentType paymentType50 = payment49.getPaymentType();
        java.util.UUID uUID51 = payment49.getBookingID();
        models.payment.Payment.PaymentType paymentType52 = models.payment.Payment.PaymentType.FINAL;
        payment49.setPaymentType(paymentType52);
        models.payment.PaymentMethod paymentMethod54 = payment49.getMethod();
        models.payment.Payment.PaymentType paymentType55 = payment49.getPaymentType();
        models.payment.Payment payment56 = new models.payment.Payment(uUID30, booking31, (double) 1L, paymentMethod34, paymentStatus42, paymentType55);
        java.util.UUID uUID57 = null;
        models.booking.Booking booking58 = null;
        models.payment.PaymentMethod paymentMethod60 = null;
        models.payment.Payment.PaymentStatus paymentStatus61 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType62 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment63 = new models.payment.Payment(uUID57, booking58, (-1.0d), paymentMethod60, paymentStatus61, paymentType62);
        models.payment.Payment payment64 = new models.payment.Payment(uUID0, booking1, (double) (byte) 0, paymentMethod18, paymentStatus42, paymentType62);
        java.lang.Class<?> wildcardClass65 = payment64.getClass();
        org.junit.Assert.assertTrue("'" + paymentStatus9 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus9.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType10 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType10.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType12 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType12.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID13);
        org.junit.Assert.assertTrue("'" + paymentType14 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType14.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod18);
        org.junit.Assert.assertTrue("'" + paymentStatus24 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus24.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType25 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType25.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType27 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType27.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType28 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType28.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod34);
        org.junit.Assert.assertTrue("'" + paymentStatus39 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus39.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType40 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType40.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentStatus42 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus42.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentStatus47 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus47.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType48 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType48.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType50 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType50.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID51);
        org.junit.Assert.assertTrue("'" + paymentType52 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType52.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(paymentMethod54);
        org.junit.Assert.assertTrue("'" + paymentType55 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType55.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentStatus61 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus61.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType62 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType62.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass65);
    }

    @Test
    public void test049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test049");
        models.booking.Booking booking1 = null;
        models.booking.Booking booking3 = null;
        java.util.UUID uUID4 = null;
        models.booking.Booking booking5 = null;
        models.payment.PaymentMethod paymentMethod7 = null;
        models.payment.Payment.PaymentStatus paymentStatus8 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType9 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment10 = new models.payment.Payment(uUID4, booking5, 100.0d, paymentMethod7, paymentStatus8, paymentType9);
        models.payment.Payment.PaymentType paymentType11 = payment10.getPaymentType();
        java.util.UUID uUID12 = payment10.getBookingID();
        models.payment.Payment.PaymentType paymentType13 = models.payment.Payment.PaymentType.FINAL;
        payment10.setPaymentType(paymentType13);
        java.util.UUID uUID15 = payment10.getPaymentID();
        models.payment.PaymentMethod paymentMethod17 = models.payment.Payment.generateMethod("");
        payment10.setPaymentMethod(paymentMethod17);
        java.util.UUID uUID19 = null;
        models.booking.Booking booking20 = null;
        models.payment.PaymentMethod paymentMethod22 = null;
        models.payment.Payment.PaymentStatus paymentStatus23 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType24 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment25 = new models.payment.Payment(uUID19, booking20, 100.0d, paymentMethod22, paymentStatus23, paymentType24);
        models.payment.Payment.PaymentType paymentType26 = payment25.getPaymentType();
        models.payment.Payment.PaymentType paymentType27 = payment25.getPaymentType();
        models.payment.Payment payment28 = new models.payment.Payment((double) 10, booking3, paymentMethod17, paymentType27);
        java.util.UUID uUID29 = null;
        models.booking.Booking booking30 = null;
        models.payment.PaymentMethod paymentMethod32 = null;
        models.payment.Payment.PaymentStatus paymentStatus33 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType34 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment35 = new models.payment.Payment(uUID29, booking30, 100.0d, paymentMethod32, paymentStatus33, paymentType34);
        models.payment.Payment payment36 = new models.payment.Payment((double) '4', booking1, paymentMethod17, paymentType34);
        models.booking.Booking booking37 = payment36.getBooking();
        boolean boolean38 = payment36.processPayment();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean39 = payment36.processPayment();
            org.junit.Assert.fail("Expected exception of type models.ParkingSystemException; message: Cannot process payment of a payment that is not pending.");
        } catch (models.ParkingSystemException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + paymentStatus8 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus8.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType9 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType9.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType11 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType11.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID12);
        org.junit.Assert.assertTrue("'" + paymentType13 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType13.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod17);
        org.junit.Assert.assertTrue("'" + paymentStatus23 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus23.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType24 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType24.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType26 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType26.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType27 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType27.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentStatus33 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus33.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType34 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType34.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(booking37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
    }

    @Test
    public void test050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test050");
        models.payment.Payment.PaymentType paymentType0 = models.payment.Payment.PaymentType.REFUND;
        java.lang.Class<?> wildcardClass1 = paymentType0.getClass();
        org.junit.Assert.assertTrue("'" + paymentType0 + "' != '" + models.payment.Payment.PaymentType.REFUND + "'", paymentType0.equals(models.payment.Payment.PaymentType.REFUND));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass1);
    }

    @Test
    public void test051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test051");
        java.util.UUID uUID0 = null;
        models.booking.Booking booking1 = null;
        models.payment.PaymentMethod paymentMethod3 = null;
        models.payment.Payment.PaymentStatus paymentStatus4 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType5 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment6 = new models.payment.Payment(uUID0, booking1, 100.0d, paymentMethod3, paymentStatus4, paymentType5);
        models.payment.Payment.PaymentType paymentType7 = payment6.getPaymentType();
        java.util.UUID uUID8 = payment6.getBookingID();
        models.payment.Payment.PaymentType paymentType9 = models.payment.Payment.PaymentType.FINAL;
        payment6.setPaymentType(paymentType9);
        java.util.UUID uUID11 = payment6.getPaymentID();
        models.payment.PaymentMethod paymentMethod13 = models.payment.Payment.generateMethod("");
        payment6.setPaymentMethod(paymentMethod13);
        models.payment.Payment.PaymentStatus paymentStatus15 = payment6.getStatus();
        java.util.UUID uUID16 = null;
        models.booking.Booking booking17 = null;
        models.payment.PaymentMethod paymentMethod19 = null;
        models.payment.Payment.PaymentStatus paymentStatus20 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType21 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment22 = new models.payment.Payment(uUID16, booking17, 100.0d, paymentMethod19, paymentStatus20, paymentType21);
        java.util.UUID uUID23 = payment22.getPaymentID();
        models.payment.Payment.PaymentType paymentType24 = payment22.getPaymentType();
        payment6.setPaymentType(paymentType24);
        models.booking.Booking booking26 = payment6.getBooking();
        models.payment.Payment.PaymentStatus paymentStatus27 = payment6.getStatus();
        org.junit.Assert.assertTrue("'" + paymentStatus4 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus4.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType5 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType5.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType7 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType7.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID8);
        org.junit.Assert.assertTrue("'" + paymentType9 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType9.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod13);
        org.junit.Assert.assertTrue("'" + paymentStatus15 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus15.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentStatus20 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus20.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType21 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType21.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID23);
        org.junit.Assert.assertTrue("'" + paymentType24 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType24.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(booking26);
        org.junit.Assert.assertTrue("'" + paymentStatus27 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus27.equals(models.payment.Payment.PaymentStatus.FAILED));
    }

    @Test
    public void test052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test052");
        java.util.UUID uUID0 = null;
        models.booking.Booking booking1 = null;
        models.payment.PaymentMethod paymentMethod3 = null;
        models.payment.Payment.PaymentStatus paymentStatus4 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType5 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment6 = new models.payment.Payment(uUID0, booking1, 100.0d, paymentMethod3, paymentStatus4, paymentType5);
        models.payment.Payment.PaymentType paymentType7 = payment6.getPaymentType();
        java.util.UUID uUID8 = payment6.getBookingID();
        models.payment.Payment.PaymentType paymentType9 = models.payment.Payment.PaymentType.FINAL;
        payment6.setPaymentType(paymentType9);
        models.payment.PaymentMethod paymentMethod11 = payment6.getMethod();
        java.util.UUID uUID12 = payment6.getBookingID();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean13 = payment6.processPayment();
            org.junit.Assert.fail("Expected exception of type models.ParkingSystemException; message: Cannot process payment of a payment that is not pending.");
        } catch (models.ParkingSystemException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + paymentStatus4 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus4.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType5 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType5.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType7 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType7.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID8);
        org.junit.Assert.assertTrue("'" + paymentType9 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType9.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(paymentMethod11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID12);
    }

    @Test
    public void test053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test053");
        java.util.UUID uUID0 = null;
        models.booking.Booking booking1 = null;
        models.payment.PaymentMethod paymentMethod3 = null;
        models.payment.Payment.PaymentStatus paymentStatus4 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType5 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment6 = new models.payment.Payment(uUID0, booking1, 100.0d, paymentMethod3, paymentStatus4, paymentType5);
        double double7 = payment6.getAmount();
        java.lang.Class<?> wildcardClass8 = payment6.getClass();
        org.junit.Assert.assertTrue("'" + paymentStatus4 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus4.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType5 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType5.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 100.0d + "'", double7 == 100.0d);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test054");
        java.util.UUID uUID0 = null;
        models.booking.Booking booking1 = null;
        models.payment.PaymentMethod paymentMethod3 = null;
        models.payment.Payment.PaymentStatus paymentStatus4 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType5 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment6 = new models.payment.Payment(uUID0, booking1, 100.0d, paymentMethod3, paymentStatus4, paymentType5);
        models.payment.Payment.PaymentType paymentType7 = payment6.getPaymentType();
        java.util.UUID uUID8 = payment6.getBookingID();
        models.payment.Payment.PaymentType paymentType9 = models.payment.Payment.PaymentType.FINAL;
        payment6.setPaymentType(paymentType9);
        models.payment.PaymentMethod paymentMethod11 = payment6.getMethod();
        java.util.UUID uUID12 = payment6.getBookingID();
        models.booking.Booking booking13 = payment6.getBooking();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean14 = payment6.processPayment();
            org.junit.Assert.fail("Expected exception of type models.ParkingSystemException; message: Cannot process payment of a payment that is not pending.");
        } catch (models.ParkingSystemException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + paymentStatus4 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus4.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType5 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType5.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType7 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType7.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID8);
        org.junit.Assert.assertTrue("'" + paymentType9 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType9.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(paymentMethod11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(booking13);
    }

    @Test
    public void test055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test055");
        models.payment.Payment.PaymentStatus paymentStatus0 = models.payment.Payment.PaymentStatus.PAID;
        java.lang.Class<?> wildcardClass1 = paymentStatus0.getClass();
        org.junit.Assert.assertTrue("'" + paymentStatus0 + "' != '" + models.payment.Payment.PaymentStatus.PAID + "'", paymentStatus0.equals(models.payment.Payment.PaymentStatus.PAID));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass1);
    }

    @Test
    public void test056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test056");
        java.util.UUID uUID0 = null;
        models.booking.Booking booking1 = null;
        models.payment.PaymentMethod paymentMethod3 = null;
        models.payment.Payment.PaymentStatus paymentStatus4 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType5 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment6 = new models.payment.Payment(uUID0, booking1, 100.0d, paymentMethod3, paymentStatus4, paymentType5);
        models.payment.Payment.PaymentType paymentType7 = payment6.getPaymentType();
        java.util.UUID uUID8 = payment6.getBookingID();
        models.payment.Payment.PaymentType paymentType9 = models.payment.Payment.PaymentType.FINAL;
        payment6.setPaymentType(paymentType9);
        java.util.UUID uUID11 = payment6.getPaymentID();
        models.payment.PaymentMethod paymentMethod13 = models.payment.Payment.generateMethod("");
        payment6.setPaymentMethod(paymentMethod13);
        models.payment.Payment.PaymentStatus paymentStatus15 = payment6.getStatus();
        java.lang.Class<?> wildcardClass16 = payment6.getClass();
        org.junit.Assert.assertTrue("'" + paymentStatus4 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus4.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType5 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType5.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType7 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType7.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID8);
        org.junit.Assert.assertTrue("'" + paymentType9 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType9.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod13);
        org.junit.Assert.assertTrue("'" + paymentStatus15 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus15.equals(models.payment.Payment.PaymentStatus.FAILED));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test057");
        java.util.UUID uUID0 = null;
        models.booking.Booking booking1 = null;
        java.util.UUID uUID3 = null;
        models.booking.Booking booking4 = null;
        models.payment.PaymentMethod paymentMethod6 = null;
        models.payment.Payment.PaymentStatus paymentStatus7 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType8 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment9 = new models.payment.Payment(uUID3, booking4, 100.0d, paymentMethod6, paymentStatus7, paymentType8);
        java.util.UUID uUID10 = null;
        models.booking.Booking booking11 = null;
        java.util.UUID uUID13 = null;
        models.booking.Booking booking14 = null;
        models.payment.PaymentMethod paymentMethod16 = null;
        models.payment.Payment.PaymentStatus paymentStatus17 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType18 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment19 = new models.payment.Payment(uUID13, booking14, 100.0d, paymentMethod16, paymentStatus17, paymentType18);
        models.payment.Payment.PaymentType paymentType20 = payment19.getPaymentType();
        java.util.UUID uUID21 = payment19.getBookingID();
        models.payment.Payment.PaymentType paymentType22 = models.payment.Payment.PaymentType.FINAL;
        payment19.setPaymentType(paymentType22);
        java.util.UUID uUID24 = payment19.getPaymentID();
        models.payment.PaymentMethod paymentMethod26 = models.payment.Payment.generateMethod("");
        payment19.setPaymentMethod(paymentMethod26);
        models.payment.Payment.PaymentStatus paymentStatus28 = models.payment.Payment.PaymentStatus.PENDING;
        models.payment.Payment.PaymentType paymentType29 = null;
        models.payment.Payment payment30 = new models.payment.Payment(uUID10, booking11, (double) (byte) 0, paymentMethod26, paymentStatus28, paymentType29);
        payment9.setPaymentMethod(paymentMethod26);
        java.util.UUID uUID32 = null;
        models.booking.Booking booking33 = null;
        java.util.UUID uUID35 = null;
        models.booking.Booking booking36 = null;
        models.payment.PaymentMethod paymentMethod38 = null;
        models.payment.Payment.PaymentStatus paymentStatus39 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType40 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment41 = new models.payment.Payment(uUID35, booking36, 100.0d, paymentMethod38, paymentStatus39, paymentType40);
        models.payment.Payment.PaymentType paymentType42 = payment41.getPaymentType();
        java.util.UUID uUID43 = payment41.getBookingID();
        models.payment.Payment.PaymentType paymentType44 = models.payment.Payment.PaymentType.FINAL;
        payment41.setPaymentType(paymentType44);
        java.util.UUID uUID46 = payment41.getPaymentID();
        models.payment.PaymentMethod paymentMethod48 = models.payment.Payment.generateMethod("");
        payment41.setPaymentMethod(paymentMethod48);
        models.payment.Payment.PaymentStatus paymentStatus50 = models.payment.Payment.PaymentStatus.PENDING;
        models.payment.Payment.PaymentType paymentType51 = null;
        models.payment.Payment payment52 = new models.payment.Payment(uUID32, booking33, (double) (byte) 0, paymentMethod48, paymentStatus50, paymentType51);
        models.payment.Payment.PaymentStatus paymentStatus53 = payment52.getStatus();
        java.util.UUID uUID54 = null;
        models.booking.Booking booking55 = null;
        models.payment.PaymentMethod paymentMethod57 = null;
        models.payment.Payment.PaymentStatus paymentStatus58 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType59 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment60 = new models.payment.Payment(uUID54, booking55, 100.0d, paymentMethod57, paymentStatus58, paymentType59);
        models.payment.Payment.PaymentType paymentType61 = payment60.getPaymentType();
        java.util.UUID uUID62 = payment60.getBookingID();
        models.payment.Payment.PaymentType paymentType63 = models.payment.Payment.PaymentType.FINAL;
        payment60.setPaymentType(paymentType63);
        models.payment.Payment payment65 = new models.payment.Payment(uUID0, booking1, (double) 'a', paymentMethod26, paymentStatus53, paymentType63);
        double double66 = payment65.getAmount();
        models.payment.Payment.PaymentType paymentType67 = models.payment.Payment.PaymentType.FINAL;
        payment65.setPaymentType(paymentType67);
        org.junit.Assert.assertTrue("'" + paymentStatus7 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus7.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType8 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType8.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentStatus17 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus17.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType18 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType18.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType20 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType20.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID21);
        org.junit.Assert.assertTrue("'" + paymentType22 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType22.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod26);
        org.junit.Assert.assertTrue("'" + paymentStatus28 + "' != '" + models.payment.Payment.PaymentStatus.PENDING + "'", paymentStatus28.equals(models.payment.Payment.PaymentStatus.PENDING));
        org.junit.Assert.assertTrue("'" + paymentStatus39 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus39.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType40 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType40.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType42 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType42.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID43);
        org.junit.Assert.assertTrue("'" + paymentType44 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType44.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod48);
        org.junit.Assert.assertTrue("'" + paymentStatus50 + "' != '" + models.payment.Payment.PaymentStatus.PENDING + "'", paymentStatus50.equals(models.payment.Payment.PaymentStatus.PENDING));
        org.junit.Assert.assertTrue("'" + paymentStatus53 + "' != '" + models.payment.Payment.PaymentStatus.PENDING + "'", paymentStatus53.equals(models.payment.Payment.PaymentStatus.PENDING));
        org.junit.Assert.assertTrue("'" + paymentStatus58 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus58.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType59 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType59.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType61 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType61.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID62);
        org.junit.Assert.assertTrue("'" + paymentType63 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType63.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 97.0d + "'", double66 == 97.0d);
        org.junit.Assert.assertTrue("'" + paymentType67 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType67.equals(models.payment.Payment.PaymentType.FINAL));
    }

    @Test
    public void test058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test058");
        java.util.UUID uUID0 = null;
        models.booking.Booking booking1 = null;
        models.payment.PaymentMethod paymentMethod4 = models.payment.Payment.generateMethod("");
        java.util.UUID uUID5 = null;
        models.booking.Booking booking6 = null;
        models.payment.PaymentMethod paymentMethod8 = null;
        models.payment.Payment.PaymentStatus paymentStatus9 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType10 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment11 = new models.payment.Payment(uUID5, booking6, 100.0d, paymentMethod8, paymentStatus9, paymentType10);
        models.payment.Payment.PaymentStatus paymentStatus12 = payment11.getStatus();
        java.util.UUID uUID13 = null;
        models.booking.Booking booking14 = null;
        models.payment.PaymentMethod paymentMethod16 = null;
        models.payment.Payment.PaymentStatus paymentStatus17 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType18 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment19 = new models.payment.Payment(uUID13, booking14, 100.0d, paymentMethod16, paymentStatus17, paymentType18);
        models.payment.Payment.PaymentType paymentType20 = payment19.getPaymentType();
        java.util.UUID uUID21 = payment19.getBookingID();
        models.payment.Payment.PaymentType paymentType22 = models.payment.Payment.PaymentType.FINAL;
        payment19.setPaymentType(paymentType22);
        models.payment.PaymentMethod paymentMethod24 = payment19.getMethod();
        models.payment.Payment.PaymentType paymentType25 = payment19.getPaymentType();
        models.payment.Payment payment26 = new models.payment.Payment(uUID0, booking1, (double) 1L, paymentMethod4, paymentStatus12, paymentType25);
        java.lang.Class<?> wildcardClass27 = paymentType25.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod4);
        org.junit.Assert.assertTrue("'" + paymentStatus9 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus9.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType10 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType10.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentStatus12 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus12.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentStatus17 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus17.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType18 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType18.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType20 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType20.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID21);
        org.junit.Assert.assertTrue("'" + paymentType22 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType22.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(paymentMethod24);
        org.junit.Assert.assertTrue("'" + paymentType25 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType25.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass27);
    }

    @Test
    public void test059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test059");
        java.util.UUID uUID0 = null;
        models.booking.Booking booking1 = null;
        models.payment.PaymentMethod paymentMethod3 = null;
        models.payment.Payment.PaymentStatus paymentStatus4 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType5 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment6 = new models.payment.Payment(uUID0, booking1, 100.0d, paymentMethod3, paymentStatus4, paymentType5);
        models.payment.Payment.PaymentType paymentType7 = payment6.getPaymentType();
        java.util.UUID uUID8 = payment6.getBookingID();
        models.payment.Payment.PaymentType paymentType9 = models.payment.Payment.PaymentType.FINAL;
        payment6.setPaymentType(paymentType9);
        models.payment.PaymentMethod paymentMethod11 = payment6.getMethod();
        models.payment.Payment.PaymentType paymentType12 = payment6.getPaymentType();
        models.payment.Payment.PaymentStatus paymentStatus13 = payment6.getStatus();
        java.util.UUID uUID14 = payment6.getBookingID();
        java.util.UUID uUID15 = payment6.getBookingID();
        org.junit.Assert.assertTrue("'" + paymentStatus4 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus4.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType5 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType5.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType7 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType7.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID8);
        org.junit.Assert.assertTrue("'" + paymentType9 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType9.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(paymentMethod11);
        org.junit.Assert.assertTrue("'" + paymentType12 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType12.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentStatus13 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus13.equals(models.payment.Payment.PaymentStatus.FAILED));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID15);
    }

    @Test
    public void test060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test060");
        java.util.UUID uUID0 = null;
        models.booking.Booking booking1 = null;
        models.payment.PaymentMethod paymentMethod3 = null;
        models.payment.Payment.PaymentStatus paymentStatus4 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType5 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment6 = new models.payment.Payment(uUID0, booking1, 100.0d, paymentMethod3, paymentStatus4, paymentType5);
        models.payment.Payment.PaymentType paymentType7 = models.payment.Payment.PaymentType.DEPOSIT;
        payment6.setPaymentType(paymentType7);
        java.util.UUID uUID9 = payment6.getBookingID();
        models.payment.Payment.PaymentType paymentType10 = payment6.getPaymentType();
        java.util.UUID uUID11 = payment6.getPaymentID();
        models.booking.Booking booking12 = payment6.getBooking();
        org.junit.Assert.assertTrue("'" + paymentStatus4 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus4.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType5 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType5.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType7 + "' != '" + models.payment.Payment.PaymentType.DEPOSIT + "'", paymentType7.equals(models.payment.Payment.PaymentType.DEPOSIT));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID9);
        org.junit.Assert.assertTrue("'" + paymentType10 + "' != '" + models.payment.Payment.PaymentType.DEPOSIT + "'", paymentType10.equals(models.payment.Payment.PaymentType.DEPOSIT));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(booking12);
    }

    @Test
    public void test061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test061");
        models.booking.Booking booking1 = null;
        models.booking.Booking booking3 = null;
        java.util.UUID uUID4 = null;
        models.booking.Booking booking5 = null;
        models.payment.PaymentMethod paymentMethod7 = null;
        models.payment.Payment.PaymentStatus paymentStatus8 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType9 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment10 = new models.payment.Payment(uUID4, booking5, 100.0d, paymentMethod7, paymentStatus8, paymentType9);
        models.payment.Payment.PaymentType paymentType11 = payment10.getPaymentType();
        java.util.UUID uUID12 = payment10.getBookingID();
        models.payment.Payment.PaymentType paymentType13 = models.payment.Payment.PaymentType.FINAL;
        payment10.setPaymentType(paymentType13);
        java.util.UUID uUID15 = payment10.getPaymentID();
        models.payment.PaymentMethod paymentMethod17 = models.payment.Payment.generateMethod("");
        payment10.setPaymentMethod(paymentMethod17);
        java.util.UUID uUID19 = null;
        models.booking.Booking booking20 = null;
        models.payment.PaymentMethod paymentMethod22 = null;
        models.payment.Payment.PaymentStatus paymentStatus23 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType24 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment25 = new models.payment.Payment(uUID19, booking20, 100.0d, paymentMethod22, paymentStatus23, paymentType24);
        models.payment.Payment.PaymentType paymentType26 = payment25.getPaymentType();
        models.payment.Payment.PaymentType paymentType27 = payment25.getPaymentType();
        models.payment.Payment payment28 = new models.payment.Payment((double) 10, booking3, paymentMethod17, paymentType27);
        java.util.UUID uUID29 = null;
        models.booking.Booking booking30 = null;
        models.payment.PaymentMethod paymentMethod32 = null;
        models.payment.Payment.PaymentStatus paymentStatus33 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType34 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment35 = new models.payment.Payment(uUID29, booking30, 100.0d, paymentMethod32, paymentStatus33, paymentType34);
        models.payment.Payment.PaymentType paymentType36 = payment35.getPaymentType();
        java.util.UUID uUID37 = payment35.getBookingID();
        models.payment.Payment.PaymentType paymentType38 = models.payment.Payment.PaymentType.FINAL;
        payment35.setPaymentType(paymentType38);
        models.payment.PaymentMethod paymentMethod40 = payment35.getMethod();
        models.payment.Payment.PaymentType paymentType41 = payment35.getPaymentType();
        models.payment.Payment payment42 = new models.payment.Payment((double) (short) -1, booking1, paymentMethod17, paymentType41);
        models.payment.PaymentMethod paymentMethod43 = payment42.getMethod();
        java.lang.Class<?> wildcardClass44 = paymentMethod43.getClass();
        org.junit.Assert.assertTrue("'" + paymentStatus8 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus8.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType9 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType9.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType11 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType11.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID12);
        org.junit.Assert.assertTrue("'" + paymentType13 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType13.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod17);
        org.junit.Assert.assertTrue("'" + paymentStatus23 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus23.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType24 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType24.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType26 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType26.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType27 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType27.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentStatus33 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus33.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType34 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType34.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType36 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType36.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID37);
        org.junit.Assert.assertTrue("'" + paymentType38 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType38.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(paymentMethod40);
        org.junit.Assert.assertTrue("'" + paymentType41 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType41.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass44);
    }

    @Test
    public void test062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test062");
        java.util.UUID uUID0 = null;
        models.booking.Booking booking1 = null;
        java.util.UUID uUID3 = null;
        models.booking.Booking booking4 = null;
        models.payment.PaymentMethod paymentMethod6 = null;
        models.payment.Payment.PaymentStatus paymentStatus7 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType8 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment9 = new models.payment.Payment(uUID3, booking4, 100.0d, paymentMethod6, paymentStatus7, paymentType8);
        models.payment.Payment.PaymentType paymentType10 = payment9.getPaymentType();
        java.util.UUID uUID11 = payment9.getBookingID();
        models.payment.Payment.PaymentType paymentType12 = models.payment.Payment.PaymentType.FINAL;
        payment9.setPaymentType(paymentType12);
        java.util.UUID uUID14 = payment9.getPaymentID();
        models.payment.PaymentMethod paymentMethod16 = models.payment.Payment.generateMethod("");
        payment9.setPaymentMethod(paymentMethod16);
        java.util.UUID uUID18 = null;
        models.booking.Booking booking19 = null;
        models.payment.PaymentMethod paymentMethod21 = null;
        models.payment.Payment.PaymentStatus paymentStatus22 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType23 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment24 = new models.payment.Payment(uUID18, booking19, 100.0d, paymentMethod21, paymentStatus22, paymentType23);
        models.payment.Payment.PaymentType paymentType25 = payment24.getPaymentType();
        java.util.UUID uUID26 = payment24.getBookingID();
        models.payment.Payment.PaymentType paymentType27 = models.payment.Payment.PaymentType.FINAL;
        payment24.setPaymentType(paymentType27);
        models.payment.PaymentMethod paymentMethod29 = payment24.getMethod();
        models.payment.Payment.PaymentType paymentType30 = payment24.getPaymentType();
        models.payment.Payment.PaymentStatus paymentStatus31 = payment24.getStatus();
        models.payment.Payment.PaymentType paymentType32 = models.payment.Payment.PaymentType.REFUND;
        models.payment.Payment payment33 = new models.payment.Payment(uUID0, booking1, (double) '#', paymentMethod16, paymentStatus31, paymentType32);
        java.util.UUID uUID34 = payment33.getBookingID();
        double double35 = payment33.getAmount();
        models.payment.Payment.PaymentStatus paymentStatus36 = payment33.getStatus();
        org.junit.Assert.assertTrue("'" + paymentStatus7 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus7.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType8 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType8.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType10 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType10.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID11);
        org.junit.Assert.assertTrue("'" + paymentType12 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType12.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod16);
        org.junit.Assert.assertTrue("'" + paymentStatus22 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus22.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType23 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType23.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType25 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType25.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID26);
        org.junit.Assert.assertTrue("'" + paymentType27 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType27.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(paymentMethod29);
        org.junit.Assert.assertTrue("'" + paymentType30 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType30.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentStatus31 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus31.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType32 + "' != '" + models.payment.Payment.PaymentType.REFUND + "'", paymentType32.equals(models.payment.Payment.PaymentType.REFUND));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 35.0d + "'", double35 == 35.0d);
        org.junit.Assert.assertTrue("'" + paymentStatus36 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus36.equals(models.payment.Payment.PaymentStatus.FAILED));
    }

    @Test
    public void test063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test063");
        java.util.UUID uUID0 = null;
        models.booking.Booking booking1 = null;
        java.util.UUID uUID3 = null;
        models.booking.Booking booking4 = null;
        java.util.UUID uUID6 = null;
        models.booking.Booking booking7 = null;
        models.payment.PaymentMethod paymentMethod9 = null;
        models.payment.Payment.PaymentStatus paymentStatus10 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType11 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment12 = new models.payment.Payment(uUID6, booking7, 100.0d, paymentMethod9, paymentStatus10, paymentType11);
        models.payment.Payment.PaymentType paymentType13 = payment12.getPaymentType();
        java.util.UUID uUID14 = payment12.getBookingID();
        models.payment.Payment.PaymentType paymentType15 = models.payment.Payment.PaymentType.FINAL;
        payment12.setPaymentType(paymentType15);
        java.util.UUID uUID17 = payment12.getPaymentID();
        models.payment.PaymentMethod paymentMethod19 = models.payment.Payment.generateMethod("");
        payment12.setPaymentMethod(paymentMethod19);
        models.payment.Payment.PaymentStatus paymentStatus21 = models.payment.Payment.PaymentStatus.PENDING;
        models.payment.Payment.PaymentType paymentType22 = null;
        models.payment.Payment payment23 = new models.payment.Payment(uUID3, booking4, (double) (byte) 0, paymentMethod19, paymentStatus21, paymentType22);
        models.payment.Payment.PaymentStatus paymentStatus24 = models.payment.Payment.PaymentStatus.PENDING;
        models.payment.Payment.PaymentType paymentType25 = models.payment.Payment.PaymentType.DEPOSIT;
        models.payment.Payment payment26 = new models.payment.Payment(uUID0, booking1, (double) (byte) 100, paymentMethod19, paymentStatus24, paymentType25);
        models.booking.Booking booking27 = payment26.getBooking();
        double double28 = payment26.getAmount();
        double double29 = payment26.getAmount();
        java.util.UUID uUID30 = null;
        models.booking.Booking booking31 = null;
        models.payment.PaymentMethod paymentMethod33 = null;
        models.payment.Payment.PaymentStatus paymentStatus34 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType35 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment36 = new models.payment.Payment(uUID30, booking31, 100.0d, paymentMethod33, paymentStatus34, paymentType35);
        java.util.UUID uUID37 = null;
        models.booking.Booking booking38 = null;
        java.util.UUID uUID40 = null;
        models.booking.Booking booking41 = null;
        models.payment.PaymentMethod paymentMethod43 = null;
        models.payment.Payment.PaymentStatus paymentStatus44 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType45 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment46 = new models.payment.Payment(uUID40, booking41, 100.0d, paymentMethod43, paymentStatus44, paymentType45);
        models.payment.Payment.PaymentType paymentType47 = payment46.getPaymentType();
        java.util.UUID uUID48 = payment46.getBookingID();
        models.payment.Payment.PaymentType paymentType49 = models.payment.Payment.PaymentType.FINAL;
        payment46.setPaymentType(paymentType49);
        java.util.UUID uUID51 = payment46.getPaymentID();
        models.payment.PaymentMethod paymentMethod53 = models.payment.Payment.generateMethod("");
        payment46.setPaymentMethod(paymentMethod53);
        models.payment.Payment.PaymentStatus paymentStatus55 = models.payment.Payment.PaymentStatus.PENDING;
        models.payment.Payment.PaymentType paymentType56 = null;
        models.payment.Payment payment57 = new models.payment.Payment(uUID37, booking38, (double) (byte) 0, paymentMethod53, paymentStatus55, paymentType56);
        payment36.setPaymentMethod(paymentMethod53);
        payment26.setPaymentMethod(paymentMethod53);
        org.junit.Assert.assertTrue("'" + paymentStatus10 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus10.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType11 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType11.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType13 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType13.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID14);
        org.junit.Assert.assertTrue("'" + paymentType15 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType15.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod19);
        org.junit.Assert.assertTrue("'" + paymentStatus21 + "' != '" + models.payment.Payment.PaymentStatus.PENDING + "'", paymentStatus21.equals(models.payment.Payment.PaymentStatus.PENDING));
        org.junit.Assert.assertTrue("'" + paymentStatus24 + "' != '" + models.payment.Payment.PaymentStatus.PENDING + "'", paymentStatus24.equals(models.payment.Payment.PaymentStatus.PENDING));
        org.junit.Assert.assertTrue("'" + paymentType25 + "' != '" + models.payment.Payment.PaymentType.DEPOSIT + "'", paymentType25.equals(models.payment.Payment.PaymentType.DEPOSIT));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(booking27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 100.0d + "'", double28 == 100.0d);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 100.0d + "'", double29 == 100.0d);
        org.junit.Assert.assertTrue("'" + paymentStatus34 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus34.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType35 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType35.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentStatus44 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus44.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType45 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType45.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType47 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType47.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID48);
        org.junit.Assert.assertTrue("'" + paymentType49 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType49.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod53);
        org.junit.Assert.assertTrue("'" + paymentStatus55 + "' != '" + models.payment.Payment.PaymentStatus.PENDING + "'", paymentStatus55.equals(models.payment.Payment.PaymentStatus.PENDING));
    }

    @Test
    public void test064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test064");
        models.booking.Booking booking1 = null;
        models.payment.PaymentMethod paymentMethod3 = models.payment.Payment.generateMethod("hi!");
        java.util.UUID uUID4 = null;
        models.booking.Booking booking5 = null;
        models.payment.PaymentMethod paymentMethod7 = null;
        models.payment.Payment.PaymentStatus paymentStatus8 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType9 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment10 = new models.payment.Payment(uUID4, booking5, 100.0d, paymentMethod7, paymentStatus8, paymentType9);
        models.payment.Payment.PaymentType paymentType11 = payment10.getPaymentType();
        models.payment.Payment payment12 = new models.payment.Payment(0.0d, booking1, paymentMethod3, paymentType11);
        double double13 = payment12.getAmount();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod3);
        org.junit.Assert.assertTrue("'" + paymentStatus8 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus8.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType9 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType9.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType11 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType11.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
    }

    @Test
    public void test065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test065");
        models.booking.Booking booking1 = null;
        models.booking.Booking booking3 = null;
        models.payment.PaymentMethod paymentMethod5 = models.payment.Payment.generateMethod("hi!");
        java.util.UUID uUID6 = null;
        models.booking.Booking booking7 = null;
        models.payment.PaymentMethod paymentMethod9 = null;
        models.payment.Payment.PaymentStatus paymentStatus10 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType11 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment12 = new models.payment.Payment(uUID6, booking7, 100.0d, paymentMethod9, paymentStatus10, paymentType11);
        models.payment.Payment.PaymentType paymentType13 = payment12.getPaymentType();
        models.payment.Payment payment14 = new models.payment.Payment(0.0d, booking3, paymentMethod5, paymentType13);
        java.util.UUID uUID15 = null;
        models.booking.Booking booking16 = null;
        java.util.UUID uUID18 = null;
        models.booking.Booking booking19 = null;
        models.payment.PaymentMethod paymentMethod21 = null;
        models.payment.Payment.PaymentStatus paymentStatus22 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType23 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment24 = new models.payment.Payment(uUID18, booking19, 100.0d, paymentMethod21, paymentStatus22, paymentType23);
        java.util.UUID uUID25 = null;
        models.booking.Booking booking26 = null;
        java.util.UUID uUID28 = null;
        models.booking.Booking booking29 = null;
        models.payment.PaymentMethod paymentMethod31 = null;
        models.payment.Payment.PaymentStatus paymentStatus32 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType33 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment34 = new models.payment.Payment(uUID28, booking29, 100.0d, paymentMethod31, paymentStatus32, paymentType33);
        models.payment.Payment.PaymentType paymentType35 = payment34.getPaymentType();
        java.util.UUID uUID36 = payment34.getBookingID();
        models.payment.Payment.PaymentType paymentType37 = models.payment.Payment.PaymentType.FINAL;
        payment34.setPaymentType(paymentType37);
        java.util.UUID uUID39 = payment34.getPaymentID();
        models.payment.PaymentMethod paymentMethod41 = models.payment.Payment.generateMethod("");
        payment34.setPaymentMethod(paymentMethod41);
        models.payment.Payment.PaymentStatus paymentStatus43 = models.payment.Payment.PaymentStatus.PENDING;
        models.payment.Payment.PaymentType paymentType44 = null;
        models.payment.Payment payment45 = new models.payment.Payment(uUID25, booking26, (double) (byte) 0, paymentMethod41, paymentStatus43, paymentType44);
        payment24.setPaymentMethod(paymentMethod41);
        java.util.UUID uUID47 = null;
        models.booking.Booking booking48 = null;
        java.util.UUID uUID50 = null;
        models.booking.Booking booking51 = null;
        models.payment.PaymentMethod paymentMethod53 = null;
        models.payment.Payment.PaymentStatus paymentStatus54 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType55 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment56 = new models.payment.Payment(uUID50, booking51, 100.0d, paymentMethod53, paymentStatus54, paymentType55);
        models.payment.Payment.PaymentType paymentType57 = payment56.getPaymentType();
        java.util.UUID uUID58 = payment56.getBookingID();
        models.payment.Payment.PaymentType paymentType59 = models.payment.Payment.PaymentType.FINAL;
        payment56.setPaymentType(paymentType59);
        java.util.UUID uUID61 = payment56.getPaymentID();
        models.payment.PaymentMethod paymentMethod63 = models.payment.Payment.generateMethod("");
        payment56.setPaymentMethod(paymentMethod63);
        models.payment.Payment.PaymentStatus paymentStatus65 = models.payment.Payment.PaymentStatus.PENDING;
        models.payment.Payment.PaymentType paymentType66 = null;
        models.payment.Payment payment67 = new models.payment.Payment(uUID47, booking48, (double) (byte) 0, paymentMethod63, paymentStatus65, paymentType66);
        models.payment.Payment.PaymentStatus paymentStatus68 = payment67.getStatus();
        java.util.UUID uUID69 = null;
        models.booking.Booking booking70 = null;
        models.payment.PaymentMethod paymentMethod72 = null;
        models.payment.Payment.PaymentStatus paymentStatus73 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType74 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment75 = new models.payment.Payment(uUID69, booking70, 100.0d, paymentMethod72, paymentStatus73, paymentType74);
        models.payment.Payment.PaymentType paymentType76 = payment75.getPaymentType();
        java.util.UUID uUID77 = payment75.getBookingID();
        models.payment.Payment.PaymentType paymentType78 = models.payment.Payment.PaymentType.FINAL;
        payment75.setPaymentType(paymentType78);
        models.payment.Payment payment80 = new models.payment.Payment(uUID15, booking16, (double) 'a', paymentMethod41, paymentStatus68, paymentType78);
        models.payment.Payment payment81 = new models.payment.Payment((double) 1.0f, booking1, paymentMethod5, paymentType78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod5);
        org.junit.Assert.assertTrue("'" + paymentStatus10 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus10.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType11 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType11.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType13 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType13.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentStatus22 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus22.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType23 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType23.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentStatus32 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus32.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType33 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType33.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType35 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType35.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID36);
        org.junit.Assert.assertTrue("'" + paymentType37 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType37.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod41);
        org.junit.Assert.assertTrue("'" + paymentStatus43 + "' != '" + models.payment.Payment.PaymentStatus.PENDING + "'", paymentStatus43.equals(models.payment.Payment.PaymentStatus.PENDING));
        org.junit.Assert.assertTrue("'" + paymentStatus54 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus54.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType55 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType55.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType57 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType57.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID58);
        org.junit.Assert.assertTrue("'" + paymentType59 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType59.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod63);
        org.junit.Assert.assertTrue("'" + paymentStatus65 + "' != '" + models.payment.Payment.PaymentStatus.PENDING + "'", paymentStatus65.equals(models.payment.Payment.PaymentStatus.PENDING));
        org.junit.Assert.assertTrue("'" + paymentStatus68 + "' != '" + models.payment.Payment.PaymentStatus.PENDING + "'", paymentStatus68.equals(models.payment.Payment.PaymentStatus.PENDING));
        org.junit.Assert.assertTrue("'" + paymentStatus73 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus73.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType74 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType74.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType76 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType76.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID77);
        org.junit.Assert.assertTrue("'" + paymentType78 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType78.equals(models.payment.Payment.PaymentType.FINAL));
    }

    @Test
    public void test066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test066");
        java.util.UUID uUID0 = null;
        models.booking.Booking booking1 = null;
        models.payment.PaymentMethod paymentMethod3 = null;
        models.payment.Payment.PaymentStatus paymentStatus4 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType5 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment6 = new models.payment.Payment(uUID0, booking1, 100.0d, paymentMethod3, paymentStatus4, paymentType5);
        models.payment.Payment.PaymentType paymentType7 = payment6.getPaymentType();
        java.util.UUID uUID8 = payment6.getBookingID();
        models.payment.Payment.PaymentType paymentType9 = models.payment.Payment.PaymentType.FINAL;
        payment6.setPaymentType(paymentType9);
        java.util.UUID uUID11 = payment6.getPaymentID();
        models.payment.PaymentMethod paymentMethod13 = models.payment.Payment.generateMethod("");
        payment6.setPaymentMethod(paymentMethod13);
        models.payment.Payment.PaymentType paymentType15 = payment6.getPaymentType();
        java.util.UUID uUID16 = payment6.getBookingID();
        models.booking.Booking booking17 = payment6.getBooking();
        org.junit.Assert.assertTrue("'" + paymentStatus4 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus4.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType5 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType5.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType7 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType7.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID8);
        org.junit.Assert.assertTrue("'" + paymentType9 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType9.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod13);
        org.junit.Assert.assertTrue("'" + paymentType15 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType15.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(booking17);
    }

    @Test
    public void test067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test067");
        java.util.UUID uUID0 = null;
        models.booking.Booking booking1 = null;
        java.util.UUID uUID3 = null;
        models.booking.Booking booking4 = null;
        models.payment.PaymentMethod paymentMethod6 = null;
        models.payment.Payment.PaymentStatus paymentStatus7 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType8 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment9 = new models.payment.Payment(uUID3, booking4, 100.0d, paymentMethod6, paymentStatus7, paymentType8);
        java.util.UUID uUID10 = null;
        models.booking.Booking booking11 = null;
        java.util.UUID uUID13 = null;
        models.booking.Booking booking14 = null;
        models.payment.PaymentMethod paymentMethod16 = null;
        models.payment.Payment.PaymentStatus paymentStatus17 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType18 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment19 = new models.payment.Payment(uUID13, booking14, 100.0d, paymentMethod16, paymentStatus17, paymentType18);
        models.payment.Payment.PaymentType paymentType20 = payment19.getPaymentType();
        java.util.UUID uUID21 = payment19.getBookingID();
        models.payment.Payment.PaymentType paymentType22 = models.payment.Payment.PaymentType.FINAL;
        payment19.setPaymentType(paymentType22);
        java.util.UUID uUID24 = payment19.getPaymentID();
        models.payment.PaymentMethod paymentMethod26 = models.payment.Payment.generateMethod("");
        payment19.setPaymentMethod(paymentMethod26);
        models.payment.Payment.PaymentStatus paymentStatus28 = models.payment.Payment.PaymentStatus.PENDING;
        models.payment.Payment.PaymentType paymentType29 = null;
        models.payment.Payment payment30 = new models.payment.Payment(uUID10, booking11, (double) (byte) 0, paymentMethod26, paymentStatus28, paymentType29);
        payment9.setPaymentMethod(paymentMethod26);
        java.util.UUID uUID32 = null;
        models.booking.Booking booking33 = null;
        java.util.UUID uUID35 = null;
        models.booking.Booking booking36 = null;
        models.payment.PaymentMethod paymentMethod38 = null;
        models.payment.Payment.PaymentStatus paymentStatus39 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType40 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment41 = new models.payment.Payment(uUID35, booking36, 100.0d, paymentMethod38, paymentStatus39, paymentType40);
        models.payment.Payment.PaymentType paymentType42 = payment41.getPaymentType();
        java.util.UUID uUID43 = payment41.getBookingID();
        models.payment.Payment.PaymentType paymentType44 = models.payment.Payment.PaymentType.FINAL;
        payment41.setPaymentType(paymentType44);
        java.util.UUID uUID46 = payment41.getPaymentID();
        models.payment.PaymentMethod paymentMethod48 = models.payment.Payment.generateMethod("");
        payment41.setPaymentMethod(paymentMethod48);
        models.payment.Payment.PaymentStatus paymentStatus50 = models.payment.Payment.PaymentStatus.PENDING;
        models.payment.Payment.PaymentType paymentType51 = null;
        models.payment.Payment payment52 = new models.payment.Payment(uUID32, booking33, (double) (byte) 0, paymentMethod48, paymentStatus50, paymentType51);
        models.payment.Payment.PaymentStatus paymentStatus53 = payment52.getStatus();
        java.util.UUID uUID54 = null;
        models.booking.Booking booking55 = null;
        models.payment.PaymentMethod paymentMethod57 = null;
        models.payment.Payment.PaymentStatus paymentStatus58 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType59 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment60 = new models.payment.Payment(uUID54, booking55, 100.0d, paymentMethod57, paymentStatus58, paymentType59);
        models.payment.Payment.PaymentType paymentType61 = payment60.getPaymentType();
        java.util.UUID uUID62 = payment60.getBookingID();
        models.payment.Payment.PaymentType paymentType63 = models.payment.Payment.PaymentType.FINAL;
        payment60.setPaymentType(paymentType63);
        models.payment.Payment payment65 = new models.payment.Payment(uUID0, booking1, (double) 'a', paymentMethod26, paymentStatus53, paymentType63);
        double double66 = payment65.getAmount();
        models.payment.PaymentMethod paymentMethod67 = payment65.getMethod();
        org.junit.Assert.assertTrue("'" + paymentStatus7 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus7.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType8 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType8.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentStatus17 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus17.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType18 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType18.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType20 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType20.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID21);
        org.junit.Assert.assertTrue("'" + paymentType22 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType22.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod26);
        org.junit.Assert.assertTrue("'" + paymentStatus28 + "' != '" + models.payment.Payment.PaymentStatus.PENDING + "'", paymentStatus28.equals(models.payment.Payment.PaymentStatus.PENDING));
        org.junit.Assert.assertTrue("'" + paymentStatus39 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus39.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType40 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType40.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType42 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType42.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID43);
        org.junit.Assert.assertTrue("'" + paymentType44 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType44.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod48);
        org.junit.Assert.assertTrue("'" + paymentStatus50 + "' != '" + models.payment.Payment.PaymentStatus.PENDING + "'", paymentStatus50.equals(models.payment.Payment.PaymentStatus.PENDING));
        org.junit.Assert.assertTrue("'" + paymentStatus53 + "' != '" + models.payment.Payment.PaymentStatus.PENDING + "'", paymentStatus53.equals(models.payment.Payment.PaymentStatus.PENDING));
        org.junit.Assert.assertTrue("'" + paymentStatus58 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus58.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType59 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType59.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType61 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType61.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID62);
        org.junit.Assert.assertTrue("'" + paymentType63 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType63.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 97.0d + "'", double66 == 97.0d);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod67);
    }

    @Test
    public void test068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test068");
        java.util.UUID uUID0 = null;
        models.booking.Booking booking1 = null;
        models.payment.PaymentMethod paymentMethod3 = null;
        models.payment.Payment.PaymentStatus paymentStatus4 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType5 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment6 = new models.payment.Payment(uUID0, booking1, 100.0d, paymentMethod3, paymentStatus4, paymentType5);
        models.payment.Payment.PaymentType paymentType7 = payment6.getPaymentType();
        java.util.UUID uUID8 = payment6.getBookingID();
        models.payment.Payment.PaymentType paymentType9 = models.payment.Payment.PaymentType.FINAL;
        payment6.setPaymentType(paymentType9);
        models.payment.PaymentMethod paymentMethod11 = payment6.getMethod();
        models.payment.Payment.PaymentType paymentType12 = payment6.getPaymentType();
        models.payment.Payment.PaymentStatus paymentStatus13 = payment6.getStatus();
        java.util.UUID uUID14 = payment6.getBookingID();
        java.util.UUID uUID15 = null;
        models.booking.Booking booking16 = null;
        models.payment.PaymentMethod paymentMethod18 = null;
        models.payment.Payment.PaymentStatus paymentStatus19 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType20 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment21 = new models.payment.Payment(uUID15, booking16, 100.0d, paymentMethod18, paymentStatus19, paymentType20);
        models.payment.Payment.PaymentType paymentType22 = payment21.getPaymentType();
        java.util.UUID uUID23 = payment21.getBookingID();
        java.util.UUID uUID24 = payment21.getPaymentID();
        models.booking.Booking booking26 = null;
        models.booking.Booking booking28 = null;
        java.util.UUID uUID29 = null;
        models.booking.Booking booking30 = null;
        models.payment.PaymentMethod paymentMethod32 = null;
        models.payment.Payment.PaymentStatus paymentStatus33 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType34 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment35 = new models.payment.Payment(uUID29, booking30, 100.0d, paymentMethod32, paymentStatus33, paymentType34);
        models.payment.Payment.PaymentType paymentType36 = payment35.getPaymentType();
        java.util.UUID uUID37 = payment35.getBookingID();
        models.payment.Payment.PaymentType paymentType38 = models.payment.Payment.PaymentType.FINAL;
        payment35.setPaymentType(paymentType38);
        java.util.UUID uUID40 = payment35.getPaymentID();
        models.payment.PaymentMethod paymentMethod42 = models.payment.Payment.generateMethod("");
        payment35.setPaymentMethod(paymentMethod42);
        java.util.UUID uUID44 = null;
        models.booking.Booking booking45 = null;
        models.payment.PaymentMethod paymentMethod47 = null;
        models.payment.Payment.PaymentStatus paymentStatus48 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType49 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment50 = new models.payment.Payment(uUID44, booking45, 100.0d, paymentMethod47, paymentStatus48, paymentType49);
        models.payment.Payment.PaymentType paymentType51 = payment50.getPaymentType();
        models.payment.Payment.PaymentType paymentType52 = payment50.getPaymentType();
        models.payment.Payment payment53 = new models.payment.Payment((double) 10, booking28, paymentMethod42, paymentType52);
        models.booking.Booking booking55 = null;
        models.payment.PaymentMethod paymentMethod57 = models.payment.Payment.generateMethod("hi!");
        java.util.UUID uUID58 = null;
        models.booking.Booking booking59 = null;
        models.payment.PaymentMethod paymentMethod61 = null;
        models.payment.Payment.PaymentStatus paymentStatus62 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType63 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment64 = new models.payment.Payment(uUID58, booking59, 100.0d, paymentMethod61, paymentStatus62, paymentType63);
        models.payment.Payment.PaymentType paymentType65 = payment64.getPaymentType();
        models.payment.Payment payment66 = new models.payment.Payment(0.0d, booking55, paymentMethod57, paymentType65);
        models.payment.Payment payment67 = new models.payment.Payment((double) (short) -1, booking26, paymentMethod42, paymentType65);
        payment21.setPaymentMethod(paymentMethod42);
        payment6.setPaymentMethod(paymentMethod42);
        org.junit.Assert.assertTrue("'" + paymentStatus4 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus4.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType5 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType5.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType7 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType7.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID8);
        org.junit.Assert.assertTrue("'" + paymentType9 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType9.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(paymentMethod11);
        org.junit.Assert.assertTrue("'" + paymentType12 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType12.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentStatus13 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus13.equals(models.payment.Payment.PaymentStatus.FAILED));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID14);
        org.junit.Assert.assertTrue("'" + paymentStatus19 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus19.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType20 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType20.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType22 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType22.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID24);
        org.junit.Assert.assertTrue("'" + paymentStatus33 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus33.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType34 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType34.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType36 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType36.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID37);
        org.junit.Assert.assertTrue("'" + paymentType38 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType38.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod42);
        org.junit.Assert.assertTrue("'" + paymentStatus48 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus48.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType49 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType49.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType51 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType51.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType52 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType52.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod57);
        org.junit.Assert.assertTrue("'" + paymentStatus62 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus62.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType63 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType63.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType65 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType65.equals(models.payment.Payment.PaymentType.FINAL));
    }

    @Test
    public void test069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test069");
        models.booking.Booking booking1 = null;
        models.payment.PaymentMethod paymentMethod3 = models.payment.Payment.generateMethod("");
        models.payment.Payment.PaymentType paymentType4 = null;
        models.payment.Payment payment5 = new models.payment.Payment(1.0d, booking1, paymentMethod3, paymentType4);
        models.payment.PaymentMethod paymentMethod7 = models.payment.Payment.generateMethod("hi!");
        payment5.setPaymentMethod(paymentMethod7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod7);
    }

    @Test
    public void test070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test070");
        java.util.UUID uUID0 = null;
        models.booking.Booking booking1 = null;
        models.payment.PaymentMethod paymentMethod3 = null;
        models.payment.Payment.PaymentStatus paymentStatus4 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType5 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment6 = new models.payment.Payment(uUID0, booking1, 100.0d, paymentMethod3, paymentStatus4, paymentType5);
        models.payment.Payment.PaymentType paymentType7 = payment6.getPaymentType();
        java.util.UUID uUID8 = payment6.getBookingID();
        models.payment.Payment.PaymentType paymentType9 = models.payment.Payment.PaymentType.FINAL;
        payment6.setPaymentType(paymentType9);
        java.util.UUID uUID11 = payment6.getPaymentID();
        models.payment.PaymentMethod paymentMethod13 = models.payment.Payment.generateMethod("");
        payment6.setPaymentMethod(paymentMethod13);
        models.payment.Payment.PaymentStatus paymentStatus15 = payment6.getStatus();
        java.util.UUID uUID16 = payment6.getPaymentID();
        models.booking.Booking booking17 = payment6.getBooking();
        java.util.UUID uUID18 = payment6.getPaymentID();
        org.junit.Assert.assertTrue("'" + paymentStatus4 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus4.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType5 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType5.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType7 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType7.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID8);
        org.junit.Assert.assertTrue("'" + paymentType9 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType9.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod13);
        org.junit.Assert.assertTrue("'" + paymentStatus15 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus15.equals(models.payment.Payment.PaymentStatus.FAILED));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(booking17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID18);
    }

    @Test
    public void test071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test071");
        java.util.UUID uUID0 = null;
        models.booking.Booking booking1 = null;
        models.payment.PaymentMethod paymentMethod3 = null;
        models.payment.Payment.PaymentStatus paymentStatus4 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType5 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment6 = new models.payment.Payment(uUID0, booking1, 100.0d, paymentMethod3, paymentStatus4, paymentType5);
        java.util.UUID uUID7 = null;
        models.booking.Booking booking8 = null;
        java.util.UUID uUID10 = null;
        models.booking.Booking booking11 = null;
        models.payment.PaymentMethod paymentMethod13 = null;
        models.payment.Payment.PaymentStatus paymentStatus14 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType15 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment16 = new models.payment.Payment(uUID10, booking11, 100.0d, paymentMethod13, paymentStatus14, paymentType15);
        models.payment.Payment.PaymentType paymentType17 = payment16.getPaymentType();
        java.util.UUID uUID18 = payment16.getBookingID();
        models.payment.Payment.PaymentType paymentType19 = models.payment.Payment.PaymentType.FINAL;
        payment16.setPaymentType(paymentType19);
        java.util.UUID uUID21 = payment16.getPaymentID();
        models.payment.PaymentMethod paymentMethod23 = models.payment.Payment.generateMethod("");
        payment16.setPaymentMethod(paymentMethod23);
        models.payment.Payment.PaymentStatus paymentStatus25 = models.payment.Payment.PaymentStatus.PENDING;
        models.payment.Payment.PaymentType paymentType26 = null;
        models.payment.Payment payment27 = new models.payment.Payment(uUID7, booking8, (double) (byte) 0, paymentMethod23, paymentStatus25, paymentType26);
        payment6.setPaymentMethod(paymentMethod23);
        models.payment.Payment.PaymentStatus paymentStatus29 = payment6.getStatus();
        org.junit.Assert.assertTrue("'" + paymentStatus4 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus4.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType5 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType5.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentStatus14 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus14.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType15 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType15.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType17 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType17.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID18);
        org.junit.Assert.assertTrue("'" + paymentType19 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType19.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod23);
        org.junit.Assert.assertTrue("'" + paymentStatus25 + "' != '" + models.payment.Payment.PaymentStatus.PENDING + "'", paymentStatus25.equals(models.payment.Payment.PaymentStatus.PENDING));
        org.junit.Assert.assertTrue("'" + paymentStatus29 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus29.equals(models.payment.Payment.PaymentStatus.FAILED));
    }

    @Test
    public void test072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test072");
        java.util.UUID uUID0 = null;
        models.booking.Booking booking1 = null;
        models.payment.PaymentMethod paymentMethod3 = null;
        models.payment.Payment.PaymentStatus paymentStatus4 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType5 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment6 = new models.payment.Payment(uUID0, booking1, 100.0d, paymentMethod3, paymentStatus4, paymentType5);
        models.payment.Payment.PaymentType paymentType7 = payment6.getPaymentType();
        java.util.UUID uUID8 = payment6.getBookingID();
        models.payment.Payment.PaymentType paymentType9 = models.payment.Payment.PaymentType.FINAL;
        payment6.setPaymentType(paymentType9);
        models.payment.PaymentMethod paymentMethod11 = payment6.getMethod();
        models.payment.Payment.PaymentType paymentType12 = payment6.getPaymentType();
        java.util.UUID uUID13 = payment6.getBookingID();
        models.payment.PaymentMethod paymentMethod14 = payment6.getMethod();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean15 = payment6.processPayment();
            org.junit.Assert.fail("Expected exception of type models.ParkingSystemException; message: Cannot process payment of a payment that is not pending.");
        } catch (models.ParkingSystemException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + paymentStatus4 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus4.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType5 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType5.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType7 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType7.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID8);
        org.junit.Assert.assertTrue("'" + paymentType9 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType9.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(paymentMethod11);
        org.junit.Assert.assertTrue("'" + paymentType12 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType12.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(paymentMethod14);
    }

    @Test
    public void test073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test073");
        java.util.UUID uUID0 = null;
        models.booking.Booking booking1 = null;
        models.payment.PaymentMethod paymentMethod3 = null;
        models.payment.Payment.PaymentStatus paymentStatus4 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType5 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment6 = new models.payment.Payment(uUID0, booking1, 100.0d, paymentMethod3, paymentStatus4, paymentType5);
        models.payment.Payment.PaymentType paymentType7 = payment6.getPaymentType();
        java.util.UUID uUID8 = payment6.getBookingID();
        models.payment.Payment.PaymentType paymentType9 = models.payment.Payment.PaymentType.FINAL;
        payment6.setPaymentType(paymentType9);
        models.payment.PaymentMethod paymentMethod11 = payment6.getMethod();
        java.util.UUID uUID12 = payment6.getBookingID();
        models.booking.Booking booking14 = null;
        java.util.UUID uUID15 = null;
        models.booking.Booking booking16 = null;
        models.payment.PaymentMethod paymentMethod18 = null;
        models.payment.Payment.PaymentStatus paymentStatus19 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType20 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment21 = new models.payment.Payment(uUID15, booking16, 100.0d, paymentMethod18, paymentStatus19, paymentType20);
        models.payment.Payment.PaymentType paymentType22 = payment21.getPaymentType();
        models.payment.Payment.PaymentType paymentType23 = payment21.getPaymentType();
        java.util.UUID uUID24 = null;
        models.booking.Booking booking25 = null;
        java.util.UUID uUID27 = null;
        models.booking.Booking booking28 = null;
        models.payment.PaymentMethod paymentMethod30 = null;
        models.payment.Payment.PaymentStatus paymentStatus31 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType32 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment33 = new models.payment.Payment(uUID27, booking28, 100.0d, paymentMethod30, paymentStatus31, paymentType32);
        models.payment.Payment.PaymentType paymentType34 = payment33.getPaymentType();
        java.util.UUID uUID35 = payment33.getBookingID();
        models.payment.Payment.PaymentType paymentType36 = models.payment.Payment.PaymentType.FINAL;
        payment33.setPaymentType(paymentType36);
        java.util.UUID uUID38 = payment33.getPaymentID();
        models.payment.PaymentMethod paymentMethod40 = models.payment.Payment.generateMethod("");
        payment33.setPaymentMethod(paymentMethod40);
        models.payment.Payment.PaymentStatus paymentStatus42 = models.payment.Payment.PaymentStatus.PENDING;
        models.payment.Payment.PaymentType paymentType43 = null;
        models.payment.Payment payment44 = new models.payment.Payment(uUID24, booking25, (double) (byte) 0, paymentMethod40, paymentStatus42, paymentType43);
        payment21.setPaymentMethod(paymentMethod40);
        java.util.UUID uUID46 = null;
        models.booking.Booking booking47 = null;
        java.util.UUID uUID49 = null;
        models.booking.Booking booking50 = null;
        java.util.UUID uUID52 = null;
        models.booking.Booking booking53 = null;
        models.payment.PaymentMethod paymentMethod55 = null;
        models.payment.Payment.PaymentStatus paymentStatus56 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType57 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment58 = new models.payment.Payment(uUID52, booking53, 100.0d, paymentMethod55, paymentStatus56, paymentType57);
        models.payment.Payment.PaymentType paymentType59 = payment58.getPaymentType();
        java.util.UUID uUID60 = payment58.getBookingID();
        models.payment.Payment.PaymentType paymentType61 = models.payment.Payment.PaymentType.FINAL;
        payment58.setPaymentType(paymentType61);
        java.util.UUID uUID63 = payment58.getPaymentID();
        models.payment.PaymentMethod paymentMethod65 = models.payment.Payment.generateMethod("");
        payment58.setPaymentMethod(paymentMethod65);
        models.payment.Payment.PaymentStatus paymentStatus67 = models.payment.Payment.PaymentStatus.PENDING;
        models.payment.Payment.PaymentType paymentType68 = null;
        models.payment.Payment payment69 = new models.payment.Payment(uUID49, booking50, (double) (byte) 0, paymentMethod65, paymentStatus67, paymentType68);
        models.payment.Payment.PaymentStatus paymentStatus70 = models.payment.Payment.PaymentStatus.PENDING;
        models.payment.Payment.PaymentType paymentType71 = models.payment.Payment.PaymentType.DEPOSIT;
        models.payment.Payment payment72 = new models.payment.Payment(uUID46, booking47, (double) (byte) 100, paymentMethod65, paymentStatus70, paymentType71);
        models.payment.Payment payment73 = new models.payment.Payment((double) 100, booking14, paymentMethod40, paymentType71);
        payment6.setPaymentType(paymentType71);
        org.junit.Assert.assertTrue("'" + paymentStatus4 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus4.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType5 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType5.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType7 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType7.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID8);
        org.junit.Assert.assertTrue("'" + paymentType9 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType9.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(paymentMethod11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID12);
        org.junit.Assert.assertTrue("'" + paymentStatus19 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus19.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType20 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType20.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType22 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType22.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType23 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType23.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentStatus31 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus31.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType32 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType32.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType34 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType34.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID35);
        org.junit.Assert.assertTrue("'" + paymentType36 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType36.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod40);
        org.junit.Assert.assertTrue("'" + paymentStatus42 + "' != '" + models.payment.Payment.PaymentStatus.PENDING + "'", paymentStatus42.equals(models.payment.Payment.PaymentStatus.PENDING));
        org.junit.Assert.assertTrue("'" + paymentStatus56 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus56.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType57 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType57.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType59 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType59.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID60);
        org.junit.Assert.assertTrue("'" + paymentType61 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType61.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod65);
        org.junit.Assert.assertTrue("'" + paymentStatus67 + "' != '" + models.payment.Payment.PaymentStatus.PENDING + "'", paymentStatus67.equals(models.payment.Payment.PaymentStatus.PENDING));
        org.junit.Assert.assertTrue("'" + paymentStatus70 + "' != '" + models.payment.Payment.PaymentStatus.PENDING + "'", paymentStatus70.equals(models.payment.Payment.PaymentStatus.PENDING));
        org.junit.Assert.assertTrue("'" + paymentType71 + "' != '" + models.payment.Payment.PaymentType.DEPOSIT + "'", paymentType71.equals(models.payment.Payment.PaymentType.DEPOSIT));
    }

    @Test
    public void test074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test074");
        models.booking.Booking booking1 = null;
        models.booking.Booking booking3 = null;
        java.util.UUID uUID4 = null;
        models.booking.Booking booking5 = null;
        models.payment.PaymentMethod paymentMethod7 = null;
        models.payment.Payment.PaymentStatus paymentStatus8 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType9 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment10 = new models.payment.Payment(uUID4, booking5, 100.0d, paymentMethod7, paymentStatus8, paymentType9);
        models.payment.Payment.PaymentType paymentType11 = payment10.getPaymentType();
        java.util.UUID uUID12 = payment10.getBookingID();
        models.payment.Payment.PaymentType paymentType13 = models.payment.Payment.PaymentType.FINAL;
        payment10.setPaymentType(paymentType13);
        java.util.UUID uUID15 = payment10.getPaymentID();
        models.payment.PaymentMethod paymentMethod17 = models.payment.Payment.generateMethod("");
        payment10.setPaymentMethod(paymentMethod17);
        java.util.UUID uUID19 = null;
        models.booking.Booking booking20 = null;
        models.payment.PaymentMethod paymentMethod22 = null;
        models.payment.Payment.PaymentStatus paymentStatus23 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType24 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment25 = new models.payment.Payment(uUID19, booking20, 100.0d, paymentMethod22, paymentStatus23, paymentType24);
        models.payment.Payment.PaymentType paymentType26 = payment25.getPaymentType();
        models.payment.Payment.PaymentType paymentType27 = payment25.getPaymentType();
        models.payment.Payment payment28 = new models.payment.Payment((double) 10, booking3, paymentMethod17, paymentType27);
        java.util.UUID uUID29 = null;
        models.booking.Booking booking30 = null;
        models.payment.PaymentMethod paymentMethod32 = null;
        models.payment.Payment.PaymentStatus paymentStatus33 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType34 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment35 = new models.payment.Payment(uUID29, booking30, 100.0d, paymentMethod32, paymentStatus33, paymentType34);
        models.payment.Payment.PaymentType paymentType36 = payment35.getPaymentType();
        java.util.UUID uUID37 = payment35.getBookingID();
        models.payment.Payment.PaymentType paymentType38 = models.payment.Payment.PaymentType.FINAL;
        payment35.setPaymentType(paymentType38);
        models.payment.PaymentMethod paymentMethod40 = payment35.getMethod();
        models.payment.Payment.PaymentType paymentType41 = payment35.getPaymentType();
        models.payment.Payment payment42 = new models.payment.Payment((double) 0, booking1, paymentMethod17, paymentType41);
        java.util.UUID uUID43 = payment42.getBookingID();
        java.util.UUID uUID44 = payment42.getBookingID();
        java.util.UUID uUID45 = null;
        models.booking.Booking booking46 = null;
        models.payment.PaymentMethod paymentMethod48 = null;
        models.payment.Payment.PaymentStatus paymentStatus49 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType50 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment51 = new models.payment.Payment(uUID45, booking46, 100.0d, paymentMethod48, paymentStatus49, paymentType50);
        models.payment.Payment.PaymentType paymentType52 = payment51.getPaymentType();
        models.payment.Payment.PaymentType paymentType53 = payment51.getPaymentType();
        models.payment.Payment.PaymentType paymentType54 = payment51.getPaymentType();
        models.payment.Payment.PaymentType paymentType55 = payment51.getPaymentType();
        payment42.setPaymentType(paymentType55);
        org.junit.Assert.assertTrue("'" + paymentStatus8 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus8.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType9 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType9.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType11 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType11.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID12);
        org.junit.Assert.assertTrue("'" + paymentType13 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType13.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod17);
        org.junit.Assert.assertTrue("'" + paymentStatus23 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus23.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType24 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType24.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType26 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType26.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType27 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType27.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentStatus33 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus33.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType34 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType34.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType36 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType36.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID37);
        org.junit.Assert.assertTrue("'" + paymentType38 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType38.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(paymentMethod40);
        org.junit.Assert.assertTrue("'" + paymentType41 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType41.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID44);
        org.junit.Assert.assertTrue("'" + paymentStatus49 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus49.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType50 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType50.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType52 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType52.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType53 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType53.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType54 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType54.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType55 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType55.equals(models.payment.Payment.PaymentType.FINAL));
    }

    @Test
    public void test075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test075");
        java.util.UUID uUID0 = null;
        models.booking.Booking booking1 = null;
        models.payment.PaymentMethod paymentMethod3 = null;
        models.payment.Payment.PaymentStatus paymentStatus4 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType5 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment6 = new models.payment.Payment(uUID0, booking1, 100.0d, paymentMethod3, paymentStatus4, paymentType5);
        models.payment.Payment.PaymentType paymentType7 = payment6.getPaymentType();
        java.util.UUID uUID8 = payment6.getBookingID();
        models.payment.Payment.PaymentType paymentType9 = models.payment.Payment.PaymentType.FINAL;
        payment6.setPaymentType(paymentType9);
        models.payment.PaymentMethod paymentMethod11 = payment6.getMethod();
        models.payment.Payment.PaymentType paymentType12 = payment6.getPaymentType();
        java.util.UUID uUID13 = payment6.getBookingID();
        java.util.UUID uUID14 = payment6.getPaymentID();
        models.payment.PaymentMethod paymentMethod15 = payment6.getMethod();
        java.util.UUID uUID16 = payment6.getBookingID();
        org.junit.Assert.assertTrue("'" + paymentStatus4 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus4.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType5 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType5.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType7 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType7.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID8);
        org.junit.Assert.assertTrue("'" + paymentType9 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType9.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(paymentMethod11);
        org.junit.Assert.assertTrue("'" + paymentType12 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType12.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(paymentMethod15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID16);
    }

    @Test
    public void test076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test076");
        java.util.UUID uUID0 = null;
        models.booking.Booking booking1 = null;
        models.payment.PaymentMethod paymentMethod3 = null;
        models.payment.Payment.PaymentStatus paymentStatus4 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType5 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment6 = new models.payment.Payment(uUID0, booking1, 100.0d, paymentMethod3, paymentStatus4, paymentType5);
        models.payment.Payment.PaymentType paymentType7 = payment6.getPaymentType();
        java.util.UUID uUID8 = payment6.getBookingID();
        models.payment.Payment.PaymentType paymentType9 = models.payment.Payment.PaymentType.FINAL;
        payment6.setPaymentType(paymentType9);
        models.payment.PaymentMethod paymentMethod11 = payment6.getMethod();
        java.util.UUID uUID12 = payment6.getBookingID();
        java.util.UUID uUID13 = null;
        models.booking.Booking booking14 = null;
        models.payment.PaymentMethod paymentMethod16 = null;
        models.payment.Payment.PaymentStatus paymentStatus17 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType18 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment19 = new models.payment.Payment(uUID13, booking14, 100.0d, paymentMethod16, paymentStatus17, paymentType18);
        models.payment.Payment.PaymentType paymentType20 = payment19.getPaymentType();
        java.util.UUID uUID21 = payment19.getBookingID();
        models.payment.Payment.PaymentType paymentType22 = models.payment.Payment.PaymentType.FINAL;
        payment19.setPaymentType(paymentType22);
        models.payment.PaymentMethod paymentMethod24 = payment19.getMethod();
        models.payment.Payment.PaymentType paymentType25 = payment19.getPaymentType();
        payment6.setPaymentType(paymentType25);
        models.payment.PaymentMethod paymentMethod27 = payment6.getMethod();
        org.junit.Assert.assertTrue("'" + paymentStatus4 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus4.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType5 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType5.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType7 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType7.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID8);
        org.junit.Assert.assertTrue("'" + paymentType9 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType9.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(paymentMethod11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID12);
        org.junit.Assert.assertTrue("'" + paymentStatus17 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus17.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType18 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType18.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType20 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType20.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID21);
        org.junit.Assert.assertTrue("'" + paymentType22 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType22.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(paymentMethod24);
        org.junit.Assert.assertTrue("'" + paymentType25 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType25.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(paymentMethod27);
    }

    @Test
    public void test077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test077");
        java.util.UUID uUID0 = null;
        models.booking.Booking booking1 = null;
        java.util.UUID uUID3 = null;
        models.booking.Booking booking4 = null;
        models.payment.PaymentMethod paymentMethod6 = null;
        models.payment.Payment.PaymentStatus paymentStatus7 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType8 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment9 = new models.payment.Payment(uUID3, booking4, 100.0d, paymentMethod6, paymentStatus7, paymentType8);
        models.payment.Payment.PaymentType paymentType10 = payment9.getPaymentType();
        java.util.UUID uUID11 = payment9.getBookingID();
        models.payment.Payment.PaymentType paymentType12 = models.payment.Payment.PaymentType.FINAL;
        payment9.setPaymentType(paymentType12);
        java.util.UUID uUID14 = payment9.getPaymentID();
        models.payment.PaymentMethod paymentMethod16 = models.payment.Payment.generateMethod("");
        payment9.setPaymentMethod(paymentMethod16);
        models.payment.Payment.PaymentStatus paymentStatus18 = models.payment.Payment.PaymentStatus.PENDING;
        models.payment.Payment.PaymentType paymentType19 = null;
        models.payment.Payment payment20 = new models.payment.Payment(uUID0, booking1, (double) (byte) 0, paymentMethod16, paymentStatus18, paymentType19);
        models.payment.Payment.PaymentType paymentType21 = payment20.getPaymentType();
        models.payment.Payment.PaymentType paymentType22 = payment20.getPaymentType();
        org.junit.Assert.assertTrue("'" + paymentStatus7 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus7.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType8 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType8.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType10 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType10.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID11);
        org.junit.Assert.assertTrue("'" + paymentType12 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType12.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod16);
        org.junit.Assert.assertTrue("'" + paymentStatus18 + "' != '" + models.payment.Payment.PaymentStatus.PENDING + "'", paymentStatus18.equals(models.payment.Payment.PaymentStatus.PENDING));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(paymentType21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(paymentType22);
    }

    @Test
    public void test078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test078");
        java.util.UUID uUID0 = null;
        models.booking.Booking booking1 = null;
        models.payment.PaymentMethod paymentMethod3 = null;
        models.payment.Payment.PaymentStatus paymentStatus4 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType5 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment6 = new models.payment.Payment(uUID0, booking1, 100.0d, paymentMethod3, paymentStatus4, paymentType5);
        models.payment.Payment.PaymentType paymentType7 = payment6.getPaymentType();
        java.util.UUID uUID8 = payment6.getBookingID();
        models.payment.Payment.PaymentType paymentType9 = models.payment.Payment.PaymentType.FINAL;
        payment6.setPaymentType(paymentType9);
        models.payment.PaymentMethod paymentMethod11 = payment6.getMethod();
        models.payment.Payment.PaymentType paymentType12 = payment6.getPaymentType();
        double double13 = payment6.getAmount();
        org.junit.Assert.assertTrue("'" + paymentStatus4 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus4.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType5 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType5.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType7 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType7.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID8);
        org.junit.Assert.assertTrue("'" + paymentType9 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType9.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(paymentMethod11);
        org.junit.Assert.assertTrue("'" + paymentType12 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType12.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 100.0d + "'", double13 == 100.0d);
    }

    @Test
    public void test079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test079");
        java.util.UUID uUID0 = null;
        models.booking.Booking booking1 = null;
        models.payment.PaymentMethod paymentMethod3 = null;
        models.payment.Payment.PaymentStatus paymentStatus4 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType5 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment6 = new models.payment.Payment(uUID0, booking1, 100.0d, paymentMethod3, paymentStatus4, paymentType5);
        models.payment.Payment.PaymentType paymentType7 = payment6.getPaymentType();
        java.util.UUID uUID8 = payment6.getBookingID();
        java.util.UUID uUID9 = payment6.getPaymentID();
        models.booking.Booking booking10 = payment6.getBooking();
        double double11 = payment6.getAmount();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean12 = payment6.processPayment();
            org.junit.Assert.fail("Expected exception of type models.ParkingSystemException; message: Cannot process payment of a payment that is not pending.");
        } catch (models.ParkingSystemException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + paymentStatus4 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus4.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType5 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType5.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType7 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType7.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(booking10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
    }

    @Test
    public void test080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test080");
        java.util.UUID uUID0 = null;
        models.booking.Booking booking1 = null;
        java.util.UUID uUID3 = null;
        models.booking.Booking booking4 = null;
        java.util.UUID uUID6 = null;
        models.booking.Booking booking7 = null;
        models.payment.PaymentMethod paymentMethod9 = null;
        models.payment.Payment.PaymentStatus paymentStatus10 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType11 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment12 = new models.payment.Payment(uUID6, booking7, 100.0d, paymentMethod9, paymentStatus10, paymentType11);
        models.payment.Payment.PaymentType paymentType13 = payment12.getPaymentType();
        java.util.UUID uUID14 = payment12.getBookingID();
        models.payment.Payment.PaymentType paymentType15 = models.payment.Payment.PaymentType.FINAL;
        payment12.setPaymentType(paymentType15);
        java.util.UUID uUID17 = payment12.getPaymentID();
        models.payment.PaymentMethod paymentMethod19 = models.payment.Payment.generateMethod("");
        payment12.setPaymentMethod(paymentMethod19);
        models.payment.Payment.PaymentStatus paymentStatus21 = models.payment.Payment.PaymentStatus.PENDING;
        models.payment.Payment.PaymentType paymentType22 = null;
        models.payment.Payment payment23 = new models.payment.Payment(uUID3, booking4, (double) (byte) 0, paymentMethod19, paymentStatus21, paymentType22);
        models.payment.Payment.PaymentStatus paymentStatus24 = models.payment.Payment.PaymentStatus.PENDING;
        models.payment.Payment.PaymentType paymentType25 = models.payment.Payment.PaymentType.DEPOSIT;
        models.payment.Payment payment26 = new models.payment.Payment(uUID0, booking1, (double) (byte) 100, paymentMethod19, paymentStatus24, paymentType25);
        models.booking.Booking booking27 = payment26.getBooking();
        models.payment.PaymentMethod paymentMethod28 = payment26.getMethod();
        models.payment.Payment.PaymentType paymentType29 = null;
        payment26.setPaymentType(paymentType29);
        org.junit.Assert.assertTrue("'" + paymentStatus10 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus10.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType11 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType11.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType13 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType13.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID14);
        org.junit.Assert.assertTrue("'" + paymentType15 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType15.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod19);
        org.junit.Assert.assertTrue("'" + paymentStatus21 + "' != '" + models.payment.Payment.PaymentStatus.PENDING + "'", paymentStatus21.equals(models.payment.Payment.PaymentStatus.PENDING));
        org.junit.Assert.assertTrue("'" + paymentStatus24 + "' != '" + models.payment.Payment.PaymentStatus.PENDING + "'", paymentStatus24.equals(models.payment.Payment.PaymentStatus.PENDING));
        org.junit.Assert.assertTrue("'" + paymentType25 + "' != '" + models.payment.Payment.PaymentType.DEPOSIT + "'", paymentType25.equals(models.payment.Payment.PaymentType.DEPOSIT));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(booking27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod28);
    }

    @Test
    public void test081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test081");
        models.booking.Booking booking1 = null;
        models.booking.Booking booking3 = null;
        java.util.UUID uUID4 = null;
        models.booking.Booking booking5 = null;
        models.payment.PaymentMethod paymentMethod7 = null;
        models.payment.Payment.PaymentStatus paymentStatus8 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType9 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment10 = new models.payment.Payment(uUID4, booking5, 100.0d, paymentMethod7, paymentStatus8, paymentType9);
        models.payment.Payment.PaymentType paymentType11 = payment10.getPaymentType();
        java.util.UUID uUID12 = payment10.getBookingID();
        models.payment.Payment.PaymentType paymentType13 = models.payment.Payment.PaymentType.FINAL;
        payment10.setPaymentType(paymentType13);
        java.util.UUID uUID15 = payment10.getPaymentID();
        models.payment.PaymentMethod paymentMethod17 = models.payment.Payment.generateMethod("");
        payment10.setPaymentMethod(paymentMethod17);
        java.util.UUID uUID19 = null;
        models.booking.Booking booking20 = null;
        models.payment.PaymentMethod paymentMethod22 = null;
        models.payment.Payment.PaymentStatus paymentStatus23 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType24 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment25 = new models.payment.Payment(uUID19, booking20, 100.0d, paymentMethod22, paymentStatus23, paymentType24);
        models.payment.Payment.PaymentType paymentType26 = payment25.getPaymentType();
        models.payment.Payment.PaymentType paymentType27 = payment25.getPaymentType();
        models.payment.Payment payment28 = new models.payment.Payment((double) 10, booking3, paymentMethod17, paymentType27);
        java.util.UUID uUID29 = null;
        models.booking.Booking booking30 = null;
        models.payment.PaymentMethod paymentMethod32 = null;
        models.payment.Payment.PaymentStatus paymentStatus33 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType34 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment35 = new models.payment.Payment(uUID29, booking30, 100.0d, paymentMethod32, paymentStatus33, paymentType34);
        models.payment.Payment.PaymentType paymentType36 = payment35.getPaymentType();
        java.util.UUID uUID37 = payment35.getBookingID();
        models.payment.Payment.PaymentType paymentType38 = models.payment.Payment.PaymentType.FINAL;
        payment35.setPaymentType(paymentType38);
        models.payment.PaymentMethod paymentMethod40 = payment35.getMethod();
        models.payment.Payment.PaymentType paymentType41 = payment35.getPaymentType();
        models.payment.Payment payment42 = new models.payment.Payment((double) 0, booking1, paymentMethod17, paymentType41);
        models.payment.Payment.PaymentStatus paymentStatus43 = payment42.getStatus();
        models.payment.Payment.PaymentType paymentType44 = payment42.getPaymentType();
        double double45 = payment42.getAmount();
        org.junit.Assert.assertTrue("'" + paymentStatus8 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus8.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType9 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType9.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType11 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType11.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID12);
        org.junit.Assert.assertTrue("'" + paymentType13 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType13.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod17);
        org.junit.Assert.assertTrue("'" + paymentStatus23 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus23.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType24 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType24.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType26 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType26.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType27 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType27.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentStatus33 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus33.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType34 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType34.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType36 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType36.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID37);
        org.junit.Assert.assertTrue("'" + paymentType38 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType38.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(paymentMethod40);
        org.junit.Assert.assertTrue("'" + paymentType41 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType41.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentStatus43 + "' != '" + models.payment.Payment.PaymentStatus.PENDING + "'", paymentStatus43.equals(models.payment.Payment.PaymentStatus.PENDING));
        org.junit.Assert.assertTrue("'" + paymentType44 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType44.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.0d + "'", double45 == 0.0d);
    }

    @Test
    public void test082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test082");
        java.util.UUID uUID0 = null;
        models.booking.Booking booking1 = null;
        models.payment.PaymentMethod paymentMethod3 = null;
        models.payment.Payment.PaymentStatus paymentStatus4 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType5 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment6 = new models.payment.Payment(uUID0, booking1, 100.0d, paymentMethod3, paymentStatus4, paymentType5);
        models.payment.Payment.PaymentType paymentType7 = payment6.getPaymentType();
        java.util.UUID uUID8 = payment6.getBookingID();
        models.payment.Payment.PaymentType paymentType9 = models.payment.Payment.PaymentType.FINAL;
        payment6.setPaymentType(paymentType9);
        java.util.UUID uUID11 = payment6.getPaymentID();
        double double12 = payment6.getAmount();
        java.util.UUID uUID13 = null;
        models.booking.Booking booking14 = null;
        models.payment.PaymentMethod paymentMethod16 = null;
        models.payment.Payment.PaymentStatus paymentStatus17 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType18 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment19 = new models.payment.Payment(uUID13, booking14, 100.0d, paymentMethod16, paymentStatus17, paymentType18);
        payment6.setPaymentType(paymentType18);
        models.payment.Payment.PaymentStatus paymentStatus21 = payment6.getStatus();
        models.payment.PaymentMethod paymentMethod22 = payment6.getMethod();
        java.lang.Class<?> wildcardClass23 = payment6.getClass();
        org.junit.Assert.assertTrue("'" + paymentStatus4 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus4.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType5 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType5.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType7 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType7.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID8);
        org.junit.Assert.assertTrue("'" + paymentType9 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType9.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 100.0d + "'", double12 == 100.0d);
        org.junit.Assert.assertTrue("'" + paymentStatus17 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus17.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType18 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType18.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentStatus21 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus21.equals(models.payment.Payment.PaymentStatus.FAILED));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(paymentMethod22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test083");
        java.util.UUID uUID0 = null;
        models.booking.Booking booking1 = null;
        java.util.UUID uUID3 = null;
        models.booking.Booking booking4 = null;
        models.payment.PaymentMethod paymentMethod6 = null;
        models.payment.Payment.PaymentStatus paymentStatus7 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType8 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment9 = new models.payment.Payment(uUID3, booking4, 100.0d, paymentMethod6, paymentStatus7, paymentType8);
        java.util.UUID uUID10 = null;
        models.booking.Booking booking11 = null;
        java.util.UUID uUID13 = null;
        models.booking.Booking booking14 = null;
        models.payment.PaymentMethod paymentMethod16 = null;
        models.payment.Payment.PaymentStatus paymentStatus17 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType18 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment19 = new models.payment.Payment(uUID13, booking14, 100.0d, paymentMethod16, paymentStatus17, paymentType18);
        models.payment.Payment.PaymentType paymentType20 = payment19.getPaymentType();
        java.util.UUID uUID21 = payment19.getBookingID();
        models.payment.Payment.PaymentType paymentType22 = models.payment.Payment.PaymentType.FINAL;
        payment19.setPaymentType(paymentType22);
        java.util.UUID uUID24 = payment19.getPaymentID();
        models.payment.PaymentMethod paymentMethod26 = models.payment.Payment.generateMethod("");
        payment19.setPaymentMethod(paymentMethod26);
        models.payment.Payment.PaymentStatus paymentStatus28 = models.payment.Payment.PaymentStatus.PENDING;
        models.payment.Payment.PaymentType paymentType29 = null;
        models.payment.Payment payment30 = new models.payment.Payment(uUID10, booking11, (double) (byte) 0, paymentMethod26, paymentStatus28, paymentType29);
        payment9.setPaymentMethod(paymentMethod26);
        java.util.UUID uUID32 = null;
        models.booking.Booking booking33 = null;
        models.payment.PaymentMethod paymentMethod35 = null;
        models.payment.Payment.PaymentStatus paymentStatus36 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType37 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment38 = new models.payment.Payment(uUID32, booking33, 100.0d, paymentMethod35, paymentStatus36, paymentType37);
        models.payment.Payment.PaymentStatus paymentStatus39 = payment38.getStatus();
        java.util.UUID uUID40 = null;
        models.booking.Booking booking41 = null;
        models.payment.PaymentMethod paymentMethod43 = null;
        models.payment.Payment.PaymentStatus paymentStatus44 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType45 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment46 = new models.payment.Payment(uUID40, booking41, 100.0d, paymentMethod43, paymentStatus44, paymentType45);
        models.payment.Payment.PaymentType paymentType47 = payment46.getPaymentType();
        java.util.UUID uUID48 = payment46.getBookingID();
        models.payment.Payment.PaymentType paymentType49 = models.payment.Payment.PaymentType.FINAL;
        payment46.setPaymentType(paymentType49);
        models.payment.PaymentMethod paymentMethod51 = payment46.getMethod();
        models.payment.Payment.PaymentType paymentType52 = payment46.getPaymentType();
        models.payment.Payment payment53 = new models.payment.Payment(uUID0, booking1, (double) (byte) 0, paymentMethod26, paymentStatus39, paymentType52);
        java.lang.Class<?> wildcardClass54 = paymentStatus39.getClass();
        org.junit.Assert.assertTrue("'" + paymentStatus7 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus7.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType8 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType8.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentStatus17 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus17.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType18 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType18.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType20 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType20.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID21);
        org.junit.Assert.assertTrue("'" + paymentType22 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType22.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod26);
        org.junit.Assert.assertTrue("'" + paymentStatus28 + "' != '" + models.payment.Payment.PaymentStatus.PENDING + "'", paymentStatus28.equals(models.payment.Payment.PaymentStatus.PENDING));
        org.junit.Assert.assertTrue("'" + paymentStatus36 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus36.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType37 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType37.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentStatus39 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus39.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentStatus44 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus44.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType45 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType45.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType47 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType47.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID48);
        org.junit.Assert.assertTrue("'" + paymentType49 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType49.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(paymentMethod51);
        org.junit.Assert.assertTrue("'" + paymentType52 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType52.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass54);
    }

    @Test
    public void test084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test084");
        java.util.UUID uUID0 = null;
        models.booking.Booking booking1 = null;
        models.payment.PaymentMethod paymentMethod3 = null;
        models.payment.Payment.PaymentStatus paymentStatus4 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType5 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment6 = new models.payment.Payment(uUID0, booking1, 100.0d, paymentMethod3, paymentStatus4, paymentType5);
        models.payment.Payment.PaymentType paymentType7 = payment6.getPaymentType();
        java.util.UUID uUID8 = payment6.getBookingID();
        models.payment.Payment.PaymentType paymentType9 = models.payment.Payment.PaymentType.FINAL;
        payment6.setPaymentType(paymentType9);
        models.payment.PaymentMethod paymentMethod11 = payment6.getMethod();
        models.payment.Payment.PaymentType paymentType12 = payment6.getPaymentType();
        java.util.UUID uUID13 = null;
        models.booking.Booking booking14 = null;
        models.payment.PaymentMethod paymentMethod16 = null;
        models.payment.Payment.PaymentStatus paymentStatus17 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType18 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment19 = new models.payment.Payment(uUID13, booking14, 100.0d, paymentMethod16, paymentStatus17, paymentType18);
        java.util.UUID uUID20 = null;
        models.booking.Booking booking21 = null;
        java.util.UUID uUID23 = null;
        models.booking.Booking booking24 = null;
        models.payment.PaymentMethod paymentMethod26 = null;
        models.payment.Payment.PaymentStatus paymentStatus27 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType28 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment29 = new models.payment.Payment(uUID23, booking24, 100.0d, paymentMethod26, paymentStatus27, paymentType28);
        models.payment.Payment.PaymentType paymentType30 = payment29.getPaymentType();
        java.util.UUID uUID31 = payment29.getBookingID();
        models.payment.Payment.PaymentType paymentType32 = models.payment.Payment.PaymentType.FINAL;
        payment29.setPaymentType(paymentType32);
        java.util.UUID uUID34 = payment29.getPaymentID();
        models.payment.PaymentMethod paymentMethod36 = models.payment.Payment.generateMethod("");
        payment29.setPaymentMethod(paymentMethod36);
        models.payment.Payment.PaymentStatus paymentStatus38 = models.payment.Payment.PaymentStatus.PENDING;
        models.payment.Payment.PaymentType paymentType39 = null;
        models.payment.Payment payment40 = new models.payment.Payment(uUID20, booking21, (double) (byte) 0, paymentMethod36, paymentStatus38, paymentType39);
        payment19.setPaymentMethod(paymentMethod36);
        payment6.setPaymentMethod(paymentMethod36);
        models.booking.Booking booking43 = payment6.getBooking();
        models.payment.Payment.PaymentType paymentType44 = payment6.getPaymentType();
        models.payment.PaymentMethod paymentMethod45 = payment6.getMethod();
        org.junit.Assert.assertTrue("'" + paymentStatus4 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus4.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType5 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType5.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType7 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType7.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID8);
        org.junit.Assert.assertTrue("'" + paymentType9 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType9.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(paymentMethod11);
        org.junit.Assert.assertTrue("'" + paymentType12 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType12.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentStatus17 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus17.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType18 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType18.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentStatus27 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus27.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType28 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType28.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType30 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType30.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID31);
        org.junit.Assert.assertTrue("'" + paymentType32 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType32.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod36);
        org.junit.Assert.assertTrue("'" + paymentStatus38 + "' != '" + models.payment.Payment.PaymentStatus.PENDING + "'", paymentStatus38.equals(models.payment.Payment.PaymentStatus.PENDING));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(booking43);
        org.junit.Assert.assertTrue("'" + paymentType44 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType44.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod45);
    }

    @Test
    public void test085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test085");
        java.util.UUID uUID0 = null;
        models.booking.Booking booking1 = null;
        java.util.UUID uUID3 = null;
        models.booking.Booking booking4 = null;
        models.payment.PaymentMethod paymentMethod6 = null;
        models.payment.Payment.PaymentStatus paymentStatus7 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType8 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment9 = new models.payment.Payment(uUID3, booking4, 100.0d, paymentMethod6, paymentStatus7, paymentType8);
        models.payment.Payment.PaymentType paymentType10 = payment9.getPaymentType();
        java.util.UUID uUID11 = payment9.getBookingID();
        models.payment.Payment.PaymentType paymentType12 = models.payment.Payment.PaymentType.FINAL;
        payment9.setPaymentType(paymentType12);
        java.util.UUID uUID14 = payment9.getPaymentID();
        models.payment.PaymentMethod paymentMethod16 = models.payment.Payment.generateMethod("");
        payment9.setPaymentMethod(paymentMethod16);
        models.payment.Payment.PaymentStatus paymentStatus18 = models.payment.Payment.PaymentStatus.PENDING;
        models.payment.Payment.PaymentType paymentType19 = null;
        models.payment.Payment payment20 = new models.payment.Payment(uUID0, booking1, (double) (byte) 0, paymentMethod16, paymentStatus18, paymentType19);
        models.payment.Payment.PaymentType paymentType21 = payment20.getPaymentType();
        models.booking.Booking booking23 = null;
        models.booking.Booking booking25 = null;
        java.util.UUID uUID26 = null;
        models.booking.Booking booking27 = null;
        models.payment.PaymentMethod paymentMethod29 = null;
        models.payment.Payment.PaymentStatus paymentStatus30 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType31 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment32 = new models.payment.Payment(uUID26, booking27, 100.0d, paymentMethod29, paymentStatus30, paymentType31);
        models.payment.Payment.PaymentType paymentType33 = payment32.getPaymentType();
        java.util.UUID uUID34 = payment32.getBookingID();
        models.payment.Payment.PaymentType paymentType35 = models.payment.Payment.PaymentType.FINAL;
        payment32.setPaymentType(paymentType35);
        java.util.UUID uUID37 = payment32.getPaymentID();
        models.payment.PaymentMethod paymentMethod39 = models.payment.Payment.generateMethod("");
        payment32.setPaymentMethod(paymentMethod39);
        java.util.UUID uUID41 = null;
        models.booking.Booking booking42 = null;
        models.payment.PaymentMethod paymentMethod44 = null;
        models.payment.Payment.PaymentStatus paymentStatus45 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType46 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment47 = new models.payment.Payment(uUID41, booking42, 100.0d, paymentMethod44, paymentStatus45, paymentType46);
        models.payment.Payment.PaymentType paymentType48 = payment47.getPaymentType();
        models.payment.Payment.PaymentType paymentType49 = payment47.getPaymentType();
        models.payment.Payment payment50 = new models.payment.Payment((double) 10, booking25, paymentMethod39, paymentType49);
        java.util.UUID uUID51 = null;
        models.booking.Booking booking52 = null;
        models.payment.PaymentMethod paymentMethod54 = null;
        models.payment.Payment.PaymentStatus paymentStatus55 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType56 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment57 = new models.payment.Payment(uUID51, booking52, 100.0d, paymentMethod54, paymentStatus55, paymentType56);
        models.payment.Payment payment58 = new models.payment.Payment((double) '4', booking23, paymentMethod39, paymentType56);
        payment20.setPaymentType(paymentType56);
        org.junit.Assert.assertTrue("'" + paymentStatus7 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus7.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType8 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType8.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType10 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType10.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID11);
        org.junit.Assert.assertTrue("'" + paymentType12 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType12.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod16);
        org.junit.Assert.assertTrue("'" + paymentStatus18 + "' != '" + models.payment.Payment.PaymentStatus.PENDING + "'", paymentStatus18.equals(models.payment.Payment.PaymentStatus.PENDING));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(paymentType21);
        org.junit.Assert.assertTrue("'" + paymentStatus30 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus30.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType31 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType31.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType33 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType33.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID34);
        org.junit.Assert.assertTrue("'" + paymentType35 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType35.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod39);
        org.junit.Assert.assertTrue("'" + paymentStatus45 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus45.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType46 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType46.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType48 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType48.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType49 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType49.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentStatus55 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus55.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType56 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType56.equals(models.payment.Payment.PaymentType.FINAL));
    }

    @Test
    public void test086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test086");
        java.util.UUID uUID0 = null;
        models.booking.Booking booking1 = null;
        models.payment.PaymentMethod paymentMethod3 = null;
        models.payment.Payment.PaymentStatus paymentStatus4 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType5 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment6 = new models.payment.Payment(uUID0, booking1, 100.0d, paymentMethod3, paymentStatus4, paymentType5);
        models.payment.Payment.PaymentType paymentType7 = payment6.getPaymentType();
        java.util.UUID uUID8 = payment6.getBookingID();
        models.payment.Payment.PaymentType paymentType9 = models.payment.Payment.PaymentType.FINAL;
        payment6.setPaymentType(paymentType9);
        models.payment.PaymentMethod paymentMethod11 = payment6.getMethod();
        models.payment.Payment.PaymentType paymentType12 = payment6.getPaymentType();
        java.util.UUID uUID13 = payment6.getBookingID();
        java.util.UUID uUID14 = payment6.getPaymentID();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean15 = payment6.processPayment();
            org.junit.Assert.fail("Expected exception of type models.ParkingSystemException; message: Cannot process payment of a payment that is not pending.");
        } catch (models.ParkingSystemException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + paymentStatus4 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus4.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType5 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType5.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType7 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType7.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID8);
        org.junit.Assert.assertTrue("'" + paymentType9 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType9.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(paymentMethod11);
        org.junit.Assert.assertTrue("'" + paymentType12 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType12.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID14);
    }

    @Test
    public void test087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test087");
        models.booking.Booking booking1 = null;
        models.booking.Booking booking3 = null;
        java.util.UUID uUID4 = null;
        models.booking.Booking booking5 = null;
        models.payment.PaymentMethod paymentMethod7 = null;
        models.payment.Payment.PaymentStatus paymentStatus8 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType9 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment10 = new models.payment.Payment(uUID4, booking5, 100.0d, paymentMethod7, paymentStatus8, paymentType9);
        models.payment.Payment.PaymentType paymentType11 = payment10.getPaymentType();
        java.util.UUID uUID12 = payment10.getBookingID();
        models.payment.Payment.PaymentType paymentType13 = models.payment.Payment.PaymentType.FINAL;
        payment10.setPaymentType(paymentType13);
        java.util.UUID uUID15 = payment10.getPaymentID();
        models.payment.PaymentMethod paymentMethod17 = models.payment.Payment.generateMethod("");
        payment10.setPaymentMethod(paymentMethod17);
        java.util.UUID uUID19 = null;
        models.booking.Booking booking20 = null;
        models.payment.PaymentMethod paymentMethod22 = null;
        models.payment.Payment.PaymentStatus paymentStatus23 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType24 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment25 = new models.payment.Payment(uUID19, booking20, 100.0d, paymentMethod22, paymentStatus23, paymentType24);
        models.payment.Payment.PaymentType paymentType26 = payment25.getPaymentType();
        models.payment.Payment.PaymentType paymentType27 = payment25.getPaymentType();
        models.payment.Payment payment28 = new models.payment.Payment((double) 10, booking3, paymentMethod17, paymentType27);
        java.util.UUID uUID29 = null;
        models.booking.Booking booking30 = null;
        models.payment.PaymentMethod paymentMethod32 = null;
        models.payment.Payment.PaymentStatus paymentStatus33 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType34 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment35 = new models.payment.Payment(uUID29, booking30, 100.0d, paymentMethod32, paymentStatus33, paymentType34);
        models.payment.Payment.PaymentType paymentType36 = payment35.getPaymentType();
        java.util.UUID uUID37 = payment35.getBookingID();
        models.payment.Payment.PaymentType paymentType38 = models.payment.Payment.PaymentType.FINAL;
        payment35.setPaymentType(paymentType38);
        models.payment.PaymentMethod paymentMethod40 = payment35.getMethod();
        models.payment.Payment.PaymentType paymentType41 = payment35.getPaymentType();
        models.payment.Payment payment42 = new models.payment.Payment((double) 0, booking1, paymentMethod17, paymentType41);
        java.util.UUID uUID43 = payment42.getBookingID();
        java.util.UUID uUID44 = payment42.getBookingID();
        models.payment.Payment.PaymentStatus paymentStatus45 = payment42.getStatus();
        models.booking.Booking booking47 = null;
        models.payment.PaymentMethod paymentMethod49 = models.payment.Payment.generateMethod("hi!");
        java.util.UUID uUID50 = null;
        models.booking.Booking booking51 = null;
        models.payment.PaymentMethod paymentMethod53 = null;
        models.payment.Payment.PaymentStatus paymentStatus54 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType55 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment56 = new models.payment.Payment(uUID50, booking51, 100.0d, paymentMethod53, paymentStatus54, paymentType55);
        models.payment.Payment.PaymentType paymentType57 = payment56.getPaymentType();
        models.payment.Payment payment58 = new models.payment.Payment(0.0d, booking47, paymentMethod49, paymentType57);
        payment42.setPaymentMethod(paymentMethod49);
        org.junit.Assert.assertTrue("'" + paymentStatus8 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus8.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType9 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType9.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType11 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType11.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID12);
        org.junit.Assert.assertTrue("'" + paymentType13 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType13.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod17);
        org.junit.Assert.assertTrue("'" + paymentStatus23 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus23.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType24 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType24.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType26 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType26.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType27 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType27.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentStatus33 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus33.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType34 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType34.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType36 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType36.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID37);
        org.junit.Assert.assertTrue("'" + paymentType38 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType38.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(paymentMethod40);
        org.junit.Assert.assertTrue("'" + paymentType41 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType41.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID44);
        org.junit.Assert.assertTrue("'" + paymentStatus45 + "' != '" + models.payment.Payment.PaymentStatus.PENDING + "'", paymentStatus45.equals(models.payment.Payment.PaymentStatus.PENDING));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod49);
        org.junit.Assert.assertTrue("'" + paymentStatus54 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus54.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType55 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType55.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType57 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType57.equals(models.payment.Payment.PaymentType.FINAL));
    }

    @Test
    public void test088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test088");
        java.util.UUID uUID0 = null;
        models.booking.Booking booking1 = null;
        models.payment.PaymentMethod paymentMethod3 = null;
        models.payment.Payment.PaymentStatus paymentStatus4 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType5 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment6 = new models.payment.Payment(uUID0, booking1, 100.0d, paymentMethod3, paymentStatus4, paymentType5);
        models.payment.Payment.PaymentType paymentType7 = payment6.getPaymentType();
        java.util.UUID uUID8 = payment6.getBookingID();
        models.payment.Payment.PaymentType paymentType9 = models.payment.Payment.PaymentType.FINAL;
        payment6.setPaymentType(paymentType9);
        models.payment.Payment.PaymentStatus paymentStatus11 = payment6.getStatus();
        org.junit.Assert.assertTrue("'" + paymentStatus4 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus4.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType5 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType5.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType7 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType7.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID8);
        org.junit.Assert.assertTrue("'" + paymentType9 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType9.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentStatus11 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus11.equals(models.payment.Payment.PaymentStatus.FAILED));
    }

    @Test
    public void test089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test089");
        java.util.UUID uUID0 = null;
        models.booking.Booking booking1 = null;
        models.payment.PaymentMethod paymentMethod3 = null;
        models.payment.Payment.PaymentStatus paymentStatus4 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType5 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment6 = new models.payment.Payment(uUID0, booking1, 100.0d, paymentMethod3, paymentStatus4, paymentType5);
        models.payment.Payment.PaymentType paymentType7 = payment6.getPaymentType();
        java.util.UUID uUID8 = payment6.getBookingID();
        models.payment.PaymentMethod paymentMethod9 = payment6.getMethod();
        java.util.UUID uUID10 = null;
        models.booking.Booking booking11 = null;
        models.booking.Booking booking14 = null;
        models.booking.Booking booking16 = null;
        java.util.UUID uUID17 = null;
        models.booking.Booking booking18 = null;
        models.payment.PaymentMethod paymentMethod20 = null;
        models.payment.Payment.PaymentStatus paymentStatus21 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType22 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment23 = new models.payment.Payment(uUID17, booking18, 100.0d, paymentMethod20, paymentStatus21, paymentType22);
        models.payment.Payment.PaymentType paymentType24 = payment23.getPaymentType();
        java.util.UUID uUID25 = payment23.getBookingID();
        models.payment.Payment.PaymentType paymentType26 = models.payment.Payment.PaymentType.FINAL;
        payment23.setPaymentType(paymentType26);
        java.util.UUID uUID28 = payment23.getPaymentID();
        models.payment.PaymentMethod paymentMethod30 = models.payment.Payment.generateMethod("");
        payment23.setPaymentMethod(paymentMethod30);
        java.util.UUID uUID32 = null;
        models.booking.Booking booking33 = null;
        models.payment.PaymentMethod paymentMethod35 = null;
        models.payment.Payment.PaymentStatus paymentStatus36 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType37 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment38 = new models.payment.Payment(uUID32, booking33, 100.0d, paymentMethod35, paymentStatus36, paymentType37);
        models.payment.Payment.PaymentType paymentType39 = payment38.getPaymentType();
        models.payment.Payment.PaymentType paymentType40 = payment38.getPaymentType();
        models.payment.Payment payment41 = new models.payment.Payment((double) 10, booking16, paymentMethod30, paymentType40);
        models.payment.Payment.PaymentType paymentType42 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment43 = new models.payment.Payment((double) 0.0f, booking14, paymentMethod30, paymentType42);
        java.util.UUID uUID44 = null;
        models.booking.Booking booking45 = null;
        models.payment.PaymentMethod paymentMethod47 = null;
        models.payment.Payment.PaymentStatus paymentStatus48 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType49 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment50 = new models.payment.Payment(uUID44, booking45, (-1.0d), paymentMethod47, paymentStatus48, paymentType49);
        java.util.UUID uUID51 = null;
        models.booking.Booking booking52 = null;
        models.payment.PaymentMethod paymentMethod54 = null;
        models.payment.Payment.PaymentStatus paymentStatus55 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType56 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment57 = new models.payment.Payment(uUID51, booking52, 100.0d, paymentMethod54, paymentStatus55, paymentType56);
        models.payment.Payment.PaymentType paymentType58 = payment57.getPaymentType();
        java.util.UUID uUID59 = payment57.getBookingID();
        models.payment.Payment.PaymentType paymentType60 = models.payment.Payment.PaymentType.FINAL;
        payment57.setPaymentType(paymentType60);
        models.payment.PaymentMethod paymentMethod62 = payment57.getMethod();
        java.util.UUID uUID63 = null;
        models.booking.Booking booking64 = null;
        models.payment.PaymentMethod paymentMethod66 = null;
        models.payment.Payment.PaymentStatus paymentStatus67 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType68 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment69 = new models.payment.Payment(uUID63, booking64, 100.0d, paymentMethod66, paymentStatus67, paymentType68);
        models.payment.Payment.PaymentType paymentType70 = payment69.getPaymentType();
        java.util.UUID uUID71 = payment69.getBookingID();
        models.payment.Payment.PaymentType paymentType72 = models.payment.Payment.PaymentType.FINAL;
        payment69.setPaymentType(paymentType72);
        payment57.setPaymentType(paymentType72);
        models.payment.Payment payment75 = new models.payment.Payment(uUID10, booking11, (double) (byte) 10, paymentMethod30, paymentStatus48, paymentType72);
        payment6.setPaymentMethod(paymentMethod30);
        org.junit.Assert.assertTrue("'" + paymentStatus4 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus4.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType5 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType5.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType7 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType7.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(paymentMethod9);
        org.junit.Assert.assertTrue("'" + paymentStatus21 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus21.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType22 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType22.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType24 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType24.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID25);
        org.junit.Assert.assertTrue("'" + paymentType26 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType26.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod30);
        org.junit.Assert.assertTrue("'" + paymentStatus36 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus36.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType37 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType37.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType39 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType39.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType40 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType40.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType42 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType42.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentStatus48 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus48.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType49 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType49.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentStatus55 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus55.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType56 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType56.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType58 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType58.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID59);
        org.junit.Assert.assertTrue("'" + paymentType60 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType60.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(paymentMethod62);
        org.junit.Assert.assertTrue("'" + paymentStatus67 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus67.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType68 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType68.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType70 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType70.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID71);
        org.junit.Assert.assertTrue("'" + paymentType72 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType72.equals(models.payment.Payment.PaymentType.FINAL));
    }

    @Test
    public void test090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test090");
        java.util.UUID uUID0 = null;
        models.booking.Booking booking1 = null;
        models.payment.PaymentMethod paymentMethod3 = null;
        models.payment.Payment.PaymentStatus paymentStatus4 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType5 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment6 = new models.payment.Payment(uUID0, booking1, 100.0d, paymentMethod3, paymentStatus4, paymentType5);
        models.payment.Payment.PaymentType paymentType7 = payment6.getPaymentType();
        java.util.UUID uUID8 = payment6.getBookingID();
        models.payment.Payment.PaymentType paymentType9 = models.payment.Payment.PaymentType.FINAL;
        payment6.setPaymentType(paymentType9);
        models.payment.PaymentMethod paymentMethod11 = payment6.getMethod();
        models.payment.Payment.PaymentType paymentType12 = payment6.getPaymentType();
        models.payment.Payment.PaymentStatus paymentStatus13 = payment6.getStatus();
        java.util.UUID uUID14 = payment6.getBookingID();
        models.payment.Payment.PaymentType paymentType15 = null;
        payment6.setPaymentType(paymentType15);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean17 = payment6.processPayment();
            org.junit.Assert.fail("Expected exception of type models.ParkingSystemException; message: Cannot process payment of a payment that is not pending.");
        } catch (models.ParkingSystemException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + paymentStatus4 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus4.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType5 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType5.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType7 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType7.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID8);
        org.junit.Assert.assertTrue("'" + paymentType9 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType9.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(paymentMethod11);
        org.junit.Assert.assertTrue("'" + paymentType12 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType12.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentStatus13 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus13.equals(models.payment.Payment.PaymentStatus.FAILED));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID14);
    }

    @Test
    public void test091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test091");
        java.util.UUID uUID0 = null;
        models.booking.Booking booking1 = null;
        models.payment.PaymentMethod paymentMethod3 = null;
        models.payment.Payment.PaymentStatus paymentStatus4 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType5 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment6 = new models.payment.Payment(uUID0, booking1, 100.0d, paymentMethod3, paymentStatus4, paymentType5);
        models.payment.Payment.PaymentType paymentType7 = models.payment.Payment.PaymentType.DEPOSIT;
        payment6.setPaymentType(paymentType7);
        java.util.UUID uUID9 = payment6.getBookingID();
        java.util.UUID uUID10 = null;
        models.booking.Booking booking11 = null;
        java.util.UUID uUID13 = null;
        models.booking.Booking booking14 = null;
        models.payment.PaymentMethod paymentMethod16 = null;
        models.payment.Payment.PaymentStatus paymentStatus17 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType18 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment19 = new models.payment.Payment(uUID13, booking14, 100.0d, paymentMethod16, paymentStatus17, paymentType18);
        models.payment.Payment.PaymentType paymentType20 = payment19.getPaymentType();
        java.util.UUID uUID21 = payment19.getBookingID();
        models.payment.Payment.PaymentType paymentType22 = models.payment.Payment.PaymentType.FINAL;
        payment19.setPaymentType(paymentType22);
        java.util.UUID uUID24 = payment19.getPaymentID();
        models.payment.PaymentMethod paymentMethod26 = models.payment.Payment.generateMethod("");
        payment19.setPaymentMethod(paymentMethod26);
        models.payment.Payment.PaymentStatus paymentStatus28 = models.payment.Payment.PaymentStatus.PENDING;
        models.payment.Payment.PaymentType paymentType29 = null;
        models.payment.Payment payment30 = new models.payment.Payment(uUID10, booking11, (double) (byte) 0, paymentMethod26, paymentStatus28, paymentType29);
        payment6.setPaymentMethod(paymentMethod26);
        models.payment.Payment.PaymentType paymentType32 = payment6.getPaymentType();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean33 = payment6.processPayment();
            org.junit.Assert.fail("Expected exception of type models.ParkingSystemException; message: Cannot process payment of a payment that is not pending.");
        } catch (models.ParkingSystemException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + paymentStatus4 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus4.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType5 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType5.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType7 + "' != '" + models.payment.Payment.PaymentType.DEPOSIT + "'", paymentType7.equals(models.payment.Payment.PaymentType.DEPOSIT));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID9);
        org.junit.Assert.assertTrue("'" + paymentStatus17 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus17.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType18 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType18.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType20 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType20.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID21);
        org.junit.Assert.assertTrue("'" + paymentType22 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType22.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod26);
        org.junit.Assert.assertTrue("'" + paymentStatus28 + "' != '" + models.payment.Payment.PaymentStatus.PENDING + "'", paymentStatus28.equals(models.payment.Payment.PaymentStatus.PENDING));
        org.junit.Assert.assertTrue("'" + paymentType32 + "' != '" + models.payment.Payment.PaymentType.DEPOSIT + "'", paymentType32.equals(models.payment.Payment.PaymentType.DEPOSIT));
    }

    @Test
    public void test092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test092");
        java.util.UUID uUID0 = null;
        models.booking.Booking booking1 = null;
        models.payment.PaymentMethod paymentMethod3 = null;
        models.payment.Payment.PaymentStatus paymentStatus4 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType5 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment6 = new models.payment.Payment(uUID0, booking1, 100.0d, paymentMethod3, paymentStatus4, paymentType5);
        models.payment.Payment.PaymentType paymentType7 = payment6.getPaymentType();
        java.util.UUID uUID8 = payment6.getBookingID();
        models.payment.Payment.PaymentType paymentType9 = models.payment.Payment.PaymentType.FINAL;
        payment6.setPaymentType(paymentType9);
        models.payment.PaymentMethod paymentMethod11 = payment6.getMethod();
        models.payment.Payment.PaymentType paymentType12 = payment6.getPaymentType();
        java.util.UUID uUID13 = null;
        models.booking.Booking booking14 = null;
        models.payment.PaymentMethod paymentMethod16 = null;
        models.payment.Payment.PaymentStatus paymentStatus17 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType18 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment19 = new models.payment.Payment(uUID13, booking14, 100.0d, paymentMethod16, paymentStatus17, paymentType18);
        java.util.UUID uUID20 = null;
        models.booking.Booking booking21 = null;
        java.util.UUID uUID23 = null;
        models.booking.Booking booking24 = null;
        models.payment.PaymentMethod paymentMethod26 = null;
        models.payment.Payment.PaymentStatus paymentStatus27 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType28 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment29 = new models.payment.Payment(uUID23, booking24, 100.0d, paymentMethod26, paymentStatus27, paymentType28);
        models.payment.Payment.PaymentType paymentType30 = payment29.getPaymentType();
        java.util.UUID uUID31 = payment29.getBookingID();
        models.payment.Payment.PaymentType paymentType32 = models.payment.Payment.PaymentType.FINAL;
        payment29.setPaymentType(paymentType32);
        java.util.UUID uUID34 = payment29.getPaymentID();
        models.payment.PaymentMethod paymentMethod36 = models.payment.Payment.generateMethod("");
        payment29.setPaymentMethod(paymentMethod36);
        models.payment.Payment.PaymentStatus paymentStatus38 = models.payment.Payment.PaymentStatus.PENDING;
        models.payment.Payment.PaymentType paymentType39 = null;
        models.payment.Payment payment40 = new models.payment.Payment(uUID20, booking21, (double) (byte) 0, paymentMethod36, paymentStatus38, paymentType39);
        payment19.setPaymentMethod(paymentMethod36);
        payment6.setPaymentMethod(paymentMethod36);
        models.booking.Booking booking44 = null;
        java.util.UUID uUID45 = null;
        models.booking.Booking booking46 = null;
        models.payment.PaymentMethod paymentMethod48 = null;
        models.payment.Payment.PaymentStatus paymentStatus49 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType50 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment51 = new models.payment.Payment(uUID45, booking46, 100.0d, paymentMethod48, paymentStatus49, paymentType50);
        models.payment.Payment.PaymentType paymentType52 = payment51.getPaymentType();
        java.util.UUID uUID53 = payment51.getBookingID();
        models.payment.Payment.PaymentType paymentType54 = models.payment.Payment.PaymentType.FINAL;
        payment51.setPaymentType(paymentType54);
        java.util.UUID uUID56 = payment51.getPaymentID();
        models.payment.PaymentMethod paymentMethod58 = models.payment.Payment.generateMethod("");
        payment51.setPaymentMethod(paymentMethod58);
        java.util.UUID uUID60 = null;
        models.booking.Booking booking61 = null;
        models.payment.PaymentMethod paymentMethod63 = null;
        models.payment.Payment.PaymentStatus paymentStatus64 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType65 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment66 = new models.payment.Payment(uUID60, booking61, (-1.0d), paymentMethod63, paymentStatus64, paymentType65);
        models.payment.Payment payment67 = new models.payment.Payment(0.0d, booking44, paymentMethod58, paymentType65);
        payment6.setPaymentType(paymentType65);
        org.junit.Assert.assertTrue("'" + paymentStatus4 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus4.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType5 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType5.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType7 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType7.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID8);
        org.junit.Assert.assertTrue("'" + paymentType9 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType9.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(paymentMethod11);
        org.junit.Assert.assertTrue("'" + paymentType12 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType12.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentStatus17 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus17.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType18 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType18.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentStatus27 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus27.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType28 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType28.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType30 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType30.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID31);
        org.junit.Assert.assertTrue("'" + paymentType32 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType32.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod36);
        org.junit.Assert.assertTrue("'" + paymentStatus38 + "' != '" + models.payment.Payment.PaymentStatus.PENDING + "'", paymentStatus38.equals(models.payment.Payment.PaymentStatus.PENDING));
        org.junit.Assert.assertTrue("'" + paymentStatus49 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus49.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType50 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType50.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType52 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType52.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID53);
        org.junit.Assert.assertTrue("'" + paymentType54 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType54.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod58);
        org.junit.Assert.assertTrue("'" + paymentStatus64 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus64.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType65 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType65.equals(models.payment.Payment.PaymentType.FINAL));
    }

    @Test
    public void test093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test093");
        models.booking.Booking booking1 = null;
        models.booking.Booking booking3 = null;
        java.util.UUID uUID4 = null;
        models.booking.Booking booking5 = null;
        models.payment.PaymentMethod paymentMethod7 = null;
        models.payment.Payment.PaymentStatus paymentStatus8 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType9 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment10 = new models.payment.Payment(uUID4, booking5, 100.0d, paymentMethod7, paymentStatus8, paymentType9);
        models.payment.Payment.PaymentType paymentType11 = payment10.getPaymentType();
        java.util.UUID uUID12 = payment10.getBookingID();
        models.payment.Payment.PaymentType paymentType13 = models.payment.Payment.PaymentType.FINAL;
        payment10.setPaymentType(paymentType13);
        java.util.UUID uUID15 = payment10.getPaymentID();
        models.payment.PaymentMethod paymentMethod17 = models.payment.Payment.generateMethod("");
        payment10.setPaymentMethod(paymentMethod17);
        java.util.UUID uUID19 = null;
        models.booking.Booking booking20 = null;
        models.payment.PaymentMethod paymentMethod22 = null;
        models.payment.Payment.PaymentStatus paymentStatus23 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType24 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment25 = new models.payment.Payment(uUID19, booking20, 100.0d, paymentMethod22, paymentStatus23, paymentType24);
        models.payment.Payment.PaymentType paymentType26 = payment25.getPaymentType();
        models.payment.Payment.PaymentType paymentType27 = payment25.getPaymentType();
        models.payment.Payment payment28 = new models.payment.Payment((double) 10, booking3, paymentMethod17, paymentType27);
        java.util.UUID uUID29 = null;
        models.booking.Booking booking30 = null;
        models.payment.PaymentMethod paymentMethod32 = null;
        models.payment.Payment.PaymentStatus paymentStatus33 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType34 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment35 = new models.payment.Payment(uUID29, booking30, 100.0d, paymentMethod32, paymentStatus33, paymentType34);
        models.payment.Payment payment36 = new models.payment.Payment((double) '4', booking1, paymentMethod17, paymentType34);
        models.booking.Booking booking37 = payment36.getBooking();
        boolean boolean38 = payment36.processPayment();
        models.booking.Booking booking39 = payment36.getBooking();
        org.junit.Assert.assertTrue("'" + paymentStatus8 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus8.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType9 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType9.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType11 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType11.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID12);
        org.junit.Assert.assertTrue("'" + paymentType13 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType13.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod17);
        org.junit.Assert.assertTrue("'" + paymentStatus23 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus23.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType24 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType24.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType26 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType26.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType27 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType27.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentStatus33 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus33.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType34 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType34.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(booking37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(booking39);
    }

    @Test
    public void test094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test094");
        java.util.UUID uUID0 = null;
        models.booking.Booking booking1 = null;
        java.util.UUID uUID3 = null;
        models.booking.Booking booking4 = null;
        models.payment.PaymentMethod paymentMethod6 = null;
        models.payment.Payment.PaymentStatus paymentStatus7 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType8 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment9 = new models.payment.Payment(uUID3, booking4, 100.0d, paymentMethod6, paymentStatus7, paymentType8);
        java.util.UUID uUID10 = null;
        models.booking.Booking booking11 = null;
        java.util.UUID uUID13 = null;
        models.booking.Booking booking14 = null;
        models.payment.PaymentMethod paymentMethod16 = null;
        models.payment.Payment.PaymentStatus paymentStatus17 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType18 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment19 = new models.payment.Payment(uUID13, booking14, 100.0d, paymentMethod16, paymentStatus17, paymentType18);
        models.payment.Payment.PaymentType paymentType20 = payment19.getPaymentType();
        java.util.UUID uUID21 = payment19.getBookingID();
        models.payment.Payment.PaymentType paymentType22 = models.payment.Payment.PaymentType.FINAL;
        payment19.setPaymentType(paymentType22);
        java.util.UUID uUID24 = payment19.getPaymentID();
        models.payment.PaymentMethod paymentMethod26 = models.payment.Payment.generateMethod("");
        payment19.setPaymentMethod(paymentMethod26);
        models.payment.Payment.PaymentStatus paymentStatus28 = models.payment.Payment.PaymentStatus.PENDING;
        models.payment.Payment.PaymentType paymentType29 = null;
        models.payment.Payment payment30 = new models.payment.Payment(uUID10, booking11, (double) (byte) 0, paymentMethod26, paymentStatus28, paymentType29);
        payment9.setPaymentMethod(paymentMethod26);
        java.util.UUID uUID32 = null;
        models.booking.Booking booking33 = null;
        java.util.UUID uUID35 = null;
        models.booking.Booking booking36 = null;
        models.payment.PaymentMethod paymentMethod38 = null;
        models.payment.Payment.PaymentStatus paymentStatus39 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType40 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment41 = new models.payment.Payment(uUID35, booking36, 100.0d, paymentMethod38, paymentStatus39, paymentType40);
        models.payment.Payment.PaymentType paymentType42 = payment41.getPaymentType();
        java.util.UUID uUID43 = payment41.getBookingID();
        models.payment.Payment.PaymentType paymentType44 = models.payment.Payment.PaymentType.FINAL;
        payment41.setPaymentType(paymentType44);
        java.util.UUID uUID46 = payment41.getPaymentID();
        models.payment.PaymentMethod paymentMethod48 = models.payment.Payment.generateMethod("");
        payment41.setPaymentMethod(paymentMethod48);
        models.payment.Payment.PaymentStatus paymentStatus50 = models.payment.Payment.PaymentStatus.PENDING;
        models.payment.Payment.PaymentType paymentType51 = null;
        models.payment.Payment payment52 = new models.payment.Payment(uUID32, booking33, (double) (byte) 0, paymentMethod48, paymentStatus50, paymentType51);
        models.payment.Payment.PaymentStatus paymentStatus53 = payment52.getStatus();
        java.util.UUID uUID54 = null;
        models.booking.Booking booking55 = null;
        models.payment.PaymentMethod paymentMethod57 = null;
        models.payment.Payment.PaymentStatus paymentStatus58 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType59 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment60 = new models.payment.Payment(uUID54, booking55, 100.0d, paymentMethod57, paymentStatus58, paymentType59);
        models.payment.Payment.PaymentType paymentType61 = payment60.getPaymentType();
        java.util.UUID uUID62 = payment60.getBookingID();
        models.payment.Payment.PaymentType paymentType63 = models.payment.Payment.PaymentType.FINAL;
        payment60.setPaymentType(paymentType63);
        models.payment.Payment payment65 = new models.payment.Payment(uUID0, booking1, (double) 'a', paymentMethod26, paymentStatus53, paymentType63);
        double double66 = payment65.getAmount();
        models.payment.Payment.PaymentStatus paymentStatus67 = payment65.getStatus();
        org.junit.Assert.assertTrue("'" + paymentStatus7 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus7.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType8 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType8.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentStatus17 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus17.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType18 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType18.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType20 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType20.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID21);
        org.junit.Assert.assertTrue("'" + paymentType22 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType22.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod26);
        org.junit.Assert.assertTrue("'" + paymentStatus28 + "' != '" + models.payment.Payment.PaymentStatus.PENDING + "'", paymentStatus28.equals(models.payment.Payment.PaymentStatus.PENDING));
        org.junit.Assert.assertTrue("'" + paymentStatus39 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus39.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType40 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType40.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType42 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType42.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID43);
        org.junit.Assert.assertTrue("'" + paymentType44 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType44.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod48);
        org.junit.Assert.assertTrue("'" + paymentStatus50 + "' != '" + models.payment.Payment.PaymentStatus.PENDING + "'", paymentStatus50.equals(models.payment.Payment.PaymentStatus.PENDING));
        org.junit.Assert.assertTrue("'" + paymentStatus53 + "' != '" + models.payment.Payment.PaymentStatus.PENDING + "'", paymentStatus53.equals(models.payment.Payment.PaymentStatus.PENDING));
        org.junit.Assert.assertTrue("'" + paymentStatus58 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus58.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType59 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType59.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType61 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType61.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID62);
        org.junit.Assert.assertTrue("'" + paymentType63 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType63.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 97.0d + "'", double66 == 97.0d);
        org.junit.Assert.assertTrue("'" + paymentStatus67 + "' != '" + models.payment.Payment.PaymentStatus.PENDING + "'", paymentStatus67.equals(models.payment.Payment.PaymentStatus.PENDING));
    }

    @Test
    public void test095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test095");
        java.util.UUID uUID0 = null;
        models.booking.Booking booking1 = null;
        models.payment.PaymentMethod paymentMethod3 = null;
        models.payment.Payment.PaymentStatus paymentStatus4 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType5 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment6 = new models.payment.Payment(uUID0, booking1, 100.0d, paymentMethod3, paymentStatus4, paymentType5);
        models.payment.Payment.PaymentType paymentType7 = payment6.getPaymentType();
        java.util.UUID uUID8 = payment6.getBookingID();
        models.payment.Payment.PaymentType paymentType9 = models.payment.Payment.PaymentType.FINAL;
        payment6.setPaymentType(paymentType9);
        java.util.UUID uUID11 = payment6.getPaymentID();
        double double12 = payment6.getAmount();
        java.util.UUID uUID13 = null;
        models.booking.Booking booking14 = null;
        models.payment.PaymentMethod paymentMethod16 = null;
        models.payment.Payment.PaymentStatus paymentStatus17 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType18 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment19 = new models.payment.Payment(uUID13, booking14, 100.0d, paymentMethod16, paymentStatus17, paymentType18);
        payment6.setPaymentType(paymentType18);
        models.payment.Payment.PaymentStatus paymentStatus21 = payment6.getStatus();
        models.payment.PaymentMethod paymentMethod22 = payment6.getMethod();
        double double23 = payment6.getAmount();
        org.junit.Assert.assertTrue("'" + paymentStatus4 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus4.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType5 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType5.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType7 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType7.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID8);
        org.junit.Assert.assertTrue("'" + paymentType9 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType9.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 100.0d + "'", double12 == 100.0d);
        org.junit.Assert.assertTrue("'" + paymentStatus17 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus17.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType18 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType18.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentStatus21 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus21.equals(models.payment.Payment.PaymentStatus.FAILED));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(paymentMethod22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 100.0d + "'", double23 == 100.0d);
    }

    @Test
    public void test096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test096");
        models.booking.Booking booking1 = null;
        models.booking.Booking booking3 = null;
        java.util.UUID uUID4 = null;
        models.booking.Booking booking5 = null;
        models.payment.PaymentMethod paymentMethod7 = null;
        models.payment.Payment.PaymentStatus paymentStatus8 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType9 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment10 = new models.payment.Payment(uUID4, booking5, 100.0d, paymentMethod7, paymentStatus8, paymentType9);
        models.payment.Payment.PaymentType paymentType11 = payment10.getPaymentType();
        java.util.UUID uUID12 = payment10.getBookingID();
        models.payment.Payment.PaymentType paymentType13 = models.payment.Payment.PaymentType.FINAL;
        payment10.setPaymentType(paymentType13);
        java.util.UUID uUID15 = payment10.getPaymentID();
        models.payment.PaymentMethod paymentMethod17 = models.payment.Payment.generateMethod("");
        payment10.setPaymentMethod(paymentMethod17);
        java.util.UUID uUID19 = null;
        models.booking.Booking booking20 = null;
        models.payment.PaymentMethod paymentMethod22 = null;
        models.payment.Payment.PaymentStatus paymentStatus23 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType24 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment25 = new models.payment.Payment(uUID19, booking20, 100.0d, paymentMethod22, paymentStatus23, paymentType24);
        models.payment.Payment.PaymentType paymentType26 = payment25.getPaymentType();
        models.payment.Payment.PaymentType paymentType27 = payment25.getPaymentType();
        models.payment.Payment payment28 = new models.payment.Payment((double) 10, booking3, paymentMethod17, paymentType27);
        java.util.UUID uUID29 = null;
        models.booking.Booking booking30 = null;
        models.payment.PaymentMethod paymentMethod32 = null;
        models.payment.Payment.PaymentStatus paymentStatus33 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType34 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment35 = new models.payment.Payment(uUID29, booking30, 100.0d, paymentMethod32, paymentStatus33, paymentType34);
        models.payment.Payment.PaymentType paymentType36 = payment35.getPaymentType();
        java.util.UUID uUID37 = payment35.getBookingID();
        models.payment.Payment.PaymentType paymentType38 = models.payment.Payment.PaymentType.FINAL;
        payment35.setPaymentType(paymentType38);
        models.payment.PaymentMethod paymentMethod40 = payment35.getMethod();
        models.payment.Payment.PaymentType paymentType41 = payment35.getPaymentType();
        models.payment.Payment payment42 = new models.payment.Payment((double) 0, booking1, paymentMethod17, paymentType41);
        double double43 = payment42.getAmount();
        double double44 = payment42.getAmount();
        java.util.UUID uUID45 = payment42.getPaymentID();
        org.junit.Assert.assertTrue("'" + paymentStatus8 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus8.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType9 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType9.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType11 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType11.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID12);
        org.junit.Assert.assertTrue("'" + paymentType13 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType13.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod17);
        org.junit.Assert.assertTrue("'" + paymentStatus23 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus23.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType24 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType24.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType26 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType26.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType27 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType27.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentStatus33 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus33.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType34 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType34.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType36 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType36.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID37);
        org.junit.Assert.assertTrue("'" + paymentType38 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType38.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(paymentMethod40);
        org.junit.Assert.assertTrue("'" + paymentType41 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType41.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.0d + "'", double44 == 0.0d);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(uUID45);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(uUID45.toString(), "7c4b39af-cbee-4550-b984-c0f3e48dab40");
    }

    @Test
    public void test097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test097");
        java.util.UUID uUID0 = null;
        models.booking.Booking booking1 = null;
        models.payment.PaymentMethod paymentMethod3 = null;
        models.payment.Payment.PaymentStatus paymentStatus4 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType5 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment6 = new models.payment.Payment(uUID0, booking1, (-1.0d), paymentMethod3, paymentStatus4, paymentType5);
        double double7 = payment6.getAmount();
        org.junit.Assert.assertTrue("'" + paymentStatus4 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus4.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType5 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType5.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1.0d) + "'", double7 == (-1.0d));
    }

    @Test
    public void test098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test098");
        models.booking.Booking booking1 = null;
        models.booking.Booking booking3 = null;
        java.util.UUID uUID4 = null;
        models.booking.Booking booking5 = null;
        models.payment.PaymentMethod paymentMethod7 = null;
        models.payment.Payment.PaymentStatus paymentStatus8 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType9 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment10 = new models.payment.Payment(uUID4, booking5, 100.0d, paymentMethod7, paymentStatus8, paymentType9);
        models.payment.Payment.PaymentType paymentType11 = payment10.getPaymentType();
        java.util.UUID uUID12 = payment10.getBookingID();
        models.payment.Payment.PaymentType paymentType13 = models.payment.Payment.PaymentType.FINAL;
        payment10.setPaymentType(paymentType13);
        java.util.UUID uUID15 = payment10.getPaymentID();
        models.payment.PaymentMethod paymentMethod17 = models.payment.Payment.generateMethod("");
        payment10.setPaymentMethod(paymentMethod17);
        java.util.UUID uUID19 = null;
        models.booking.Booking booking20 = null;
        models.payment.PaymentMethod paymentMethod22 = null;
        models.payment.Payment.PaymentStatus paymentStatus23 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType24 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment25 = new models.payment.Payment(uUID19, booking20, 100.0d, paymentMethod22, paymentStatus23, paymentType24);
        models.payment.Payment.PaymentType paymentType26 = payment25.getPaymentType();
        models.payment.Payment.PaymentType paymentType27 = payment25.getPaymentType();
        models.payment.Payment payment28 = new models.payment.Payment((double) 10, booking3, paymentMethod17, paymentType27);
        java.util.UUID uUID29 = null;
        models.booking.Booking booking30 = null;
        models.payment.PaymentMethod paymentMethod32 = null;
        models.payment.Payment.PaymentStatus paymentStatus33 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType34 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment35 = new models.payment.Payment(uUID29, booking30, 100.0d, paymentMethod32, paymentStatus33, paymentType34);
        models.payment.Payment.PaymentType paymentType36 = payment35.getPaymentType();
        java.util.UUID uUID37 = payment35.getBookingID();
        models.payment.Payment.PaymentType paymentType38 = models.payment.Payment.PaymentType.FINAL;
        payment35.setPaymentType(paymentType38);
        models.payment.PaymentMethod paymentMethod40 = payment35.getMethod();
        models.payment.Payment.PaymentType paymentType41 = payment35.getPaymentType();
        models.payment.Payment payment42 = new models.payment.Payment((double) 0, booking1, paymentMethod17, paymentType41);
        java.util.UUID uUID43 = payment42.getBookingID();
        boolean boolean44 = payment42.processPayment();
        models.booking.Booking booking45 = payment42.getBooking();
        org.junit.Assert.assertTrue("'" + paymentStatus8 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus8.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType9 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType9.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType11 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType11.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID12);
        org.junit.Assert.assertTrue("'" + paymentType13 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType13.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod17);
        org.junit.Assert.assertTrue("'" + paymentStatus23 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus23.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType24 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType24.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType26 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType26.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType27 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType27.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentStatus33 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus33.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType34 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType34.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType36 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType36.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID37);
        org.junit.Assert.assertTrue("'" + paymentType38 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType38.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(paymentMethod40);
        org.junit.Assert.assertTrue("'" + paymentType41 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType41.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(booking45);
    }

    @Test
    public void test099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test099");
        models.booking.Booking booking1 = null;
        models.booking.Booking booking3 = null;
        models.booking.Booking booking5 = null;
        models.payment.PaymentMethod paymentMethod7 = models.payment.Payment.generateMethod("");
        models.payment.Payment.PaymentType paymentType8 = null;
        models.payment.Payment payment9 = new models.payment.Payment(1.0d, booking5, paymentMethod7, paymentType8);
        models.payment.Payment.PaymentType paymentType10 = null;
        models.payment.Payment payment11 = new models.payment.Payment(97.0d, booking3, paymentMethod7, paymentType10);
        java.util.UUID uUID12 = null;
        models.booking.Booking booking13 = null;
        models.booking.Booking booking16 = null;
        java.util.UUID uUID17 = null;
        models.booking.Booking booking18 = null;
        models.payment.PaymentMethod paymentMethod20 = null;
        models.payment.Payment.PaymentStatus paymentStatus21 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType22 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment23 = new models.payment.Payment(uUID17, booking18, 100.0d, paymentMethod20, paymentStatus21, paymentType22);
        models.payment.Payment.PaymentType paymentType24 = payment23.getPaymentType();
        java.util.UUID uUID25 = payment23.getBookingID();
        models.payment.Payment.PaymentType paymentType26 = models.payment.Payment.PaymentType.FINAL;
        payment23.setPaymentType(paymentType26);
        java.util.UUID uUID28 = payment23.getPaymentID();
        models.payment.PaymentMethod paymentMethod30 = models.payment.Payment.generateMethod("");
        payment23.setPaymentMethod(paymentMethod30);
        java.util.UUID uUID32 = null;
        models.booking.Booking booking33 = null;
        models.payment.PaymentMethod paymentMethod35 = null;
        models.payment.Payment.PaymentStatus paymentStatus36 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType37 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment38 = new models.payment.Payment(uUID32, booking33, 100.0d, paymentMethod35, paymentStatus36, paymentType37);
        models.payment.Payment.PaymentType paymentType39 = payment38.getPaymentType();
        models.payment.Payment.PaymentType paymentType40 = payment38.getPaymentType();
        models.payment.Payment payment41 = new models.payment.Payment((double) 10, booking16, paymentMethod30, paymentType40);
        java.util.UUID uUID42 = null;
        models.booking.Booking booking43 = null;
        models.payment.PaymentMethod paymentMethod46 = models.payment.Payment.generateMethod("");
        java.util.UUID uUID47 = null;
        models.booking.Booking booking48 = null;
        models.payment.PaymentMethod paymentMethod50 = null;
        models.payment.Payment.PaymentStatus paymentStatus51 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType52 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment53 = new models.payment.Payment(uUID47, booking48, 100.0d, paymentMethod50, paymentStatus51, paymentType52);
        models.payment.Payment.PaymentStatus paymentStatus54 = payment53.getStatus();
        java.util.UUID uUID55 = null;
        models.booking.Booking booking56 = null;
        models.payment.PaymentMethod paymentMethod58 = null;
        models.payment.Payment.PaymentStatus paymentStatus59 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType60 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment61 = new models.payment.Payment(uUID55, booking56, 100.0d, paymentMethod58, paymentStatus59, paymentType60);
        models.payment.Payment.PaymentType paymentType62 = payment61.getPaymentType();
        java.util.UUID uUID63 = payment61.getBookingID();
        models.payment.Payment.PaymentType paymentType64 = models.payment.Payment.PaymentType.FINAL;
        payment61.setPaymentType(paymentType64);
        models.payment.PaymentMethod paymentMethod66 = payment61.getMethod();
        models.payment.Payment.PaymentType paymentType67 = payment61.getPaymentType();
        models.payment.Payment payment68 = new models.payment.Payment(uUID42, booking43, (double) 1L, paymentMethod46, paymentStatus54, paymentType67);
        java.util.UUID uUID69 = null;
        models.booking.Booking booking70 = null;
        models.payment.PaymentMethod paymentMethod72 = null;
        models.payment.Payment.PaymentStatus paymentStatus73 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType74 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment75 = new models.payment.Payment(uUID69, booking70, (-1.0d), paymentMethod72, paymentStatus73, paymentType74);
        models.payment.Payment payment76 = new models.payment.Payment(uUID12, booking13, (double) (byte) 0, paymentMethod30, paymentStatus54, paymentType74);
        models.payment.Payment.PaymentType paymentType77 = models.payment.Payment.PaymentType.REFUND;
        payment76.setPaymentType(paymentType77);
        models.payment.Payment.PaymentType paymentType79 = payment76.getPaymentType();
        models.payment.Payment payment80 = new models.payment.Payment(0.0d, booking1, paymentMethod7, paymentType79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod7);
        org.junit.Assert.assertTrue("'" + paymentStatus21 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus21.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType22 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType22.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType24 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType24.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID25);
        org.junit.Assert.assertTrue("'" + paymentType26 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType26.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod30);
        org.junit.Assert.assertTrue("'" + paymentStatus36 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus36.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType37 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType37.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType39 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType39.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType40 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType40.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod46);
        org.junit.Assert.assertTrue("'" + paymentStatus51 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus51.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType52 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType52.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentStatus54 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus54.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentStatus59 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus59.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType60 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType60.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType62 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType62.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID63);
        org.junit.Assert.assertTrue("'" + paymentType64 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType64.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(paymentMethod66);
        org.junit.Assert.assertTrue("'" + paymentType67 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType67.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentStatus73 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus73.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType74 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType74.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType77 + "' != '" + models.payment.Payment.PaymentType.REFUND + "'", paymentType77.equals(models.payment.Payment.PaymentType.REFUND));
        org.junit.Assert.assertTrue("'" + paymentType79 + "' != '" + models.payment.Payment.PaymentType.REFUND + "'", paymentType79.equals(models.payment.Payment.PaymentType.REFUND));
    }

    @Test
    public void test100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test100");
        java.util.UUID uUID0 = null;
        models.booking.Booking booking1 = null;
        java.util.UUID uUID3 = null;
        models.booking.Booking booking4 = null;
        models.payment.PaymentMethod paymentMethod6 = null;
        models.payment.Payment.PaymentStatus paymentStatus7 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType8 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment9 = new models.payment.Payment(uUID3, booking4, 100.0d, paymentMethod6, paymentStatus7, paymentType8);
        models.payment.Payment.PaymentType paymentType10 = payment9.getPaymentType();
        java.util.UUID uUID11 = payment9.getBookingID();
        models.payment.Payment.PaymentType paymentType12 = models.payment.Payment.PaymentType.FINAL;
        payment9.setPaymentType(paymentType12);
        java.util.UUID uUID14 = payment9.getPaymentID();
        models.payment.PaymentMethod paymentMethod16 = models.payment.Payment.generateMethod("");
        payment9.setPaymentMethod(paymentMethod16);
        models.payment.Payment.PaymentStatus paymentStatus18 = models.payment.Payment.PaymentStatus.PENDING;
        models.payment.Payment.PaymentType paymentType19 = null;
        models.payment.Payment payment20 = new models.payment.Payment(uUID0, booking1, (double) (byte) 0, paymentMethod16, paymentStatus18, paymentType19);
        models.payment.Payment.PaymentStatus paymentStatus21 = payment20.getStatus();
        boolean boolean22 = payment20.processPayment();
        models.payment.PaymentMethod paymentMethod23 = payment20.getMethod();
        models.payment.Payment.PaymentStatus paymentStatus24 = payment20.getStatus();
        org.junit.Assert.assertTrue("'" + paymentStatus7 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus7.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType8 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType8.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType10 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType10.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID11);
        org.junit.Assert.assertTrue("'" + paymentType12 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType12.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod16);
        org.junit.Assert.assertTrue("'" + paymentStatus18 + "' != '" + models.payment.Payment.PaymentStatus.PENDING + "'", paymentStatus18.equals(models.payment.Payment.PaymentStatus.PENDING));
        org.junit.Assert.assertTrue("'" + paymentStatus21 + "' != '" + models.payment.Payment.PaymentStatus.PENDING + "'", paymentStatus21.equals(models.payment.Payment.PaymentStatus.PENDING));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod23);
        org.junit.Assert.assertTrue("'" + paymentStatus24 + "' != '" + models.payment.Payment.PaymentStatus.PAID + "'", paymentStatus24.equals(models.payment.Payment.PaymentStatus.PAID));
    }

    @Test
    public void test101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test101");
        java.util.UUID uUID0 = null;
        models.booking.Booking booking1 = null;
        models.payment.PaymentMethod paymentMethod3 = null;
        models.payment.Payment.PaymentStatus paymentStatus4 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType5 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment6 = new models.payment.Payment(uUID0, booking1, (-1.0d), paymentMethod3, paymentStatus4, paymentType5);
        models.booking.Booking booking7 = payment6.getBooking();
        models.payment.Payment.PaymentStatus paymentStatus8 = payment6.getStatus();
        models.payment.Payment.PaymentType paymentType9 = payment6.getPaymentType();
        double double10 = payment6.getAmount();
        org.junit.Assert.assertTrue("'" + paymentStatus4 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus4.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType5 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType5.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(booking7);
        org.junit.Assert.assertTrue("'" + paymentStatus8 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus8.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType9 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType9.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + (-1.0d) + "'", double10 == (-1.0d));
    }

    @Test
    public void test102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test102");
        java.util.UUID uUID0 = null;
        models.booking.Booking booking1 = null;
        java.util.UUID uUID3 = null;
        models.booking.Booking booking4 = null;
        models.payment.PaymentMethod paymentMethod6 = null;
        models.payment.Payment.PaymentStatus paymentStatus7 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType8 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment9 = new models.payment.Payment(uUID3, booking4, 100.0d, paymentMethod6, paymentStatus7, paymentType8);
        models.payment.Payment.PaymentType paymentType10 = payment9.getPaymentType();
        java.util.UUID uUID11 = payment9.getBookingID();
        models.payment.Payment.PaymentType paymentType12 = models.payment.Payment.PaymentType.FINAL;
        payment9.setPaymentType(paymentType12);
        java.util.UUID uUID14 = payment9.getPaymentID();
        models.payment.PaymentMethod paymentMethod16 = models.payment.Payment.generateMethod("");
        payment9.setPaymentMethod(paymentMethod16);
        java.util.UUID uUID18 = null;
        models.booking.Booking booking19 = null;
        models.payment.PaymentMethod paymentMethod21 = null;
        models.payment.Payment.PaymentStatus paymentStatus22 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType23 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment24 = new models.payment.Payment(uUID18, booking19, 100.0d, paymentMethod21, paymentStatus22, paymentType23);
        models.payment.Payment.PaymentType paymentType25 = payment24.getPaymentType();
        java.util.UUID uUID26 = payment24.getBookingID();
        models.payment.Payment.PaymentType paymentType27 = models.payment.Payment.PaymentType.FINAL;
        payment24.setPaymentType(paymentType27);
        models.payment.PaymentMethod paymentMethod29 = payment24.getMethod();
        models.payment.Payment.PaymentType paymentType30 = payment24.getPaymentType();
        models.payment.Payment.PaymentStatus paymentStatus31 = payment24.getStatus();
        models.payment.Payment.PaymentType paymentType32 = models.payment.Payment.PaymentType.REFUND;
        models.payment.Payment payment33 = new models.payment.Payment(uUID0, booking1, (double) '#', paymentMethod16, paymentStatus31, paymentType32);
        java.lang.Class<?> wildcardClass34 = paymentStatus31.getClass();
        org.junit.Assert.assertTrue("'" + paymentStatus7 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus7.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType8 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType8.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType10 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType10.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID11);
        org.junit.Assert.assertTrue("'" + paymentType12 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType12.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod16);
        org.junit.Assert.assertTrue("'" + paymentStatus22 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus22.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType23 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType23.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType25 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType25.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID26);
        org.junit.Assert.assertTrue("'" + paymentType27 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType27.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(paymentMethod29);
        org.junit.Assert.assertTrue("'" + paymentType30 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType30.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentStatus31 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus31.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType32 + "' != '" + models.payment.Payment.PaymentType.REFUND + "'", paymentType32.equals(models.payment.Payment.PaymentType.REFUND));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass34);
    }

    @Test
    public void test103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test103");
        java.util.UUID uUID0 = null;
        models.booking.Booking booking1 = null;
        models.booking.Booking booking4 = null;
        java.util.UUID uUID5 = null;
        models.booking.Booking booking6 = null;
        models.payment.PaymentMethod paymentMethod8 = null;
        models.payment.Payment.PaymentStatus paymentStatus9 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType10 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment11 = new models.payment.Payment(uUID5, booking6, 100.0d, paymentMethod8, paymentStatus9, paymentType10);
        models.payment.Payment.PaymentType paymentType12 = payment11.getPaymentType();
        java.util.UUID uUID13 = payment11.getBookingID();
        models.payment.Payment.PaymentType paymentType14 = models.payment.Payment.PaymentType.FINAL;
        payment11.setPaymentType(paymentType14);
        java.util.UUID uUID16 = payment11.getPaymentID();
        models.payment.PaymentMethod paymentMethod18 = models.payment.Payment.generateMethod("");
        payment11.setPaymentMethod(paymentMethod18);
        java.util.UUID uUID20 = null;
        models.booking.Booking booking21 = null;
        models.payment.PaymentMethod paymentMethod23 = null;
        models.payment.Payment.PaymentStatus paymentStatus24 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType25 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment26 = new models.payment.Payment(uUID20, booking21, 100.0d, paymentMethod23, paymentStatus24, paymentType25);
        models.payment.Payment.PaymentType paymentType27 = payment26.getPaymentType();
        models.payment.Payment.PaymentType paymentType28 = payment26.getPaymentType();
        models.payment.Payment payment29 = new models.payment.Payment((double) 10, booking4, paymentMethod18, paymentType28);
        java.util.UUID uUID30 = null;
        models.booking.Booking booking31 = null;
        models.payment.PaymentMethod paymentMethod34 = models.payment.Payment.generateMethod("");
        java.util.UUID uUID35 = null;
        models.booking.Booking booking36 = null;
        models.payment.PaymentMethod paymentMethod38 = null;
        models.payment.Payment.PaymentStatus paymentStatus39 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType40 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment41 = new models.payment.Payment(uUID35, booking36, 100.0d, paymentMethod38, paymentStatus39, paymentType40);
        models.payment.Payment.PaymentStatus paymentStatus42 = payment41.getStatus();
        java.util.UUID uUID43 = null;
        models.booking.Booking booking44 = null;
        models.payment.PaymentMethod paymentMethod46 = null;
        models.payment.Payment.PaymentStatus paymentStatus47 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType48 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment49 = new models.payment.Payment(uUID43, booking44, 100.0d, paymentMethod46, paymentStatus47, paymentType48);
        models.payment.Payment.PaymentType paymentType50 = payment49.getPaymentType();
        java.util.UUID uUID51 = payment49.getBookingID();
        models.payment.Payment.PaymentType paymentType52 = models.payment.Payment.PaymentType.FINAL;
        payment49.setPaymentType(paymentType52);
        models.payment.PaymentMethod paymentMethod54 = payment49.getMethod();
        models.payment.Payment.PaymentType paymentType55 = payment49.getPaymentType();
        models.payment.Payment payment56 = new models.payment.Payment(uUID30, booking31, (double) 1L, paymentMethod34, paymentStatus42, paymentType55);
        java.util.UUID uUID57 = null;
        models.booking.Booking booking58 = null;
        models.payment.PaymentMethod paymentMethod60 = null;
        models.payment.Payment.PaymentStatus paymentStatus61 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType62 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment63 = new models.payment.Payment(uUID57, booking58, (-1.0d), paymentMethod60, paymentStatus61, paymentType62);
        models.payment.Payment payment64 = new models.payment.Payment(uUID0, booking1, (double) (byte) 0, paymentMethod18, paymentStatus42, paymentType62);
        models.payment.Payment.PaymentType paymentType65 = models.payment.Payment.PaymentType.REFUND;
        payment64.setPaymentType(paymentType65);
        java.util.UUID uUID67 = payment64.getBookingID();
        double double68 = payment64.getAmount();
        models.payment.PaymentMethod paymentMethod69 = payment64.getMethod();
        org.junit.Assert.assertTrue("'" + paymentStatus9 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus9.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType10 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType10.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType12 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType12.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID13);
        org.junit.Assert.assertTrue("'" + paymentType14 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType14.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod18);
        org.junit.Assert.assertTrue("'" + paymentStatus24 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus24.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType25 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType25.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType27 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType27.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType28 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType28.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod34);
        org.junit.Assert.assertTrue("'" + paymentStatus39 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus39.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType40 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType40.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentStatus42 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus42.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentStatus47 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus47.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType48 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType48.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType50 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType50.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID51);
        org.junit.Assert.assertTrue("'" + paymentType52 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType52.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(paymentMethod54);
        org.junit.Assert.assertTrue("'" + paymentType55 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType55.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentStatus61 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus61.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType62 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType62.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType65 + "' != '" + models.payment.Payment.PaymentType.REFUND + "'", paymentType65.equals(models.payment.Payment.PaymentType.REFUND));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 0.0d + "'", double68 == 0.0d);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod69);
    }

    @Test
    public void test104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test104");
        java.util.UUID uUID0 = null;
        models.booking.Booking booking1 = null;
        java.util.UUID uUID3 = null;
        models.booking.Booking booking4 = null;
        models.payment.PaymentMethod paymentMethod6 = null;
        models.payment.Payment.PaymentStatus paymentStatus7 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType8 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment9 = new models.payment.Payment(uUID3, booking4, 100.0d, paymentMethod6, paymentStatus7, paymentType8);
        java.util.UUID uUID10 = null;
        models.booking.Booking booking11 = null;
        java.util.UUID uUID13 = null;
        models.booking.Booking booking14 = null;
        models.payment.PaymentMethod paymentMethod16 = null;
        models.payment.Payment.PaymentStatus paymentStatus17 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType18 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment19 = new models.payment.Payment(uUID13, booking14, 100.0d, paymentMethod16, paymentStatus17, paymentType18);
        models.payment.Payment.PaymentType paymentType20 = payment19.getPaymentType();
        java.util.UUID uUID21 = payment19.getBookingID();
        models.payment.Payment.PaymentType paymentType22 = models.payment.Payment.PaymentType.FINAL;
        payment19.setPaymentType(paymentType22);
        java.util.UUID uUID24 = payment19.getPaymentID();
        models.payment.PaymentMethod paymentMethod26 = models.payment.Payment.generateMethod("");
        payment19.setPaymentMethod(paymentMethod26);
        models.payment.Payment.PaymentStatus paymentStatus28 = models.payment.Payment.PaymentStatus.PENDING;
        models.payment.Payment.PaymentType paymentType29 = null;
        models.payment.Payment payment30 = new models.payment.Payment(uUID10, booking11, (double) (byte) 0, paymentMethod26, paymentStatus28, paymentType29);
        payment9.setPaymentMethod(paymentMethod26);
        java.util.UUID uUID32 = null;
        models.booking.Booking booking33 = null;
        java.util.UUID uUID35 = null;
        models.booking.Booking booking36 = null;
        models.payment.PaymentMethod paymentMethod38 = null;
        models.payment.Payment.PaymentStatus paymentStatus39 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType40 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment41 = new models.payment.Payment(uUID35, booking36, 100.0d, paymentMethod38, paymentStatus39, paymentType40);
        models.payment.Payment.PaymentType paymentType42 = payment41.getPaymentType();
        java.util.UUID uUID43 = payment41.getBookingID();
        models.payment.Payment.PaymentType paymentType44 = models.payment.Payment.PaymentType.FINAL;
        payment41.setPaymentType(paymentType44);
        java.util.UUID uUID46 = payment41.getPaymentID();
        models.payment.PaymentMethod paymentMethod48 = models.payment.Payment.generateMethod("");
        payment41.setPaymentMethod(paymentMethod48);
        models.payment.Payment.PaymentStatus paymentStatus50 = models.payment.Payment.PaymentStatus.PENDING;
        models.payment.Payment.PaymentType paymentType51 = null;
        models.payment.Payment payment52 = new models.payment.Payment(uUID32, booking33, (double) (byte) 0, paymentMethod48, paymentStatus50, paymentType51);
        models.payment.Payment.PaymentStatus paymentStatus53 = payment52.getStatus();
        java.util.UUID uUID54 = null;
        models.booking.Booking booking55 = null;
        models.payment.PaymentMethod paymentMethod57 = null;
        models.payment.Payment.PaymentStatus paymentStatus58 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType59 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment60 = new models.payment.Payment(uUID54, booking55, 100.0d, paymentMethod57, paymentStatus58, paymentType59);
        models.payment.Payment.PaymentType paymentType61 = payment60.getPaymentType();
        java.util.UUID uUID62 = payment60.getBookingID();
        models.payment.Payment.PaymentType paymentType63 = models.payment.Payment.PaymentType.FINAL;
        payment60.setPaymentType(paymentType63);
        models.payment.Payment payment65 = new models.payment.Payment(uUID0, booking1, (double) 'a', paymentMethod26, paymentStatus53, paymentType63);
        double double66 = payment65.getAmount();
        double double67 = payment65.getAmount();
        java.util.UUID uUID68 = payment65.getBookingID();
        double double69 = payment65.getAmount();
        org.junit.Assert.assertTrue("'" + paymentStatus7 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus7.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType8 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType8.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentStatus17 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus17.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType18 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType18.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType20 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType20.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID21);
        org.junit.Assert.assertTrue("'" + paymentType22 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType22.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod26);
        org.junit.Assert.assertTrue("'" + paymentStatus28 + "' != '" + models.payment.Payment.PaymentStatus.PENDING + "'", paymentStatus28.equals(models.payment.Payment.PaymentStatus.PENDING));
        org.junit.Assert.assertTrue("'" + paymentStatus39 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus39.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType40 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType40.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType42 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType42.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID43);
        org.junit.Assert.assertTrue("'" + paymentType44 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType44.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod48);
        org.junit.Assert.assertTrue("'" + paymentStatus50 + "' != '" + models.payment.Payment.PaymentStatus.PENDING + "'", paymentStatus50.equals(models.payment.Payment.PaymentStatus.PENDING));
        org.junit.Assert.assertTrue("'" + paymentStatus53 + "' != '" + models.payment.Payment.PaymentStatus.PENDING + "'", paymentStatus53.equals(models.payment.Payment.PaymentStatus.PENDING));
        org.junit.Assert.assertTrue("'" + paymentStatus58 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus58.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType59 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType59.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType61 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType61.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID62);
        org.junit.Assert.assertTrue("'" + paymentType63 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType63.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 97.0d + "'", double66 == 97.0d);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 97.0d + "'", double67 == 97.0d);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 97.0d + "'", double69 == 97.0d);
    }

    @Test
    public void test105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test105");
        java.util.UUID uUID0 = null;
        models.booking.Booking booking1 = null;
        models.booking.Booking booking4 = null;
        java.util.UUID uUID5 = null;
        models.booking.Booking booking6 = null;
        models.payment.PaymentMethod paymentMethod8 = null;
        models.payment.Payment.PaymentStatus paymentStatus9 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType10 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment11 = new models.payment.Payment(uUID5, booking6, 100.0d, paymentMethod8, paymentStatus9, paymentType10);
        models.payment.Payment.PaymentType paymentType12 = payment11.getPaymentType();
        java.util.UUID uUID13 = payment11.getBookingID();
        models.payment.Payment.PaymentType paymentType14 = models.payment.Payment.PaymentType.FINAL;
        payment11.setPaymentType(paymentType14);
        java.util.UUID uUID16 = payment11.getPaymentID();
        models.payment.PaymentMethod paymentMethod18 = models.payment.Payment.generateMethod("");
        payment11.setPaymentMethod(paymentMethod18);
        java.util.UUID uUID20 = null;
        models.booking.Booking booking21 = null;
        models.payment.PaymentMethod paymentMethod23 = null;
        models.payment.Payment.PaymentStatus paymentStatus24 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType25 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment26 = new models.payment.Payment(uUID20, booking21, 100.0d, paymentMethod23, paymentStatus24, paymentType25);
        models.payment.Payment.PaymentType paymentType27 = payment26.getPaymentType();
        models.payment.Payment.PaymentType paymentType28 = payment26.getPaymentType();
        models.payment.Payment payment29 = new models.payment.Payment((double) 10, booking4, paymentMethod18, paymentType28);
        java.util.UUID uUID30 = null;
        models.booking.Booking booking31 = null;
        models.payment.PaymentMethod paymentMethod34 = models.payment.Payment.generateMethod("");
        java.util.UUID uUID35 = null;
        models.booking.Booking booking36 = null;
        models.payment.PaymentMethod paymentMethod38 = null;
        models.payment.Payment.PaymentStatus paymentStatus39 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType40 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment41 = new models.payment.Payment(uUID35, booking36, 100.0d, paymentMethod38, paymentStatus39, paymentType40);
        models.payment.Payment.PaymentStatus paymentStatus42 = payment41.getStatus();
        java.util.UUID uUID43 = null;
        models.booking.Booking booking44 = null;
        models.payment.PaymentMethod paymentMethod46 = null;
        models.payment.Payment.PaymentStatus paymentStatus47 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType48 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment49 = new models.payment.Payment(uUID43, booking44, 100.0d, paymentMethod46, paymentStatus47, paymentType48);
        models.payment.Payment.PaymentType paymentType50 = payment49.getPaymentType();
        java.util.UUID uUID51 = payment49.getBookingID();
        models.payment.Payment.PaymentType paymentType52 = models.payment.Payment.PaymentType.FINAL;
        payment49.setPaymentType(paymentType52);
        models.payment.PaymentMethod paymentMethod54 = payment49.getMethod();
        models.payment.Payment.PaymentType paymentType55 = payment49.getPaymentType();
        models.payment.Payment payment56 = new models.payment.Payment(uUID30, booking31, (double) 1L, paymentMethod34, paymentStatus42, paymentType55);
        java.util.UUID uUID57 = null;
        models.booking.Booking booking58 = null;
        models.payment.PaymentMethod paymentMethod60 = null;
        models.payment.Payment.PaymentStatus paymentStatus61 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType62 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment63 = new models.payment.Payment(uUID57, booking58, (-1.0d), paymentMethod60, paymentStatus61, paymentType62);
        models.payment.Payment payment64 = new models.payment.Payment(uUID0, booking1, (double) (byte) 0, paymentMethod18, paymentStatus42, paymentType62);
        models.booking.Booking booking65 = payment64.getBooking();
        java.util.UUID uUID66 = payment64.getPaymentID();
        org.junit.Assert.assertTrue("'" + paymentStatus9 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus9.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType10 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType10.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType12 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType12.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID13);
        org.junit.Assert.assertTrue("'" + paymentType14 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType14.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod18);
        org.junit.Assert.assertTrue("'" + paymentStatus24 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus24.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType25 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType25.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType27 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType27.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType28 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType28.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod34);
        org.junit.Assert.assertTrue("'" + paymentStatus39 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus39.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType40 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType40.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentStatus42 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus42.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentStatus47 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus47.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType48 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType48.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType50 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType50.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID51);
        org.junit.Assert.assertTrue("'" + paymentType52 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType52.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(paymentMethod54);
        org.junit.Assert.assertTrue("'" + paymentType55 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType55.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentStatus61 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus61.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType62 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType62.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(booking65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID66);
    }

    @Test
    public void test106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test106");
        java.util.UUID uUID0 = null;
        models.booking.Booking booking1 = null;
        models.payment.PaymentMethod paymentMethod3 = null;
        models.payment.Payment.PaymentStatus paymentStatus4 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType5 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment6 = new models.payment.Payment(uUID0, booking1, 100.0d, paymentMethod3, paymentStatus4, paymentType5);
        models.payment.Payment.PaymentType paymentType7 = payment6.getPaymentType();
        java.util.UUID uUID8 = payment6.getBookingID();
        models.payment.Payment.PaymentType paymentType9 = models.payment.Payment.PaymentType.FINAL;
        payment6.setPaymentType(paymentType9);
        models.payment.PaymentMethod paymentMethod11 = payment6.getMethod();
        models.payment.Payment.PaymentType paymentType12 = payment6.getPaymentType();
        java.util.UUID uUID13 = payment6.getBookingID();
        java.util.UUID uUID14 = payment6.getPaymentID();
        models.booking.Booking booking15 = payment6.getBooking();
        org.junit.Assert.assertTrue("'" + paymentStatus4 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus4.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType5 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType5.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType7 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType7.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID8);
        org.junit.Assert.assertTrue("'" + paymentType9 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType9.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(paymentMethod11);
        org.junit.Assert.assertTrue("'" + paymentType12 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType12.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(booking15);
    }

    @Test
    public void test107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test107");
        java.util.UUID uUID0 = null;
        models.booking.Booking booking1 = null;
        models.payment.PaymentMethod paymentMethod3 = null;
        models.payment.Payment.PaymentStatus paymentStatus4 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType5 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment6 = new models.payment.Payment(uUID0, booking1, 100.0d, paymentMethod3, paymentStatus4, paymentType5);
        models.payment.Payment.PaymentType paymentType7 = payment6.getPaymentType();
        java.util.UUID uUID8 = payment6.getBookingID();
        models.payment.Payment.PaymentType paymentType9 = models.payment.Payment.PaymentType.FINAL;
        payment6.setPaymentType(paymentType9);
        java.util.UUID uUID11 = payment6.getPaymentID();
        models.payment.PaymentMethod paymentMethod13 = models.payment.Payment.generateMethod("");
        payment6.setPaymentMethod(paymentMethod13);
        models.payment.Payment.PaymentType paymentType15 = payment6.getPaymentType();
        java.util.UUID uUID16 = payment6.getBookingID();
        models.payment.Payment.PaymentStatus paymentStatus17 = payment6.getStatus();
        org.junit.Assert.assertTrue("'" + paymentStatus4 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus4.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType5 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType5.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType7 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType7.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID8);
        org.junit.Assert.assertTrue("'" + paymentType9 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType9.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod13);
        org.junit.Assert.assertTrue("'" + paymentType15 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType15.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID16);
        org.junit.Assert.assertTrue("'" + paymentStatus17 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus17.equals(models.payment.Payment.PaymentStatus.FAILED));
    }

    @Test
    public void test108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test108");
        java.util.UUID uUID0 = null;
        models.booking.Booking booking1 = null;
        models.payment.PaymentMethod paymentMethod3 = null;
        models.payment.Payment.PaymentStatus paymentStatus4 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType5 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment6 = new models.payment.Payment(uUID0, booking1, 100.0d, paymentMethod3, paymentStatus4, paymentType5);
        models.payment.Payment.PaymentType paymentType7 = payment6.getPaymentType();
        double double8 = payment6.getAmount();
        java.util.UUID uUID9 = null;
        models.booking.Booking booking10 = null;
        java.util.UUID uUID12 = null;
        models.booking.Booking booking13 = null;
        models.payment.PaymentMethod paymentMethod15 = null;
        models.payment.Payment.PaymentStatus paymentStatus16 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType17 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment18 = new models.payment.Payment(uUID12, booking13, 100.0d, paymentMethod15, paymentStatus16, paymentType17);
        java.util.UUID uUID19 = null;
        models.booking.Booking booking20 = null;
        java.util.UUID uUID22 = null;
        models.booking.Booking booking23 = null;
        models.payment.PaymentMethod paymentMethod25 = null;
        models.payment.Payment.PaymentStatus paymentStatus26 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType27 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment28 = new models.payment.Payment(uUID22, booking23, 100.0d, paymentMethod25, paymentStatus26, paymentType27);
        models.payment.Payment.PaymentType paymentType29 = payment28.getPaymentType();
        java.util.UUID uUID30 = payment28.getBookingID();
        models.payment.Payment.PaymentType paymentType31 = models.payment.Payment.PaymentType.FINAL;
        payment28.setPaymentType(paymentType31);
        java.util.UUID uUID33 = payment28.getPaymentID();
        models.payment.PaymentMethod paymentMethod35 = models.payment.Payment.generateMethod("");
        payment28.setPaymentMethod(paymentMethod35);
        models.payment.Payment.PaymentStatus paymentStatus37 = models.payment.Payment.PaymentStatus.PENDING;
        models.payment.Payment.PaymentType paymentType38 = null;
        models.payment.Payment payment39 = new models.payment.Payment(uUID19, booking20, (double) (byte) 0, paymentMethod35, paymentStatus37, paymentType38);
        payment18.setPaymentMethod(paymentMethod35);
        java.util.UUID uUID41 = null;
        models.booking.Booking booking42 = null;
        java.util.UUID uUID44 = null;
        models.booking.Booking booking45 = null;
        models.payment.PaymentMethod paymentMethod47 = null;
        models.payment.Payment.PaymentStatus paymentStatus48 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType49 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment50 = new models.payment.Payment(uUID44, booking45, 100.0d, paymentMethod47, paymentStatus48, paymentType49);
        models.payment.Payment.PaymentType paymentType51 = payment50.getPaymentType();
        java.util.UUID uUID52 = payment50.getBookingID();
        models.payment.Payment.PaymentType paymentType53 = models.payment.Payment.PaymentType.FINAL;
        payment50.setPaymentType(paymentType53);
        java.util.UUID uUID55 = payment50.getPaymentID();
        models.payment.PaymentMethod paymentMethod57 = models.payment.Payment.generateMethod("");
        payment50.setPaymentMethod(paymentMethod57);
        models.payment.Payment.PaymentStatus paymentStatus59 = models.payment.Payment.PaymentStatus.PENDING;
        models.payment.Payment.PaymentType paymentType60 = null;
        models.payment.Payment payment61 = new models.payment.Payment(uUID41, booking42, (double) (byte) 0, paymentMethod57, paymentStatus59, paymentType60);
        models.payment.Payment.PaymentStatus paymentStatus62 = payment61.getStatus();
        java.util.UUID uUID63 = null;
        models.booking.Booking booking64 = null;
        models.payment.PaymentMethod paymentMethod66 = null;
        models.payment.Payment.PaymentStatus paymentStatus67 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType68 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment69 = new models.payment.Payment(uUID63, booking64, 100.0d, paymentMethod66, paymentStatus67, paymentType68);
        models.payment.Payment.PaymentType paymentType70 = payment69.getPaymentType();
        java.util.UUID uUID71 = payment69.getBookingID();
        models.payment.Payment.PaymentType paymentType72 = models.payment.Payment.PaymentType.FINAL;
        payment69.setPaymentType(paymentType72);
        models.payment.Payment payment74 = new models.payment.Payment(uUID9, booking10, (double) 'a', paymentMethod35, paymentStatus62, paymentType72);
        java.util.UUID uUID75 = payment74.getBookingID();
        models.payment.PaymentMethod paymentMethod76 = payment74.getMethod();
        payment6.setPaymentMethod(paymentMethod76);
        org.junit.Assert.assertTrue("'" + paymentStatus4 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus4.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType5 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType5.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType7 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType7.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 100.0d + "'", double8 == 100.0d);
        org.junit.Assert.assertTrue("'" + paymentStatus16 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus16.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType17 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType17.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentStatus26 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus26.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType27 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType27.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType29 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType29.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID30);
        org.junit.Assert.assertTrue("'" + paymentType31 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType31.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod35);
        org.junit.Assert.assertTrue("'" + paymentStatus37 + "' != '" + models.payment.Payment.PaymentStatus.PENDING + "'", paymentStatus37.equals(models.payment.Payment.PaymentStatus.PENDING));
        org.junit.Assert.assertTrue("'" + paymentStatus48 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus48.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType49 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType49.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType51 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType51.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID52);
        org.junit.Assert.assertTrue("'" + paymentType53 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType53.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod57);
        org.junit.Assert.assertTrue("'" + paymentStatus59 + "' != '" + models.payment.Payment.PaymentStatus.PENDING + "'", paymentStatus59.equals(models.payment.Payment.PaymentStatus.PENDING));
        org.junit.Assert.assertTrue("'" + paymentStatus62 + "' != '" + models.payment.Payment.PaymentStatus.PENDING + "'", paymentStatus62.equals(models.payment.Payment.PaymentStatus.PENDING));
        org.junit.Assert.assertTrue("'" + paymentStatus67 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus67.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType68 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType68.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType70 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType70.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID71);
        org.junit.Assert.assertTrue("'" + paymentType72 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType72.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod76);
    }

    @Test
    public void test109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test109");
        java.util.UUID uUID0 = null;
        models.booking.Booking booking1 = null;
        models.payment.PaymentMethod paymentMethod3 = null;
        models.payment.Payment.PaymentStatus paymentStatus4 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType5 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment6 = new models.payment.Payment(uUID0, booking1, (-1.0d), paymentMethod3, paymentStatus4, paymentType5);
        models.booking.Booking booking7 = payment6.getBooking();
        models.booking.Booking booking9 = null;
        java.util.UUID uUID10 = null;
        models.booking.Booking booking11 = null;
        java.util.UUID uUID13 = null;
        models.booking.Booking booking14 = null;
        java.util.UUID uUID16 = null;
        models.booking.Booking booking17 = null;
        models.payment.PaymentMethod paymentMethod19 = null;
        models.payment.Payment.PaymentStatus paymentStatus20 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType21 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment22 = new models.payment.Payment(uUID16, booking17, 100.0d, paymentMethod19, paymentStatus20, paymentType21);
        models.payment.Payment.PaymentType paymentType23 = payment22.getPaymentType();
        java.util.UUID uUID24 = payment22.getBookingID();
        models.payment.Payment.PaymentType paymentType25 = models.payment.Payment.PaymentType.FINAL;
        payment22.setPaymentType(paymentType25);
        java.util.UUID uUID27 = payment22.getPaymentID();
        models.payment.PaymentMethod paymentMethod29 = models.payment.Payment.generateMethod("");
        payment22.setPaymentMethod(paymentMethod29);
        models.payment.Payment.PaymentStatus paymentStatus31 = models.payment.Payment.PaymentStatus.PENDING;
        models.payment.Payment.PaymentType paymentType32 = null;
        models.payment.Payment payment33 = new models.payment.Payment(uUID13, booking14, (double) (byte) 0, paymentMethod29, paymentStatus31, paymentType32);
        models.payment.Payment.PaymentStatus paymentStatus34 = models.payment.Payment.PaymentStatus.PENDING;
        models.payment.Payment.PaymentType paymentType35 = models.payment.Payment.PaymentType.DEPOSIT;
        models.payment.Payment payment36 = new models.payment.Payment(uUID10, booking11, (double) (byte) 100, paymentMethod29, paymentStatus34, paymentType35);
        models.booking.Booking booking37 = payment36.getBooking();
        double double38 = payment36.getAmount();
        java.util.UUID uUID39 = payment36.getBookingID();
        models.payment.PaymentMethod paymentMethod40 = payment36.getMethod();
        java.util.UUID uUID41 = null;
        models.booking.Booking booking42 = null;
        models.payment.PaymentMethod paymentMethod44 = null;
        models.payment.Payment.PaymentStatus paymentStatus45 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType46 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment47 = new models.payment.Payment(uUID41, booking42, 100.0d, paymentMethod44, paymentStatus45, paymentType46);
        models.payment.Payment.PaymentType paymentType48 = payment47.getPaymentType();
        java.util.UUID uUID49 = payment47.getBookingID();
        models.payment.Payment.PaymentType paymentType50 = models.payment.Payment.PaymentType.FINAL;
        payment47.setPaymentType(paymentType50);
        models.payment.Payment payment52 = new models.payment.Payment((double) 1.0f, booking9, paymentMethod40, paymentType50);
        payment6.setPaymentMethod(paymentMethod40);
        org.junit.Assert.assertTrue("'" + paymentStatus4 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus4.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType5 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType5.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(booking7);
        org.junit.Assert.assertTrue("'" + paymentStatus20 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus20.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType21 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType21.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType23 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType23.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID24);
        org.junit.Assert.assertTrue("'" + paymentType25 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType25.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod29);
        org.junit.Assert.assertTrue("'" + paymentStatus31 + "' != '" + models.payment.Payment.PaymentStatus.PENDING + "'", paymentStatus31.equals(models.payment.Payment.PaymentStatus.PENDING));
        org.junit.Assert.assertTrue("'" + paymentStatus34 + "' != '" + models.payment.Payment.PaymentStatus.PENDING + "'", paymentStatus34.equals(models.payment.Payment.PaymentStatus.PENDING));
        org.junit.Assert.assertTrue("'" + paymentType35 + "' != '" + models.payment.Payment.PaymentType.DEPOSIT + "'", paymentType35.equals(models.payment.Payment.PaymentType.DEPOSIT));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(booking37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 100.0d + "'", double38 == 100.0d);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod40);
        org.junit.Assert.assertTrue("'" + paymentStatus45 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus45.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType46 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType46.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType48 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType48.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID49);
        org.junit.Assert.assertTrue("'" + paymentType50 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType50.equals(models.payment.Payment.PaymentType.FINAL));
    }

    @Test
    public void test110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test110");
        java.util.UUID uUID0 = null;
        models.booking.Booking booking1 = null;
        java.util.UUID uUID3 = null;
        models.booking.Booking booking4 = null;
        models.payment.PaymentMethod paymentMethod6 = null;
        models.payment.Payment.PaymentStatus paymentStatus7 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType8 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment9 = new models.payment.Payment(uUID3, booking4, 100.0d, paymentMethod6, paymentStatus7, paymentType8);
        java.util.UUID uUID10 = null;
        models.booking.Booking booking11 = null;
        java.util.UUID uUID13 = null;
        models.booking.Booking booking14 = null;
        models.payment.PaymentMethod paymentMethod16 = null;
        models.payment.Payment.PaymentStatus paymentStatus17 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType18 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment19 = new models.payment.Payment(uUID13, booking14, 100.0d, paymentMethod16, paymentStatus17, paymentType18);
        models.payment.Payment.PaymentType paymentType20 = payment19.getPaymentType();
        java.util.UUID uUID21 = payment19.getBookingID();
        models.payment.Payment.PaymentType paymentType22 = models.payment.Payment.PaymentType.FINAL;
        payment19.setPaymentType(paymentType22);
        java.util.UUID uUID24 = payment19.getPaymentID();
        models.payment.PaymentMethod paymentMethod26 = models.payment.Payment.generateMethod("");
        payment19.setPaymentMethod(paymentMethod26);
        models.payment.Payment.PaymentStatus paymentStatus28 = models.payment.Payment.PaymentStatus.PENDING;
        models.payment.Payment.PaymentType paymentType29 = null;
        models.payment.Payment payment30 = new models.payment.Payment(uUID10, booking11, (double) (byte) 0, paymentMethod26, paymentStatus28, paymentType29);
        payment9.setPaymentMethod(paymentMethod26);
        java.util.UUID uUID32 = null;
        models.booking.Booking booking33 = null;
        models.payment.PaymentMethod paymentMethod35 = null;
        models.payment.Payment.PaymentStatus paymentStatus36 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType37 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment38 = new models.payment.Payment(uUID32, booking33, 100.0d, paymentMethod35, paymentStatus36, paymentType37);
        models.payment.Payment.PaymentStatus paymentStatus39 = payment38.getStatus();
        java.util.UUID uUID40 = null;
        models.booking.Booking booking41 = null;
        models.payment.PaymentMethod paymentMethod43 = null;
        models.payment.Payment.PaymentStatus paymentStatus44 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType45 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment46 = new models.payment.Payment(uUID40, booking41, 100.0d, paymentMethod43, paymentStatus44, paymentType45);
        models.payment.Payment.PaymentType paymentType47 = payment46.getPaymentType();
        java.util.UUID uUID48 = payment46.getBookingID();
        models.payment.Payment.PaymentType paymentType49 = models.payment.Payment.PaymentType.FINAL;
        payment46.setPaymentType(paymentType49);
        models.payment.PaymentMethod paymentMethod51 = payment46.getMethod();
        models.payment.Payment.PaymentType paymentType52 = payment46.getPaymentType();
        models.payment.Payment payment53 = new models.payment.Payment(uUID0, booking1, (double) (byte) 0, paymentMethod26, paymentStatus39, paymentType52);
        models.payment.PaymentMethod paymentMethod54 = payment53.getMethod();
        java.util.UUID uUID55 = payment53.getBookingID();
        org.junit.Assert.assertTrue("'" + paymentStatus7 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus7.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType8 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType8.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentStatus17 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus17.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType18 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType18.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType20 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType20.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID21);
        org.junit.Assert.assertTrue("'" + paymentType22 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType22.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod26);
        org.junit.Assert.assertTrue("'" + paymentStatus28 + "' != '" + models.payment.Payment.PaymentStatus.PENDING + "'", paymentStatus28.equals(models.payment.Payment.PaymentStatus.PENDING));
        org.junit.Assert.assertTrue("'" + paymentStatus36 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus36.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType37 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType37.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentStatus39 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus39.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentStatus44 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus44.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType45 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType45.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType47 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType47.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID48);
        org.junit.Assert.assertTrue("'" + paymentType49 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType49.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(paymentMethod51);
        org.junit.Assert.assertTrue("'" + paymentType52 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType52.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID55);
    }

    @Test
    public void test111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test111");
        java.util.UUID uUID0 = null;
        models.booking.Booking booking1 = null;
        java.util.UUID uUID3 = null;
        models.booking.Booking booking4 = null;
        models.payment.PaymentMethod paymentMethod6 = null;
        models.payment.Payment.PaymentStatus paymentStatus7 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType8 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment9 = new models.payment.Payment(uUID3, booking4, 100.0d, paymentMethod6, paymentStatus7, paymentType8);
        java.util.UUID uUID10 = null;
        models.booking.Booking booking11 = null;
        java.util.UUID uUID13 = null;
        models.booking.Booking booking14 = null;
        models.payment.PaymentMethod paymentMethod16 = null;
        models.payment.Payment.PaymentStatus paymentStatus17 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType18 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment19 = new models.payment.Payment(uUID13, booking14, 100.0d, paymentMethod16, paymentStatus17, paymentType18);
        models.payment.Payment.PaymentType paymentType20 = payment19.getPaymentType();
        java.util.UUID uUID21 = payment19.getBookingID();
        models.payment.Payment.PaymentType paymentType22 = models.payment.Payment.PaymentType.FINAL;
        payment19.setPaymentType(paymentType22);
        java.util.UUID uUID24 = payment19.getPaymentID();
        models.payment.PaymentMethod paymentMethod26 = models.payment.Payment.generateMethod("");
        payment19.setPaymentMethod(paymentMethod26);
        models.payment.Payment.PaymentStatus paymentStatus28 = models.payment.Payment.PaymentStatus.PENDING;
        models.payment.Payment.PaymentType paymentType29 = null;
        models.payment.Payment payment30 = new models.payment.Payment(uUID10, booking11, (double) (byte) 0, paymentMethod26, paymentStatus28, paymentType29);
        payment9.setPaymentMethod(paymentMethod26);
        java.util.UUID uUID32 = null;
        models.booking.Booking booking33 = null;
        java.util.UUID uUID35 = null;
        models.booking.Booking booking36 = null;
        models.payment.PaymentMethod paymentMethod38 = null;
        models.payment.Payment.PaymentStatus paymentStatus39 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType40 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment41 = new models.payment.Payment(uUID35, booking36, 100.0d, paymentMethod38, paymentStatus39, paymentType40);
        models.payment.Payment.PaymentType paymentType42 = payment41.getPaymentType();
        java.util.UUID uUID43 = payment41.getBookingID();
        models.payment.Payment.PaymentType paymentType44 = models.payment.Payment.PaymentType.FINAL;
        payment41.setPaymentType(paymentType44);
        java.util.UUID uUID46 = payment41.getPaymentID();
        models.payment.PaymentMethod paymentMethod48 = models.payment.Payment.generateMethod("");
        payment41.setPaymentMethod(paymentMethod48);
        models.payment.Payment.PaymentStatus paymentStatus50 = models.payment.Payment.PaymentStatus.PENDING;
        models.payment.Payment.PaymentType paymentType51 = null;
        models.payment.Payment payment52 = new models.payment.Payment(uUID32, booking33, (double) (byte) 0, paymentMethod48, paymentStatus50, paymentType51);
        models.payment.Payment.PaymentStatus paymentStatus53 = payment52.getStatus();
        java.util.UUID uUID54 = null;
        models.booking.Booking booking55 = null;
        models.payment.PaymentMethod paymentMethod57 = null;
        models.payment.Payment.PaymentStatus paymentStatus58 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType59 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment60 = new models.payment.Payment(uUID54, booking55, 100.0d, paymentMethod57, paymentStatus58, paymentType59);
        models.payment.Payment.PaymentType paymentType61 = payment60.getPaymentType();
        java.util.UUID uUID62 = payment60.getBookingID();
        models.payment.Payment.PaymentType paymentType63 = models.payment.Payment.PaymentType.FINAL;
        payment60.setPaymentType(paymentType63);
        models.payment.Payment payment65 = new models.payment.Payment(uUID0, booking1, (double) 'a', paymentMethod26, paymentStatus53, paymentType63);
        models.booking.Booking booking66 = payment65.getBooking();
        double double67 = payment65.getAmount();
        java.util.UUID uUID68 = payment65.getBookingID();
        models.booking.Booking booking69 = payment65.getBooking();
        org.junit.Assert.assertTrue("'" + paymentStatus7 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus7.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType8 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType8.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentStatus17 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus17.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType18 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType18.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType20 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType20.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID21);
        org.junit.Assert.assertTrue("'" + paymentType22 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType22.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod26);
        org.junit.Assert.assertTrue("'" + paymentStatus28 + "' != '" + models.payment.Payment.PaymentStatus.PENDING + "'", paymentStatus28.equals(models.payment.Payment.PaymentStatus.PENDING));
        org.junit.Assert.assertTrue("'" + paymentStatus39 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus39.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType40 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType40.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType42 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType42.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID43);
        org.junit.Assert.assertTrue("'" + paymentType44 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType44.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod48);
        org.junit.Assert.assertTrue("'" + paymentStatus50 + "' != '" + models.payment.Payment.PaymentStatus.PENDING + "'", paymentStatus50.equals(models.payment.Payment.PaymentStatus.PENDING));
        org.junit.Assert.assertTrue("'" + paymentStatus53 + "' != '" + models.payment.Payment.PaymentStatus.PENDING + "'", paymentStatus53.equals(models.payment.Payment.PaymentStatus.PENDING));
        org.junit.Assert.assertTrue("'" + paymentStatus58 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus58.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType59 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType59.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType61 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType61.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID62);
        org.junit.Assert.assertTrue("'" + paymentType63 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType63.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(booking66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 97.0d + "'", double67 == 97.0d);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(booking69);
    }

    @Test
    public void test112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test112");
        java.util.UUID uUID0 = null;
        models.booking.Booking booking1 = null;
        models.payment.PaymentMethod paymentMethod3 = null;
        models.payment.Payment.PaymentStatus paymentStatus4 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType5 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment6 = new models.payment.Payment(uUID0, booking1, 100.0d, paymentMethod3, paymentStatus4, paymentType5);
        models.payment.PaymentMethod paymentMethod7 = null;
        payment6.setPaymentMethod(paymentMethod7);
        java.util.UUID uUID9 = null;
        models.booking.Booking booking10 = null;
        java.util.UUID uUID12 = null;
        models.booking.Booking booking13 = null;
        models.payment.PaymentMethod paymentMethod15 = null;
        models.payment.Payment.PaymentStatus paymentStatus16 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType17 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment18 = new models.payment.Payment(uUID12, booking13, 100.0d, paymentMethod15, paymentStatus16, paymentType17);
        java.util.UUID uUID19 = null;
        models.booking.Booking booking20 = null;
        java.util.UUID uUID22 = null;
        models.booking.Booking booking23 = null;
        models.payment.PaymentMethod paymentMethod25 = null;
        models.payment.Payment.PaymentStatus paymentStatus26 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType27 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment28 = new models.payment.Payment(uUID22, booking23, 100.0d, paymentMethod25, paymentStatus26, paymentType27);
        models.payment.Payment.PaymentType paymentType29 = payment28.getPaymentType();
        java.util.UUID uUID30 = payment28.getBookingID();
        models.payment.Payment.PaymentType paymentType31 = models.payment.Payment.PaymentType.FINAL;
        payment28.setPaymentType(paymentType31);
        java.util.UUID uUID33 = payment28.getPaymentID();
        models.payment.PaymentMethod paymentMethod35 = models.payment.Payment.generateMethod("");
        payment28.setPaymentMethod(paymentMethod35);
        models.payment.Payment.PaymentStatus paymentStatus37 = models.payment.Payment.PaymentStatus.PENDING;
        models.payment.Payment.PaymentType paymentType38 = null;
        models.payment.Payment payment39 = new models.payment.Payment(uUID19, booking20, (double) (byte) 0, paymentMethod35, paymentStatus37, paymentType38);
        payment18.setPaymentMethod(paymentMethod35);
        java.util.UUID uUID41 = null;
        models.booking.Booking booking42 = null;
        java.util.UUID uUID44 = null;
        models.booking.Booking booking45 = null;
        models.payment.PaymentMethod paymentMethod47 = null;
        models.payment.Payment.PaymentStatus paymentStatus48 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType49 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment50 = new models.payment.Payment(uUID44, booking45, 100.0d, paymentMethod47, paymentStatus48, paymentType49);
        models.payment.Payment.PaymentType paymentType51 = payment50.getPaymentType();
        java.util.UUID uUID52 = payment50.getBookingID();
        models.payment.Payment.PaymentType paymentType53 = models.payment.Payment.PaymentType.FINAL;
        payment50.setPaymentType(paymentType53);
        java.util.UUID uUID55 = payment50.getPaymentID();
        models.payment.PaymentMethod paymentMethod57 = models.payment.Payment.generateMethod("");
        payment50.setPaymentMethod(paymentMethod57);
        models.payment.Payment.PaymentStatus paymentStatus59 = models.payment.Payment.PaymentStatus.PENDING;
        models.payment.Payment.PaymentType paymentType60 = null;
        models.payment.Payment payment61 = new models.payment.Payment(uUID41, booking42, (double) (byte) 0, paymentMethod57, paymentStatus59, paymentType60);
        models.payment.Payment.PaymentStatus paymentStatus62 = payment61.getStatus();
        java.util.UUID uUID63 = null;
        models.booking.Booking booking64 = null;
        models.payment.PaymentMethod paymentMethod66 = null;
        models.payment.Payment.PaymentStatus paymentStatus67 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType68 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment69 = new models.payment.Payment(uUID63, booking64, 100.0d, paymentMethod66, paymentStatus67, paymentType68);
        models.payment.Payment.PaymentType paymentType70 = payment69.getPaymentType();
        java.util.UUID uUID71 = payment69.getBookingID();
        models.payment.Payment.PaymentType paymentType72 = models.payment.Payment.PaymentType.FINAL;
        payment69.setPaymentType(paymentType72);
        models.payment.Payment payment74 = new models.payment.Payment(uUID9, booking10, (double) 'a', paymentMethod35, paymentStatus62, paymentType72);
        payment6.setPaymentType(paymentType72);
        java.util.UUID uUID76 = payment6.getPaymentID();
        org.junit.Assert.assertTrue("'" + paymentStatus4 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus4.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType5 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType5.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentStatus16 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus16.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType17 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType17.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentStatus26 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus26.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType27 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType27.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType29 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType29.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID30);
        org.junit.Assert.assertTrue("'" + paymentType31 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType31.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod35);
        org.junit.Assert.assertTrue("'" + paymentStatus37 + "' != '" + models.payment.Payment.PaymentStatus.PENDING + "'", paymentStatus37.equals(models.payment.Payment.PaymentStatus.PENDING));
        org.junit.Assert.assertTrue("'" + paymentStatus48 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus48.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType49 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType49.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType51 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType51.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID52);
        org.junit.Assert.assertTrue("'" + paymentType53 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType53.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod57);
        org.junit.Assert.assertTrue("'" + paymentStatus59 + "' != '" + models.payment.Payment.PaymentStatus.PENDING + "'", paymentStatus59.equals(models.payment.Payment.PaymentStatus.PENDING));
        org.junit.Assert.assertTrue("'" + paymentStatus62 + "' != '" + models.payment.Payment.PaymentStatus.PENDING + "'", paymentStatus62.equals(models.payment.Payment.PaymentStatus.PENDING));
        org.junit.Assert.assertTrue("'" + paymentStatus67 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus67.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType68 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType68.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType70 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType70.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID71);
        org.junit.Assert.assertTrue("'" + paymentType72 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType72.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID76);
    }

    @Test
    public void test113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test113");
        models.booking.Booking booking1 = null;
        models.booking.Booking booking3 = null;
        models.booking.Booking booking5 = null;
        models.payment.PaymentMethod paymentMethod7 = models.payment.Payment.generateMethod("");
        models.payment.Payment.PaymentType paymentType8 = null;
        models.payment.Payment payment9 = new models.payment.Payment(1.0d, booking5, paymentMethod7, paymentType8);
        models.booking.Booking booking11 = null;
        models.booking.Booking booking13 = null;
        java.util.UUID uUID14 = null;
        models.booking.Booking booking15 = null;
        models.payment.PaymentMethod paymentMethod17 = null;
        models.payment.Payment.PaymentStatus paymentStatus18 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType19 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment20 = new models.payment.Payment(uUID14, booking15, 100.0d, paymentMethod17, paymentStatus18, paymentType19);
        models.payment.Payment.PaymentType paymentType21 = payment20.getPaymentType();
        java.util.UUID uUID22 = payment20.getBookingID();
        models.payment.Payment.PaymentType paymentType23 = models.payment.Payment.PaymentType.FINAL;
        payment20.setPaymentType(paymentType23);
        java.util.UUID uUID25 = payment20.getPaymentID();
        models.payment.PaymentMethod paymentMethod27 = models.payment.Payment.generateMethod("");
        payment20.setPaymentMethod(paymentMethod27);
        java.util.UUID uUID29 = null;
        models.booking.Booking booking30 = null;
        models.payment.PaymentMethod paymentMethod32 = null;
        models.payment.Payment.PaymentStatus paymentStatus33 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType34 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment35 = new models.payment.Payment(uUID29, booking30, 100.0d, paymentMethod32, paymentStatus33, paymentType34);
        models.payment.Payment.PaymentType paymentType36 = payment35.getPaymentType();
        models.payment.Payment.PaymentType paymentType37 = payment35.getPaymentType();
        models.payment.Payment payment38 = new models.payment.Payment((double) 10, booking13, paymentMethod27, paymentType37);
        java.util.UUID uUID39 = null;
        models.booking.Booking booking40 = null;
        models.payment.PaymentMethod paymentMethod42 = null;
        models.payment.Payment.PaymentStatus paymentStatus43 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType44 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment45 = new models.payment.Payment(uUID39, booking40, 100.0d, paymentMethod42, paymentStatus43, paymentType44);
        models.payment.Payment.PaymentType paymentType46 = payment45.getPaymentType();
        java.util.UUID uUID47 = payment45.getBookingID();
        models.payment.Payment.PaymentType paymentType48 = models.payment.Payment.PaymentType.FINAL;
        payment45.setPaymentType(paymentType48);
        models.payment.PaymentMethod paymentMethod50 = payment45.getMethod();
        models.payment.Payment.PaymentType paymentType51 = payment45.getPaymentType();
        models.payment.Payment payment52 = new models.payment.Payment((double) 0, booking11, paymentMethod27, paymentType51);
        java.util.UUID uUID53 = payment52.getBookingID();
        boolean boolean54 = payment52.processPayment();
        java.util.UUID uUID55 = null;
        models.booking.Booking booking56 = null;
        java.util.UUID uUID58 = null;
        models.booking.Booking booking59 = null;
        java.util.UUID uUID61 = null;
        models.booking.Booking booking62 = null;
        models.payment.PaymentMethod paymentMethod64 = null;
        models.payment.Payment.PaymentStatus paymentStatus65 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType66 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment67 = new models.payment.Payment(uUID61, booking62, 100.0d, paymentMethod64, paymentStatus65, paymentType66);
        models.payment.Payment.PaymentType paymentType68 = payment67.getPaymentType();
        java.util.UUID uUID69 = payment67.getBookingID();
        models.payment.Payment.PaymentType paymentType70 = models.payment.Payment.PaymentType.FINAL;
        payment67.setPaymentType(paymentType70);
        java.util.UUID uUID72 = payment67.getPaymentID();
        models.payment.PaymentMethod paymentMethod74 = models.payment.Payment.generateMethod("");
        payment67.setPaymentMethod(paymentMethod74);
        models.payment.Payment.PaymentStatus paymentStatus76 = models.payment.Payment.PaymentStatus.PENDING;
        models.payment.Payment.PaymentType paymentType77 = null;
        models.payment.Payment payment78 = new models.payment.Payment(uUID58, booking59, (double) (byte) 0, paymentMethod74, paymentStatus76, paymentType77);
        models.payment.Payment.PaymentStatus paymentStatus79 = models.payment.Payment.PaymentStatus.PENDING;
        models.payment.Payment.PaymentType paymentType80 = models.payment.Payment.PaymentType.DEPOSIT;
        models.payment.Payment payment81 = new models.payment.Payment(uUID55, booking56, (double) (byte) 100, paymentMethod74, paymentStatus79, paymentType80);
        models.booking.Booking booking82 = payment81.getBooking();
        double double83 = payment81.getAmount();
        java.util.UUID uUID84 = payment81.getBookingID();
        models.payment.Payment.PaymentType paymentType85 = payment81.getPaymentType();
        payment52.setPaymentType(paymentType85);
        models.payment.Payment payment87 = new models.payment.Payment((double) (byte) 100, booking3, paymentMethod7, paymentType85);
        models.payment.Payment.PaymentType paymentType88 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment89 = new models.payment.Payment((double) 'a', booking1, paymentMethod7, paymentType88);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod7);
        org.junit.Assert.assertTrue("'" + paymentStatus18 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus18.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType19 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType19.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType21 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType21.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID22);
        org.junit.Assert.assertTrue("'" + paymentType23 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType23.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod27);
        org.junit.Assert.assertTrue("'" + paymentStatus33 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus33.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType34 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType34.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType36 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType36.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType37 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType37.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentStatus43 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus43.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType44 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType44.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType46 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType46.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID47);
        org.junit.Assert.assertTrue("'" + paymentType48 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType48.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(paymentMethod50);
        org.junit.Assert.assertTrue("'" + paymentType51 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType51.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + paymentStatus65 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus65.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType66 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType66.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType68 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType68.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID69);
        org.junit.Assert.assertTrue("'" + paymentType70 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType70.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod74);
        org.junit.Assert.assertTrue("'" + paymentStatus76 + "' != '" + models.payment.Payment.PaymentStatus.PENDING + "'", paymentStatus76.equals(models.payment.Payment.PaymentStatus.PENDING));
        org.junit.Assert.assertTrue("'" + paymentStatus79 + "' != '" + models.payment.Payment.PaymentStatus.PENDING + "'", paymentStatus79.equals(models.payment.Payment.PaymentStatus.PENDING));
        org.junit.Assert.assertTrue("'" + paymentType80 + "' != '" + models.payment.Payment.PaymentType.DEPOSIT + "'", paymentType80.equals(models.payment.Payment.PaymentType.DEPOSIT));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(booking82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 100.0d + "'", double83 == 100.0d);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID84);
        org.junit.Assert.assertTrue("'" + paymentType85 + "' != '" + models.payment.Payment.PaymentType.DEPOSIT + "'", paymentType85.equals(models.payment.Payment.PaymentType.DEPOSIT));
        org.junit.Assert.assertTrue("'" + paymentType88 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType88.equals(models.payment.Payment.PaymentType.FINAL));
    }

    @Test
    public void test114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test114");
        models.booking.Booking booking1 = null;
        models.booking.Booking booking3 = null;
        java.util.UUID uUID4 = null;
        models.booking.Booking booking5 = null;
        models.payment.PaymentMethod paymentMethod7 = null;
        models.payment.Payment.PaymentStatus paymentStatus8 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType9 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment10 = new models.payment.Payment(uUID4, booking5, 100.0d, paymentMethod7, paymentStatus8, paymentType9);
        models.payment.Payment.PaymentType paymentType11 = payment10.getPaymentType();
        java.util.UUID uUID12 = payment10.getBookingID();
        models.payment.Payment.PaymentType paymentType13 = models.payment.Payment.PaymentType.FINAL;
        payment10.setPaymentType(paymentType13);
        java.util.UUID uUID15 = payment10.getPaymentID();
        models.payment.PaymentMethod paymentMethod17 = models.payment.Payment.generateMethod("");
        payment10.setPaymentMethod(paymentMethod17);
        java.util.UUID uUID19 = null;
        models.booking.Booking booking20 = null;
        models.payment.PaymentMethod paymentMethod22 = null;
        models.payment.Payment.PaymentStatus paymentStatus23 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType24 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment25 = new models.payment.Payment(uUID19, booking20, 100.0d, paymentMethod22, paymentStatus23, paymentType24);
        models.payment.Payment.PaymentType paymentType26 = payment25.getPaymentType();
        models.payment.Payment.PaymentType paymentType27 = payment25.getPaymentType();
        models.payment.Payment payment28 = new models.payment.Payment((double) 10, booking3, paymentMethod17, paymentType27);
        models.payment.Payment.PaymentType paymentType29 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment30 = new models.payment.Payment((double) 0.0f, booking1, paymentMethod17, paymentType29);
        java.util.UUID uUID31 = payment30.getBookingID();
        models.booking.Booking booking32 = payment30.getBooking();
        org.junit.Assert.assertTrue("'" + paymentStatus8 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus8.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType9 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType9.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType11 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType11.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID12);
        org.junit.Assert.assertTrue("'" + paymentType13 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType13.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod17);
        org.junit.Assert.assertTrue("'" + paymentStatus23 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus23.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType24 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType24.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType26 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType26.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType27 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType27.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType29 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType29.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(booking32);
    }

    @Test
    public void test115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test115");
        java.util.UUID uUID0 = null;
        models.booking.Booking booking1 = null;
        java.util.UUID uUID3 = null;
        models.booking.Booking booking4 = null;
        models.payment.PaymentMethod paymentMethod6 = null;
        models.payment.Payment.PaymentStatus paymentStatus7 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType8 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment9 = new models.payment.Payment(uUID3, booking4, 100.0d, paymentMethod6, paymentStatus7, paymentType8);
        models.payment.Payment.PaymentType paymentType10 = payment9.getPaymentType();
        java.util.UUID uUID11 = payment9.getBookingID();
        models.payment.Payment.PaymentType paymentType12 = models.payment.Payment.PaymentType.FINAL;
        payment9.setPaymentType(paymentType12);
        java.util.UUID uUID14 = payment9.getPaymentID();
        models.payment.PaymentMethod paymentMethod16 = models.payment.Payment.generateMethod("");
        payment9.setPaymentMethod(paymentMethod16);
        models.payment.Payment.PaymentStatus paymentStatus18 = models.payment.Payment.PaymentStatus.PENDING;
        models.payment.Payment.PaymentType paymentType19 = null;
        models.payment.Payment payment20 = new models.payment.Payment(uUID0, booking1, (double) (byte) 0, paymentMethod16, paymentStatus18, paymentType19);
        models.payment.Payment.PaymentStatus paymentStatus21 = payment20.getStatus();
        boolean boolean22 = payment20.processPayment();
        models.payment.PaymentMethod paymentMethod23 = payment20.getMethod();
        java.lang.Class<?> wildcardClass24 = payment20.getClass();
        org.junit.Assert.assertTrue("'" + paymentStatus7 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus7.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType8 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType8.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType10 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType10.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID11);
        org.junit.Assert.assertTrue("'" + paymentType12 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType12.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod16);
        org.junit.Assert.assertTrue("'" + paymentStatus18 + "' != '" + models.payment.Payment.PaymentStatus.PENDING + "'", paymentStatus18.equals(models.payment.Payment.PaymentStatus.PENDING));
        org.junit.Assert.assertTrue("'" + paymentStatus21 + "' != '" + models.payment.Payment.PaymentStatus.PENDING + "'", paymentStatus21.equals(models.payment.Payment.PaymentStatus.PENDING));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass24);
    }

    @Test
    public void test116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test116");
        java.util.UUID uUID0 = null;
        models.booking.Booking booking1 = null;
        java.util.UUID uUID3 = null;
        models.booking.Booking booking4 = null;
        models.payment.PaymentMethod paymentMethod6 = null;
        models.payment.Payment.PaymentStatus paymentStatus7 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType8 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment9 = new models.payment.Payment(uUID3, booking4, 100.0d, paymentMethod6, paymentStatus7, paymentType8);
        java.util.UUID uUID10 = null;
        models.booking.Booking booking11 = null;
        java.util.UUID uUID13 = null;
        models.booking.Booking booking14 = null;
        models.payment.PaymentMethod paymentMethod16 = null;
        models.payment.Payment.PaymentStatus paymentStatus17 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType18 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment19 = new models.payment.Payment(uUID13, booking14, 100.0d, paymentMethod16, paymentStatus17, paymentType18);
        models.payment.Payment.PaymentType paymentType20 = payment19.getPaymentType();
        java.util.UUID uUID21 = payment19.getBookingID();
        models.payment.Payment.PaymentType paymentType22 = models.payment.Payment.PaymentType.FINAL;
        payment19.setPaymentType(paymentType22);
        java.util.UUID uUID24 = payment19.getPaymentID();
        models.payment.PaymentMethod paymentMethod26 = models.payment.Payment.generateMethod("");
        payment19.setPaymentMethod(paymentMethod26);
        models.payment.Payment.PaymentStatus paymentStatus28 = models.payment.Payment.PaymentStatus.PENDING;
        models.payment.Payment.PaymentType paymentType29 = null;
        models.payment.Payment payment30 = new models.payment.Payment(uUID10, booking11, (double) (byte) 0, paymentMethod26, paymentStatus28, paymentType29);
        payment9.setPaymentMethod(paymentMethod26);
        java.util.UUID uUID32 = null;
        models.booking.Booking booking33 = null;
        java.util.UUID uUID35 = null;
        models.booking.Booking booking36 = null;
        models.payment.PaymentMethod paymentMethod38 = null;
        models.payment.Payment.PaymentStatus paymentStatus39 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType40 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment41 = new models.payment.Payment(uUID35, booking36, 100.0d, paymentMethod38, paymentStatus39, paymentType40);
        models.payment.Payment.PaymentType paymentType42 = payment41.getPaymentType();
        java.util.UUID uUID43 = payment41.getBookingID();
        models.payment.Payment.PaymentType paymentType44 = models.payment.Payment.PaymentType.FINAL;
        payment41.setPaymentType(paymentType44);
        java.util.UUID uUID46 = payment41.getPaymentID();
        models.payment.PaymentMethod paymentMethod48 = models.payment.Payment.generateMethod("");
        payment41.setPaymentMethod(paymentMethod48);
        models.payment.Payment.PaymentStatus paymentStatus50 = models.payment.Payment.PaymentStatus.PENDING;
        models.payment.Payment.PaymentType paymentType51 = null;
        models.payment.Payment payment52 = new models.payment.Payment(uUID32, booking33, (double) (byte) 0, paymentMethod48, paymentStatus50, paymentType51);
        models.payment.Payment.PaymentStatus paymentStatus53 = payment52.getStatus();
        java.util.UUID uUID54 = null;
        models.booking.Booking booking55 = null;
        models.payment.PaymentMethod paymentMethod57 = null;
        models.payment.Payment.PaymentStatus paymentStatus58 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType59 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment60 = new models.payment.Payment(uUID54, booking55, 100.0d, paymentMethod57, paymentStatus58, paymentType59);
        models.payment.Payment.PaymentType paymentType61 = payment60.getPaymentType();
        java.util.UUID uUID62 = payment60.getBookingID();
        models.payment.Payment.PaymentType paymentType63 = models.payment.Payment.PaymentType.FINAL;
        payment60.setPaymentType(paymentType63);
        models.payment.Payment payment65 = new models.payment.Payment(uUID0, booking1, (double) 'a', paymentMethod26, paymentStatus53, paymentType63);
        models.booking.Booking booking66 = payment65.getBooking();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass67 = booking66.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + paymentStatus7 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus7.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType8 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType8.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentStatus17 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus17.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType18 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType18.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType20 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType20.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID21);
        org.junit.Assert.assertTrue("'" + paymentType22 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType22.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod26);
        org.junit.Assert.assertTrue("'" + paymentStatus28 + "' != '" + models.payment.Payment.PaymentStatus.PENDING + "'", paymentStatus28.equals(models.payment.Payment.PaymentStatus.PENDING));
        org.junit.Assert.assertTrue("'" + paymentStatus39 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus39.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType40 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType40.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType42 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType42.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID43);
        org.junit.Assert.assertTrue("'" + paymentType44 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType44.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod48);
        org.junit.Assert.assertTrue("'" + paymentStatus50 + "' != '" + models.payment.Payment.PaymentStatus.PENDING + "'", paymentStatus50.equals(models.payment.Payment.PaymentStatus.PENDING));
        org.junit.Assert.assertTrue("'" + paymentStatus53 + "' != '" + models.payment.Payment.PaymentStatus.PENDING + "'", paymentStatus53.equals(models.payment.Payment.PaymentStatus.PENDING));
        org.junit.Assert.assertTrue("'" + paymentStatus58 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus58.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType59 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType59.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType61 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType61.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID62);
        org.junit.Assert.assertTrue("'" + paymentType63 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType63.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(booking66);
    }

    @Test
    public void test117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test117");
        java.util.UUID uUID0 = null;
        models.booking.Booking booking1 = null;
        models.payment.PaymentMethod paymentMethod3 = null;
        models.payment.Payment.PaymentStatus paymentStatus4 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType5 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment6 = new models.payment.Payment(uUID0, booking1, 100.0d, paymentMethod3, paymentStatus4, paymentType5);
        models.payment.Payment.PaymentType paymentType7 = payment6.getPaymentType();
        java.util.UUID uUID8 = payment6.getBookingID();
        models.payment.Payment.PaymentType paymentType9 = models.payment.Payment.PaymentType.FINAL;
        payment6.setPaymentType(paymentType9);
        models.payment.Payment.PaymentType paymentType11 = payment6.getPaymentType();
        java.lang.Class<?> wildcardClass12 = paymentType11.getClass();
        org.junit.Assert.assertTrue("'" + paymentStatus4 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus4.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType5 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType5.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType7 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType7.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID8);
        org.junit.Assert.assertTrue("'" + paymentType9 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType9.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType11 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType11.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test118");
        models.booking.Booking booking1 = null;
        models.booking.Booking booking3 = null;
        java.util.UUID uUID4 = null;
        models.booking.Booking booking5 = null;
        models.payment.PaymentMethod paymentMethod7 = null;
        models.payment.Payment.PaymentStatus paymentStatus8 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType9 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment10 = new models.payment.Payment(uUID4, booking5, 100.0d, paymentMethod7, paymentStatus8, paymentType9);
        models.payment.Payment.PaymentType paymentType11 = payment10.getPaymentType();
        java.util.UUID uUID12 = payment10.getBookingID();
        models.payment.Payment.PaymentType paymentType13 = models.payment.Payment.PaymentType.FINAL;
        payment10.setPaymentType(paymentType13);
        java.util.UUID uUID15 = payment10.getPaymentID();
        models.payment.PaymentMethod paymentMethod17 = models.payment.Payment.generateMethod("");
        payment10.setPaymentMethod(paymentMethod17);
        java.util.UUID uUID19 = null;
        models.booking.Booking booking20 = null;
        models.payment.PaymentMethod paymentMethod22 = null;
        models.payment.Payment.PaymentStatus paymentStatus23 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType24 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment25 = new models.payment.Payment(uUID19, booking20, 100.0d, paymentMethod22, paymentStatus23, paymentType24);
        models.payment.Payment.PaymentType paymentType26 = payment25.getPaymentType();
        models.payment.Payment.PaymentType paymentType27 = payment25.getPaymentType();
        models.payment.Payment payment28 = new models.payment.Payment((double) 10, booking3, paymentMethod17, paymentType27);
        java.util.UUID uUID29 = null;
        models.booking.Booking booking30 = null;
        models.payment.PaymentMethod paymentMethod32 = null;
        models.payment.Payment.PaymentStatus paymentStatus33 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType34 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment35 = new models.payment.Payment(uUID29, booking30, 100.0d, paymentMethod32, paymentStatus33, paymentType34);
        models.payment.Payment.PaymentType paymentType36 = payment35.getPaymentType();
        java.util.UUID uUID37 = payment35.getBookingID();
        models.payment.Payment.PaymentType paymentType38 = models.payment.Payment.PaymentType.FINAL;
        payment35.setPaymentType(paymentType38);
        models.payment.PaymentMethod paymentMethod40 = payment35.getMethod();
        models.payment.Payment.PaymentType paymentType41 = payment35.getPaymentType();
        models.payment.Payment payment42 = new models.payment.Payment((double) 0, booking1, paymentMethod17, paymentType41);
        models.booking.Booking booking43 = payment42.getBooking();
        org.junit.Assert.assertTrue("'" + paymentStatus8 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus8.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType9 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType9.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType11 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType11.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID12);
        org.junit.Assert.assertTrue("'" + paymentType13 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType13.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod17);
        org.junit.Assert.assertTrue("'" + paymentStatus23 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus23.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType24 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType24.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType26 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType26.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType27 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType27.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentStatus33 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus33.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType34 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType34.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType36 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType36.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID37);
        org.junit.Assert.assertTrue("'" + paymentType38 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType38.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(paymentMethod40);
        org.junit.Assert.assertTrue("'" + paymentType41 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType41.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(booking43);
    }

    @Test
    public void test119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test119");
        models.booking.Booking booking1 = null;
        models.booking.Booking booking3 = null;
        models.booking.Booking booking5 = null;
        java.util.UUID uUID6 = null;
        models.booking.Booking booking7 = null;
        models.payment.PaymentMethod paymentMethod9 = null;
        models.payment.Payment.PaymentStatus paymentStatus10 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType11 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment12 = new models.payment.Payment(uUID6, booking7, 100.0d, paymentMethod9, paymentStatus10, paymentType11);
        models.payment.Payment.PaymentType paymentType13 = payment12.getPaymentType();
        java.util.UUID uUID14 = payment12.getBookingID();
        models.payment.Payment.PaymentType paymentType15 = models.payment.Payment.PaymentType.FINAL;
        payment12.setPaymentType(paymentType15);
        java.util.UUID uUID17 = payment12.getPaymentID();
        models.payment.PaymentMethod paymentMethod19 = models.payment.Payment.generateMethod("");
        payment12.setPaymentMethod(paymentMethod19);
        java.util.UUID uUID21 = null;
        models.booking.Booking booking22 = null;
        models.payment.PaymentMethod paymentMethod24 = null;
        models.payment.Payment.PaymentStatus paymentStatus25 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType26 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment27 = new models.payment.Payment(uUID21, booking22, 100.0d, paymentMethod24, paymentStatus25, paymentType26);
        models.payment.Payment.PaymentType paymentType28 = payment27.getPaymentType();
        models.payment.Payment.PaymentType paymentType29 = payment27.getPaymentType();
        models.payment.Payment payment30 = new models.payment.Payment((double) 10, booking5, paymentMethod19, paymentType29);
        java.util.UUID uUID31 = null;
        models.booking.Booking booking32 = null;
        models.payment.PaymentMethod paymentMethod34 = null;
        models.payment.Payment.PaymentStatus paymentStatus35 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType36 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment37 = new models.payment.Payment(uUID31, booking32, 100.0d, paymentMethod34, paymentStatus35, paymentType36);
        models.payment.Payment.PaymentType paymentType38 = payment37.getPaymentType();
        java.util.UUID uUID39 = payment37.getBookingID();
        models.payment.Payment.PaymentType paymentType40 = models.payment.Payment.PaymentType.FINAL;
        payment37.setPaymentType(paymentType40);
        models.payment.PaymentMethod paymentMethod42 = payment37.getMethod();
        models.payment.Payment.PaymentType paymentType43 = payment37.getPaymentType();
        models.payment.Payment payment44 = new models.payment.Payment((double) 0, booking3, paymentMethod19, paymentType43);
        models.booking.Booking booking46 = null;
        java.util.UUID uUID47 = null;
        models.booking.Booking booking48 = null;
        models.payment.PaymentMethod paymentMethod50 = null;
        models.payment.Payment.PaymentStatus paymentStatus51 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType52 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment53 = new models.payment.Payment(uUID47, booking48, 100.0d, paymentMethod50, paymentStatus51, paymentType52);
        models.payment.Payment.PaymentType paymentType54 = payment53.getPaymentType();
        java.util.UUID uUID55 = payment53.getBookingID();
        models.payment.Payment.PaymentType paymentType56 = models.payment.Payment.PaymentType.FINAL;
        payment53.setPaymentType(paymentType56);
        java.util.UUID uUID58 = payment53.getPaymentID();
        models.payment.PaymentMethod paymentMethod60 = models.payment.Payment.generateMethod("");
        payment53.setPaymentMethod(paymentMethod60);
        java.util.UUID uUID62 = null;
        models.booking.Booking booking63 = null;
        models.payment.PaymentMethod paymentMethod65 = null;
        models.payment.Payment.PaymentStatus paymentStatus66 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType67 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment68 = new models.payment.Payment(uUID62, booking63, 100.0d, paymentMethod65, paymentStatus66, paymentType67);
        models.payment.Payment.PaymentType paymentType69 = payment68.getPaymentType();
        models.payment.Payment.PaymentType paymentType70 = payment68.getPaymentType();
        models.payment.Payment payment71 = new models.payment.Payment((double) 10, booking46, paymentMethod60, paymentType70);
        models.payment.Payment payment72 = new models.payment.Payment((double) 10, booking1, paymentMethod19, paymentType70);
        models.payment.PaymentMethod paymentMethod73 = payment72.getMethod();
        models.payment.PaymentMethod paymentMethod74 = payment72.getMethod();
        org.junit.Assert.assertTrue("'" + paymentStatus10 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus10.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType11 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType11.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType13 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType13.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID14);
        org.junit.Assert.assertTrue("'" + paymentType15 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType15.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod19);
        org.junit.Assert.assertTrue("'" + paymentStatus25 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus25.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType26 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType26.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType28 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType28.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType29 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType29.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentStatus35 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus35.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType36 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType36.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType38 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType38.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID39);
        org.junit.Assert.assertTrue("'" + paymentType40 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType40.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(paymentMethod42);
        org.junit.Assert.assertTrue("'" + paymentType43 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType43.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentStatus51 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus51.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType52 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType52.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType54 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType54.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID55);
        org.junit.Assert.assertTrue("'" + paymentType56 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType56.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod60);
        org.junit.Assert.assertTrue("'" + paymentStatus66 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus66.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType67 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType67.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType69 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType69.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType70 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType70.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod74);
    }

    @Test
    public void test120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test120");
        java.util.UUID uUID0 = null;
        models.booking.Booking booking1 = null;
        models.payment.PaymentMethod paymentMethod3 = null;
        models.payment.Payment.PaymentStatus paymentStatus4 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType5 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment6 = new models.payment.Payment(uUID0, booking1, 100.0d, paymentMethod3, paymentStatus4, paymentType5);
        models.payment.Payment.PaymentType paymentType7 = payment6.getPaymentType();
        java.util.UUID uUID8 = payment6.getBookingID();
        java.util.UUID uUID9 = payment6.getPaymentID();
        models.booking.Booking booking11 = null;
        models.booking.Booking booking13 = null;
        java.util.UUID uUID14 = null;
        models.booking.Booking booking15 = null;
        models.payment.PaymentMethod paymentMethod17 = null;
        models.payment.Payment.PaymentStatus paymentStatus18 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType19 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment20 = new models.payment.Payment(uUID14, booking15, 100.0d, paymentMethod17, paymentStatus18, paymentType19);
        models.payment.Payment.PaymentType paymentType21 = payment20.getPaymentType();
        java.util.UUID uUID22 = payment20.getBookingID();
        models.payment.Payment.PaymentType paymentType23 = models.payment.Payment.PaymentType.FINAL;
        payment20.setPaymentType(paymentType23);
        java.util.UUID uUID25 = payment20.getPaymentID();
        models.payment.PaymentMethod paymentMethod27 = models.payment.Payment.generateMethod("");
        payment20.setPaymentMethod(paymentMethod27);
        java.util.UUID uUID29 = null;
        models.booking.Booking booking30 = null;
        models.payment.PaymentMethod paymentMethod32 = null;
        models.payment.Payment.PaymentStatus paymentStatus33 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType34 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment35 = new models.payment.Payment(uUID29, booking30, 100.0d, paymentMethod32, paymentStatus33, paymentType34);
        models.payment.Payment.PaymentType paymentType36 = payment35.getPaymentType();
        models.payment.Payment.PaymentType paymentType37 = payment35.getPaymentType();
        models.payment.Payment payment38 = new models.payment.Payment((double) 10, booking13, paymentMethod27, paymentType37);
        models.booking.Booking booking40 = null;
        models.payment.PaymentMethod paymentMethod42 = models.payment.Payment.generateMethod("hi!");
        java.util.UUID uUID43 = null;
        models.booking.Booking booking44 = null;
        models.payment.PaymentMethod paymentMethod46 = null;
        models.payment.Payment.PaymentStatus paymentStatus47 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType48 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment49 = new models.payment.Payment(uUID43, booking44, 100.0d, paymentMethod46, paymentStatus47, paymentType48);
        models.payment.Payment.PaymentType paymentType50 = payment49.getPaymentType();
        models.payment.Payment payment51 = new models.payment.Payment(0.0d, booking40, paymentMethod42, paymentType50);
        models.payment.Payment payment52 = new models.payment.Payment((double) (short) -1, booking11, paymentMethod27, paymentType50);
        payment6.setPaymentMethod(paymentMethod27);
        models.booking.Booking booking54 = payment6.getBooking();
        org.junit.Assert.assertTrue("'" + paymentStatus4 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus4.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType5 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType5.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType7 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType7.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID9);
        org.junit.Assert.assertTrue("'" + paymentStatus18 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus18.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType19 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType19.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType21 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType21.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID22);
        org.junit.Assert.assertTrue("'" + paymentType23 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType23.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod27);
        org.junit.Assert.assertTrue("'" + paymentStatus33 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus33.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType34 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType34.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType36 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType36.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType37 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType37.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod42);
        org.junit.Assert.assertTrue("'" + paymentStatus47 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus47.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType48 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType48.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType50 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType50.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(booking54);
    }

    @Test
    public void test121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test121");
        java.util.UUID uUID0 = null;
        models.booking.Booking booking1 = null;
        models.payment.PaymentMethod paymentMethod3 = null;
        models.payment.Payment.PaymentStatus paymentStatus4 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType5 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment6 = new models.payment.Payment(uUID0, booking1, 100.0d, paymentMethod3, paymentStatus4, paymentType5);
        models.payment.Payment.PaymentType paymentType7 = payment6.getPaymentType();
        java.util.UUID uUID8 = payment6.getPaymentID();
        models.payment.Payment.PaymentStatus paymentStatus9 = payment6.getStatus();
        models.booking.Booking booking10 = payment6.getBooking();
        java.util.UUID uUID11 = null;
        models.booking.Booking booking12 = null;
        java.util.UUID uUID14 = null;
        models.booking.Booking booking15 = null;
        models.payment.PaymentMethod paymentMethod17 = null;
        models.payment.Payment.PaymentStatus paymentStatus18 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType19 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment20 = new models.payment.Payment(uUID14, booking15, 100.0d, paymentMethod17, paymentStatus18, paymentType19);
        models.payment.Payment.PaymentType paymentType21 = payment20.getPaymentType();
        java.util.UUID uUID22 = payment20.getBookingID();
        models.payment.Payment.PaymentType paymentType23 = models.payment.Payment.PaymentType.FINAL;
        payment20.setPaymentType(paymentType23);
        java.util.UUID uUID25 = payment20.getPaymentID();
        models.payment.PaymentMethod paymentMethod27 = models.payment.Payment.generateMethod("");
        payment20.setPaymentMethod(paymentMethod27);
        java.util.UUID uUID29 = null;
        models.booking.Booking booking30 = null;
        models.payment.PaymentMethod paymentMethod32 = null;
        models.payment.Payment.PaymentStatus paymentStatus33 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType34 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment35 = new models.payment.Payment(uUID29, booking30, 100.0d, paymentMethod32, paymentStatus33, paymentType34);
        models.payment.Payment.PaymentType paymentType36 = payment35.getPaymentType();
        java.util.UUID uUID37 = payment35.getBookingID();
        models.payment.Payment.PaymentType paymentType38 = models.payment.Payment.PaymentType.FINAL;
        payment35.setPaymentType(paymentType38);
        models.payment.PaymentMethod paymentMethod40 = payment35.getMethod();
        models.payment.Payment.PaymentType paymentType41 = payment35.getPaymentType();
        models.payment.Payment.PaymentStatus paymentStatus42 = payment35.getStatus();
        models.payment.Payment.PaymentType paymentType43 = models.payment.Payment.PaymentType.REFUND;
        models.payment.Payment payment44 = new models.payment.Payment(uUID11, booking12, (double) '#', paymentMethod27, paymentStatus42, paymentType43);
        payment6.setPaymentType(paymentType43);
        org.junit.Assert.assertTrue("'" + paymentStatus4 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus4.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType5 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType5.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType7 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType7.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID8);
        org.junit.Assert.assertTrue("'" + paymentStatus9 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus9.equals(models.payment.Payment.PaymentStatus.FAILED));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(booking10);
        org.junit.Assert.assertTrue("'" + paymentStatus18 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus18.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType19 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType19.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType21 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType21.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID22);
        org.junit.Assert.assertTrue("'" + paymentType23 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType23.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod27);
        org.junit.Assert.assertTrue("'" + paymentStatus33 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus33.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType34 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType34.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType36 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType36.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID37);
        org.junit.Assert.assertTrue("'" + paymentType38 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType38.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(paymentMethod40);
        org.junit.Assert.assertTrue("'" + paymentType41 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType41.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentStatus42 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus42.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType43 + "' != '" + models.payment.Payment.PaymentType.REFUND + "'", paymentType43.equals(models.payment.Payment.PaymentType.REFUND));
    }

    @Test
    public void test122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test122");
        java.util.UUID uUID0 = null;
        models.booking.Booking booking1 = null;
        models.payment.PaymentMethod paymentMethod3 = null;
        models.payment.Payment.PaymentStatus paymentStatus4 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType5 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment6 = new models.payment.Payment(uUID0, booking1, 100.0d, paymentMethod3, paymentStatus4, paymentType5);
        models.payment.Payment.PaymentType paymentType7 = payment6.getPaymentType();
        models.payment.Payment.PaymentType paymentType8 = payment6.getPaymentType();
        models.payment.Payment.PaymentType paymentType9 = payment6.getPaymentType();
        java.lang.Class<?> wildcardClass10 = paymentType9.getClass();
        org.junit.Assert.assertTrue("'" + paymentStatus4 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus4.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType5 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType5.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType7 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType7.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType8 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType8.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType9 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType9.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test123");
        java.util.UUID uUID0 = null;
        models.booking.Booking booking1 = null;
        models.payment.PaymentMethod paymentMethod3 = null;
        models.payment.Payment.PaymentStatus paymentStatus4 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType5 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment6 = new models.payment.Payment(uUID0, booking1, 100.0d, paymentMethod3, paymentStatus4, paymentType5);
        models.payment.Payment.PaymentType paymentType7 = payment6.getPaymentType();
        java.util.UUID uUID8 = payment6.getBookingID();
        models.payment.Payment.PaymentType paymentType9 = models.payment.Payment.PaymentType.FINAL;
        payment6.setPaymentType(paymentType9);
        models.payment.PaymentMethod paymentMethod11 = payment6.getMethod();
        models.payment.Payment.PaymentType paymentType12 = payment6.getPaymentType();
        models.payment.Payment.PaymentStatus paymentStatus13 = payment6.getStatus();
        java.util.UUID uUID14 = payment6.getBookingID();
        models.payment.PaymentMethod paymentMethod15 = payment6.getMethod();
        org.junit.Assert.assertTrue("'" + paymentStatus4 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus4.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType5 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType5.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType7 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType7.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID8);
        org.junit.Assert.assertTrue("'" + paymentType9 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType9.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(paymentMethod11);
        org.junit.Assert.assertTrue("'" + paymentType12 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType12.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentStatus13 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus13.equals(models.payment.Payment.PaymentStatus.FAILED));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(paymentMethod15);
    }

    @Test
    public void test124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test124");
        models.booking.Booking booking1 = null;
        models.booking.Booking booking3 = null;
        java.util.UUID uUID4 = null;
        models.booking.Booking booking5 = null;
        models.payment.PaymentMethod paymentMethod7 = null;
        models.payment.Payment.PaymentStatus paymentStatus8 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType9 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment10 = new models.payment.Payment(uUID4, booking5, 100.0d, paymentMethod7, paymentStatus8, paymentType9);
        models.payment.Payment.PaymentType paymentType11 = payment10.getPaymentType();
        java.util.UUID uUID12 = payment10.getBookingID();
        models.payment.Payment.PaymentType paymentType13 = models.payment.Payment.PaymentType.FINAL;
        payment10.setPaymentType(paymentType13);
        java.util.UUID uUID15 = payment10.getPaymentID();
        models.payment.PaymentMethod paymentMethod17 = models.payment.Payment.generateMethod("");
        payment10.setPaymentMethod(paymentMethod17);
        java.util.UUID uUID19 = null;
        models.booking.Booking booking20 = null;
        models.payment.PaymentMethod paymentMethod22 = null;
        models.payment.Payment.PaymentStatus paymentStatus23 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType24 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment25 = new models.payment.Payment(uUID19, booking20, 100.0d, paymentMethod22, paymentStatus23, paymentType24);
        models.payment.Payment.PaymentType paymentType26 = payment25.getPaymentType();
        models.payment.Payment.PaymentType paymentType27 = payment25.getPaymentType();
        models.payment.Payment payment28 = new models.payment.Payment((double) 10, booking3, paymentMethod17, paymentType27);
        java.util.UUID uUID29 = null;
        models.booking.Booking booking30 = null;
        models.payment.PaymentMethod paymentMethod32 = null;
        models.payment.Payment.PaymentStatus paymentStatus33 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType34 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment35 = new models.payment.Payment(uUID29, booking30, 100.0d, paymentMethod32, paymentStatus33, paymentType34);
        models.payment.Payment payment36 = new models.payment.Payment((double) '4', booking1, paymentMethod17, paymentType34);
        models.booking.Booking booking37 = payment36.getBooking();
        models.booking.Booking booking38 = payment36.getBooking();
        org.junit.Assert.assertTrue("'" + paymentStatus8 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus8.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType9 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType9.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType11 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType11.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID12);
        org.junit.Assert.assertTrue("'" + paymentType13 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType13.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod17);
        org.junit.Assert.assertTrue("'" + paymentStatus23 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus23.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType24 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType24.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType26 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType26.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType27 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType27.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentStatus33 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus33.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType34 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType34.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(booking37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(booking38);
    }

    @Test
    public void test125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test125");
        java.util.UUID uUID0 = null;
        models.booking.Booking booking1 = null;
        models.payment.PaymentMethod paymentMethod3 = null;
        models.payment.Payment.PaymentStatus paymentStatus4 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType5 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment6 = new models.payment.Payment(uUID0, booking1, 100.0d, paymentMethod3, paymentStatus4, paymentType5);
        double double7 = payment6.getAmount();
        models.booking.Booking booking8 = payment6.getBooking();
        models.booking.Booking booking9 = payment6.getBooking();
        models.booking.Booking booking10 = payment6.getBooking();
        models.booking.Booking booking11 = payment6.getBooking();
        org.junit.Assert.assertTrue("'" + paymentStatus4 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus4.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType5 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType5.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 100.0d + "'", double7 == 100.0d);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(booking8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(booking9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(booking10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(booking11);
    }

    @Test
    public void test126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test126");
        models.booking.Booking booking1 = null;
        models.booking.Booking booking3 = null;
        java.util.UUID uUID4 = null;
        models.booking.Booking booking5 = null;
        models.payment.PaymentMethod paymentMethod7 = null;
        models.payment.Payment.PaymentStatus paymentStatus8 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType9 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment10 = new models.payment.Payment(uUID4, booking5, 100.0d, paymentMethod7, paymentStatus8, paymentType9);
        models.payment.Payment.PaymentType paymentType11 = payment10.getPaymentType();
        java.util.UUID uUID12 = payment10.getBookingID();
        models.payment.Payment.PaymentType paymentType13 = models.payment.Payment.PaymentType.FINAL;
        payment10.setPaymentType(paymentType13);
        java.util.UUID uUID15 = payment10.getPaymentID();
        models.payment.PaymentMethod paymentMethod17 = models.payment.Payment.generateMethod("");
        payment10.setPaymentMethod(paymentMethod17);
        java.util.UUID uUID19 = null;
        models.booking.Booking booking20 = null;
        models.payment.PaymentMethod paymentMethod22 = null;
        models.payment.Payment.PaymentStatus paymentStatus23 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType24 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment25 = new models.payment.Payment(uUID19, booking20, 100.0d, paymentMethod22, paymentStatus23, paymentType24);
        models.payment.Payment.PaymentType paymentType26 = payment25.getPaymentType();
        models.payment.Payment.PaymentType paymentType27 = payment25.getPaymentType();
        models.payment.Payment payment28 = new models.payment.Payment((double) 10, booking3, paymentMethod17, paymentType27);
        models.booking.Booking booking30 = null;
        models.payment.PaymentMethod paymentMethod32 = models.payment.Payment.generateMethod("hi!");
        java.util.UUID uUID33 = null;
        models.booking.Booking booking34 = null;
        models.payment.PaymentMethod paymentMethod36 = null;
        models.payment.Payment.PaymentStatus paymentStatus37 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType38 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment39 = new models.payment.Payment(uUID33, booking34, 100.0d, paymentMethod36, paymentStatus37, paymentType38);
        models.payment.Payment.PaymentType paymentType40 = payment39.getPaymentType();
        models.payment.Payment payment41 = new models.payment.Payment(0.0d, booking30, paymentMethod32, paymentType40);
        models.payment.Payment payment42 = new models.payment.Payment((double) (short) -1, booking1, paymentMethod17, paymentType40);
        java.util.UUID uUID43 = payment42.getBookingID();
        java.lang.Class<?> wildcardClass44 = payment42.getClass();
        org.junit.Assert.assertTrue("'" + paymentStatus8 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus8.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType9 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType9.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType11 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType11.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID12);
        org.junit.Assert.assertTrue("'" + paymentType13 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType13.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod17);
        org.junit.Assert.assertTrue("'" + paymentStatus23 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus23.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType24 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType24.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType26 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType26.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType27 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType27.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod32);
        org.junit.Assert.assertTrue("'" + paymentStatus37 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus37.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType38 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType38.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType40 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType40.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass44);
    }

    @Test
    public void test127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test127");
        java.util.UUID uUID0 = null;
        models.booking.Booking booking1 = null;
        java.util.UUID uUID3 = null;
        models.booking.Booking booking4 = null;
        models.payment.PaymentMethod paymentMethod6 = null;
        models.payment.Payment.PaymentStatus paymentStatus7 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType8 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment9 = new models.payment.Payment(uUID3, booking4, 100.0d, paymentMethod6, paymentStatus7, paymentType8);
        java.util.UUID uUID10 = null;
        models.booking.Booking booking11 = null;
        java.util.UUID uUID13 = null;
        models.booking.Booking booking14 = null;
        models.payment.PaymentMethod paymentMethod16 = null;
        models.payment.Payment.PaymentStatus paymentStatus17 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType18 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment19 = new models.payment.Payment(uUID13, booking14, 100.0d, paymentMethod16, paymentStatus17, paymentType18);
        models.payment.Payment.PaymentType paymentType20 = payment19.getPaymentType();
        java.util.UUID uUID21 = payment19.getBookingID();
        models.payment.Payment.PaymentType paymentType22 = models.payment.Payment.PaymentType.FINAL;
        payment19.setPaymentType(paymentType22);
        java.util.UUID uUID24 = payment19.getPaymentID();
        models.payment.PaymentMethod paymentMethod26 = models.payment.Payment.generateMethod("");
        payment19.setPaymentMethod(paymentMethod26);
        models.payment.Payment.PaymentStatus paymentStatus28 = models.payment.Payment.PaymentStatus.PENDING;
        models.payment.Payment.PaymentType paymentType29 = null;
        models.payment.Payment payment30 = new models.payment.Payment(uUID10, booking11, (double) (byte) 0, paymentMethod26, paymentStatus28, paymentType29);
        payment9.setPaymentMethod(paymentMethod26);
        java.util.UUID uUID32 = null;
        models.booking.Booking booking33 = null;
        java.util.UUID uUID35 = null;
        models.booking.Booking booking36 = null;
        models.payment.PaymentMethod paymentMethod38 = null;
        models.payment.Payment.PaymentStatus paymentStatus39 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType40 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment41 = new models.payment.Payment(uUID35, booking36, 100.0d, paymentMethod38, paymentStatus39, paymentType40);
        models.payment.Payment.PaymentType paymentType42 = payment41.getPaymentType();
        java.util.UUID uUID43 = payment41.getBookingID();
        models.payment.Payment.PaymentType paymentType44 = models.payment.Payment.PaymentType.FINAL;
        payment41.setPaymentType(paymentType44);
        java.util.UUID uUID46 = payment41.getPaymentID();
        models.payment.PaymentMethod paymentMethod48 = models.payment.Payment.generateMethod("");
        payment41.setPaymentMethod(paymentMethod48);
        models.payment.Payment.PaymentStatus paymentStatus50 = models.payment.Payment.PaymentStatus.PENDING;
        models.payment.Payment.PaymentType paymentType51 = null;
        models.payment.Payment payment52 = new models.payment.Payment(uUID32, booking33, (double) (byte) 0, paymentMethod48, paymentStatus50, paymentType51);
        models.payment.Payment.PaymentStatus paymentStatus53 = payment52.getStatus();
        java.util.UUID uUID54 = null;
        models.booking.Booking booking55 = null;
        models.payment.PaymentMethod paymentMethod57 = null;
        models.payment.Payment.PaymentStatus paymentStatus58 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType59 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment60 = new models.payment.Payment(uUID54, booking55, 100.0d, paymentMethod57, paymentStatus58, paymentType59);
        models.payment.Payment.PaymentType paymentType61 = payment60.getPaymentType();
        java.util.UUID uUID62 = payment60.getBookingID();
        models.payment.Payment.PaymentType paymentType63 = models.payment.Payment.PaymentType.FINAL;
        payment60.setPaymentType(paymentType63);
        models.payment.Payment payment65 = new models.payment.Payment(uUID0, booking1, (double) 'a', paymentMethod26, paymentStatus53, paymentType63);
        double double66 = payment65.getAmount();
        boolean boolean67 = payment65.processPayment();
        org.junit.Assert.assertTrue("'" + paymentStatus7 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus7.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType8 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType8.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentStatus17 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus17.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType18 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType18.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType20 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType20.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID21);
        org.junit.Assert.assertTrue("'" + paymentType22 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType22.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod26);
        org.junit.Assert.assertTrue("'" + paymentStatus28 + "' != '" + models.payment.Payment.PaymentStatus.PENDING + "'", paymentStatus28.equals(models.payment.Payment.PaymentStatus.PENDING));
        org.junit.Assert.assertTrue("'" + paymentStatus39 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus39.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType40 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType40.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType42 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType42.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID43);
        org.junit.Assert.assertTrue("'" + paymentType44 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType44.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod48);
        org.junit.Assert.assertTrue("'" + paymentStatus50 + "' != '" + models.payment.Payment.PaymentStatus.PENDING + "'", paymentStatus50.equals(models.payment.Payment.PaymentStatus.PENDING));
        org.junit.Assert.assertTrue("'" + paymentStatus53 + "' != '" + models.payment.Payment.PaymentStatus.PENDING + "'", paymentStatus53.equals(models.payment.Payment.PaymentStatus.PENDING));
        org.junit.Assert.assertTrue("'" + paymentStatus58 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus58.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType59 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType59.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType61 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType61.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID62);
        org.junit.Assert.assertTrue("'" + paymentType63 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType63.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 97.0d + "'", double66 == 97.0d);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
    }

    @Test
    public void test128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test128");
        models.booking.Booking booking1 = null;
        models.payment.PaymentMethod paymentMethod2 = null;
        java.util.UUID uUID3 = null;
        models.booking.Booking booking4 = null;
        java.util.UUID uUID6 = null;
        models.booking.Booking booking7 = null;
        models.payment.PaymentMethod paymentMethod9 = null;
        models.payment.Payment.PaymentStatus paymentStatus10 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType11 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment12 = new models.payment.Payment(uUID6, booking7, 100.0d, paymentMethod9, paymentStatus10, paymentType11);
        models.payment.Payment.PaymentType paymentType13 = payment12.getPaymentType();
        java.util.UUID uUID14 = payment12.getBookingID();
        models.payment.Payment.PaymentType paymentType15 = models.payment.Payment.PaymentType.FINAL;
        payment12.setPaymentType(paymentType15);
        java.util.UUID uUID17 = payment12.getPaymentID();
        models.payment.PaymentMethod paymentMethod19 = models.payment.Payment.generateMethod("");
        payment12.setPaymentMethod(paymentMethod19);
        java.util.UUID uUID21 = null;
        models.booking.Booking booking22 = null;
        models.payment.PaymentMethod paymentMethod24 = null;
        models.payment.Payment.PaymentStatus paymentStatus25 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType26 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment27 = new models.payment.Payment(uUID21, booking22, 100.0d, paymentMethod24, paymentStatus25, paymentType26);
        models.payment.Payment.PaymentType paymentType28 = payment27.getPaymentType();
        java.util.UUID uUID29 = payment27.getBookingID();
        models.payment.Payment.PaymentType paymentType30 = models.payment.Payment.PaymentType.FINAL;
        payment27.setPaymentType(paymentType30);
        models.payment.PaymentMethod paymentMethod32 = payment27.getMethod();
        models.payment.Payment.PaymentType paymentType33 = payment27.getPaymentType();
        models.payment.Payment.PaymentStatus paymentStatus34 = payment27.getStatus();
        models.payment.Payment.PaymentType paymentType35 = models.payment.Payment.PaymentType.REFUND;
        models.payment.Payment payment36 = new models.payment.Payment(uUID3, booking4, (double) '#', paymentMethod19, paymentStatus34, paymentType35);
        models.payment.Payment payment37 = new models.payment.Payment(0.0d, booking1, paymentMethod2, paymentType35);
        org.junit.Assert.assertTrue("'" + paymentStatus10 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus10.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType11 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType11.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType13 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType13.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID14);
        org.junit.Assert.assertTrue("'" + paymentType15 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType15.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod19);
        org.junit.Assert.assertTrue("'" + paymentStatus25 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus25.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType26 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType26.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType28 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType28.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID29);
        org.junit.Assert.assertTrue("'" + paymentType30 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType30.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(paymentMethod32);
        org.junit.Assert.assertTrue("'" + paymentType33 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType33.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentStatus34 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus34.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType35 + "' != '" + models.payment.Payment.PaymentType.REFUND + "'", paymentType35.equals(models.payment.Payment.PaymentType.REFUND));
    }

    @Test
    public void test129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test129");
        models.booking.Booking booking1 = null;
        models.booking.Booking booking3 = null;
        java.util.UUID uUID4 = null;
        models.booking.Booking booking5 = null;
        models.payment.PaymentMethod paymentMethod7 = null;
        models.payment.Payment.PaymentStatus paymentStatus8 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType9 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment10 = new models.payment.Payment(uUID4, booking5, 100.0d, paymentMethod7, paymentStatus8, paymentType9);
        models.payment.Payment.PaymentType paymentType11 = payment10.getPaymentType();
        java.util.UUID uUID12 = payment10.getBookingID();
        models.payment.Payment.PaymentType paymentType13 = models.payment.Payment.PaymentType.FINAL;
        payment10.setPaymentType(paymentType13);
        java.util.UUID uUID15 = payment10.getPaymentID();
        models.payment.PaymentMethod paymentMethod17 = models.payment.Payment.generateMethod("");
        payment10.setPaymentMethod(paymentMethod17);
        java.util.UUID uUID19 = null;
        models.booking.Booking booking20 = null;
        models.payment.PaymentMethod paymentMethod22 = null;
        models.payment.Payment.PaymentStatus paymentStatus23 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType24 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment25 = new models.payment.Payment(uUID19, booking20, 100.0d, paymentMethod22, paymentStatus23, paymentType24);
        models.payment.Payment.PaymentType paymentType26 = payment25.getPaymentType();
        models.payment.Payment.PaymentType paymentType27 = payment25.getPaymentType();
        models.payment.Payment payment28 = new models.payment.Payment((double) 10, booking3, paymentMethod17, paymentType27);
        models.booking.Booking booking30 = null;
        models.payment.PaymentMethod paymentMethod32 = models.payment.Payment.generateMethod("hi!");
        java.util.UUID uUID33 = null;
        models.booking.Booking booking34 = null;
        models.payment.PaymentMethod paymentMethod36 = null;
        models.payment.Payment.PaymentStatus paymentStatus37 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType38 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment39 = new models.payment.Payment(uUID33, booking34, 100.0d, paymentMethod36, paymentStatus37, paymentType38);
        models.payment.Payment.PaymentType paymentType40 = payment39.getPaymentType();
        models.payment.Payment payment41 = new models.payment.Payment(0.0d, booking30, paymentMethod32, paymentType40);
        models.payment.Payment payment42 = new models.payment.Payment((double) (short) -1, booking1, paymentMethod17, paymentType40);
        java.util.UUID uUID43 = payment42.getBookingID();
        models.booking.Booking booking44 = payment42.getBooking();
        org.junit.Assert.assertTrue("'" + paymentStatus8 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus8.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType9 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType9.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType11 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType11.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID12);
        org.junit.Assert.assertTrue("'" + paymentType13 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType13.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod17);
        org.junit.Assert.assertTrue("'" + paymentStatus23 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus23.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType24 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType24.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType26 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType26.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType27 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType27.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod32);
        org.junit.Assert.assertTrue("'" + paymentStatus37 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus37.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType38 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType38.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType40 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType40.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(booking44);
    }

    @Test
    public void test130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test130");
        java.util.UUID uUID0 = null;
        models.booking.Booking booking1 = null;
        models.payment.PaymentMethod paymentMethod3 = null;
        models.payment.Payment.PaymentStatus paymentStatus4 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType5 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment6 = new models.payment.Payment(uUID0, booking1, 100.0d, paymentMethod3, paymentStatus4, paymentType5);
        models.payment.Payment.PaymentType paymentType7 = payment6.getPaymentType();
        double double8 = payment6.getAmount();
        java.util.UUID uUID9 = payment6.getPaymentID();
        java.util.UUID uUID10 = payment6.getPaymentID();
        org.junit.Assert.assertTrue("'" + paymentStatus4 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus4.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType5 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType5.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType7 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType7.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 100.0d + "'", double8 == 100.0d);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID10);
    }

    @Test
    public void test131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test131");
        java.util.UUID uUID0 = null;
        models.booking.Booking booking1 = null;
        models.payment.PaymentMethod paymentMethod3 = null;
        models.payment.Payment.PaymentStatus paymentStatus4 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType5 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment6 = new models.payment.Payment(uUID0, booking1, 100.0d, paymentMethod3, paymentStatus4, paymentType5);
        double double7 = payment6.getAmount();
        models.booking.Booking booking8 = payment6.getBooking();
        models.booking.Booking booking9 = payment6.getBooking();
        models.booking.Booking booking10 = payment6.getBooking();
        java.util.UUID uUID11 = null;
        models.booking.Booking booking12 = null;
        java.util.UUID uUID14 = null;
        models.booking.Booking booking15 = null;
        models.payment.PaymentMethod paymentMethod17 = null;
        models.payment.Payment.PaymentStatus paymentStatus18 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType19 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment20 = new models.payment.Payment(uUID14, booking15, 100.0d, paymentMethod17, paymentStatus18, paymentType19);
        java.util.UUID uUID21 = null;
        models.booking.Booking booking22 = null;
        java.util.UUID uUID24 = null;
        models.booking.Booking booking25 = null;
        models.payment.PaymentMethod paymentMethod27 = null;
        models.payment.Payment.PaymentStatus paymentStatus28 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType29 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment30 = new models.payment.Payment(uUID24, booking25, 100.0d, paymentMethod27, paymentStatus28, paymentType29);
        models.payment.Payment.PaymentType paymentType31 = payment30.getPaymentType();
        java.util.UUID uUID32 = payment30.getBookingID();
        models.payment.Payment.PaymentType paymentType33 = models.payment.Payment.PaymentType.FINAL;
        payment30.setPaymentType(paymentType33);
        java.util.UUID uUID35 = payment30.getPaymentID();
        models.payment.PaymentMethod paymentMethod37 = models.payment.Payment.generateMethod("");
        payment30.setPaymentMethod(paymentMethod37);
        models.payment.Payment.PaymentStatus paymentStatus39 = models.payment.Payment.PaymentStatus.PENDING;
        models.payment.Payment.PaymentType paymentType40 = null;
        models.payment.Payment payment41 = new models.payment.Payment(uUID21, booking22, (double) (byte) 0, paymentMethod37, paymentStatus39, paymentType40);
        payment20.setPaymentMethod(paymentMethod37);
        java.util.UUID uUID43 = null;
        models.booking.Booking booking44 = null;
        java.util.UUID uUID46 = null;
        models.booking.Booking booking47 = null;
        models.payment.PaymentMethod paymentMethod49 = null;
        models.payment.Payment.PaymentStatus paymentStatus50 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType51 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment52 = new models.payment.Payment(uUID46, booking47, 100.0d, paymentMethod49, paymentStatus50, paymentType51);
        models.payment.Payment.PaymentType paymentType53 = payment52.getPaymentType();
        java.util.UUID uUID54 = payment52.getBookingID();
        models.payment.Payment.PaymentType paymentType55 = models.payment.Payment.PaymentType.FINAL;
        payment52.setPaymentType(paymentType55);
        java.util.UUID uUID57 = payment52.getPaymentID();
        models.payment.PaymentMethod paymentMethod59 = models.payment.Payment.generateMethod("");
        payment52.setPaymentMethod(paymentMethod59);
        models.payment.Payment.PaymentStatus paymentStatus61 = models.payment.Payment.PaymentStatus.PENDING;
        models.payment.Payment.PaymentType paymentType62 = null;
        models.payment.Payment payment63 = new models.payment.Payment(uUID43, booking44, (double) (byte) 0, paymentMethod59, paymentStatus61, paymentType62);
        models.payment.Payment.PaymentStatus paymentStatus64 = payment63.getStatus();
        java.util.UUID uUID65 = null;
        models.booking.Booking booking66 = null;
        models.payment.PaymentMethod paymentMethod68 = null;
        models.payment.Payment.PaymentStatus paymentStatus69 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType70 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment71 = new models.payment.Payment(uUID65, booking66, 100.0d, paymentMethod68, paymentStatus69, paymentType70);
        models.payment.Payment.PaymentType paymentType72 = payment71.getPaymentType();
        java.util.UUID uUID73 = payment71.getBookingID();
        models.payment.Payment.PaymentType paymentType74 = models.payment.Payment.PaymentType.FINAL;
        payment71.setPaymentType(paymentType74);
        models.payment.Payment payment76 = new models.payment.Payment(uUID11, booking12, (double) 'a', paymentMethod37, paymentStatus64, paymentType74);
        payment6.setPaymentType(paymentType74);
        java.lang.Class<?> wildcardClass78 = payment6.getClass();
        org.junit.Assert.assertTrue("'" + paymentStatus4 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus4.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType5 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType5.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 100.0d + "'", double7 == 100.0d);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(booking8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(booking9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(booking10);
        org.junit.Assert.assertTrue("'" + paymentStatus18 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus18.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType19 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType19.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentStatus28 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus28.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType29 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType29.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType31 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType31.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID32);
        org.junit.Assert.assertTrue("'" + paymentType33 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType33.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod37);
        org.junit.Assert.assertTrue("'" + paymentStatus39 + "' != '" + models.payment.Payment.PaymentStatus.PENDING + "'", paymentStatus39.equals(models.payment.Payment.PaymentStatus.PENDING));
        org.junit.Assert.assertTrue("'" + paymentStatus50 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus50.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType51 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType51.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType53 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType53.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID54);
        org.junit.Assert.assertTrue("'" + paymentType55 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType55.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod59);
        org.junit.Assert.assertTrue("'" + paymentStatus61 + "' != '" + models.payment.Payment.PaymentStatus.PENDING + "'", paymentStatus61.equals(models.payment.Payment.PaymentStatus.PENDING));
        org.junit.Assert.assertTrue("'" + paymentStatus64 + "' != '" + models.payment.Payment.PaymentStatus.PENDING + "'", paymentStatus64.equals(models.payment.Payment.PaymentStatus.PENDING));
        org.junit.Assert.assertTrue("'" + paymentStatus69 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus69.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType70 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType70.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType72 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType72.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID73);
        org.junit.Assert.assertTrue("'" + paymentType74 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType74.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass78);
    }

    @Test
    public void test132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test132");
        java.util.UUID uUID0 = null;
        models.booking.Booking booking1 = null;
        java.util.UUID uUID3 = null;
        models.booking.Booking booking4 = null;
        java.util.UUID uUID6 = null;
        models.booking.Booking booking7 = null;
        models.payment.PaymentMethod paymentMethod9 = null;
        models.payment.Payment.PaymentStatus paymentStatus10 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType11 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment12 = new models.payment.Payment(uUID6, booking7, 100.0d, paymentMethod9, paymentStatus10, paymentType11);
        models.payment.Payment.PaymentType paymentType13 = payment12.getPaymentType();
        java.util.UUID uUID14 = payment12.getBookingID();
        models.payment.Payment.PaymentType paymentType15 = models.payment.Payment.PaymentType.FINAL;
        payment12.setPaymentType(paymentType15);
        java.util.UUID uUID17 = payment12.getPaymentID();
        models.payment.PaymentMethod paymentMethod19 = models.payment.Payment.generateMethod("");
        payment12.setPaymentMethod(paymentMethod19);
        models.payment.Payment.PaymentStatus paymentStatus21 = models.payment.Payment.PaymentStatus.PENDING;
        models.payment.Payment.PaymentType paymentType22 = null;
        models.payment.Payment payment23 = new models.payment.Payment(uUID3, booking4, (double) (byte) 0, paymentMethod19, paymentStatus21, paymentType22);
        models.payment.Payment.PaymentStatus paymentStatus24 = models.payment.Payment.PaymentStatus.PENDING;
        models.payment.Payment.PaymentType paymentType25 = models.payment.Payment.PaymentType.DEPOSIT;
        models.payment.Payment payment26 = new models.payment.Payment(uUID0, booking1, (double) (byte) 100, paymentMethod19, paymentStatus24, paymentType25);
        models.booking.Booking booking27 = payment26.getBooking();
        double double28 = payment26.getAmount();
        java.util.UUID uUID29 = payment26.getBookingID();
        java.util.UUID uUID30 = null;
        models.booking.Booking booking31 = null;
        java.util.UUID uUID33 = null;
        models.booking.Booking booking34 = null;
        models.payment.PaymentMethod paymentMethod36 = null;
        models.payment.Payment.PaymentStatus paymentStatus37 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType38 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment39 = new models.payment.Payment(uUID33, booking34, 100.0d, paymentMethod36, paymentStatus37, paymentType38);
        java.util.UUID uUID40 = null;
        models.booking.Booking booking41 = null;
        java.util.UUID uUID43 = null;
        models.booking.Booking booking44 = null;
        models.payment.PaymentMethod paymentMethod46 = null;
        models.payment.Payment.PaymentStatus paymentStatus47 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType48 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment49 = new models.payment.Payment(uUID43, booking44, 100.0d, paymentMethod46, paymentStatus47, paymentType48);
        models.payment.Payment.PaymentType paymentType50 = payment49.getPaymentType();
        java.util.UUID uUID51 = payment49.getBookingID();
        models.payment.Payment.PaymentType paymentType52 = models.payment.Payment.PaymentType.FINAL;
        payment49.setPaymentType(paymentType52);
        java.util.UUID uUID54 = payment49.getPaymentID();
        models.payment.PaymentMethod paymentMethod56 = models.payment.Payment.generateMethod("");
        payment49.setPaymentMethod(paymentMethod56);
        models.payment.Payment.PaymentStatus paymentStatus58 = models.payment.Payment.PaymentStatus.PENDING;
        models.payment.Payment.PaymentType paymentType59 = null;
        models.payment.Payment payment60 = new models.payment.Payment(uUID40, booking41, (double) (byte) 0, paymentMethod56, paymentStatus58, paymentType59);
        payment39.setPaymentMethod(paymentMethod56);
        java.util.UUID uUID62 = null;
        models.booking.Booking booking63 = null;
        java.util.UUID uUID65 = null;
        models.booking.Booking booking66 = null;
        models.payment.PaymentMethod paymentMethod68 = null;
        models.payment.Payment.PaymentStatus paymentStatus69 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType70 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment71 = new models.payment.Payment(uUID65, booking66, 100.0d, paymentMethod68, paymentStatus69, paymentType70);
        models.payment.Payment.PaymentType paymentType72 = payment71.getPaymentType();
        java.util.UUID uUID73 = payment71.getBookingID();
        models.payment.Payment.PaymentType paymentType74 = models.payment.Payment.PaymentType.FINAL;
        payment71.setPaymentType(paymentType74);
        java.util.UUID uUID76 = payment71.getPaymentID();
        models.payment.PaymentMethod paymentMethod78 = models.payment.Payment.generateMethod("");
        payment71.setPaymentMethod(paymentMethod78);
        models.payment.Payment.PaymentStatus paymentStatus80 = models.payment.Payment.PaymentStatus.PENDING;
        models.payment.Payment.PaymentType paymentType81 = null;
        models.payment.Payment payment82 = new models.payment.Payment(uUID62, booking63, (double) (byte) 0, paymentMethod78, paymentStatus80, paymentType81);
        models.payment.Payment.PaymentStatus paymentStatus83 = payment82.getStatus();
        java.util.UUID uUID84 = null;
        models.booking.Booking booking85 = null;
        models.payment.PaymentMethod paymentMethod87 = null;
        models.payment.Payment.PaymentStatus paymentStatus88 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType89 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment90 = new models.payment.Payment(uUID84, booking85, 100.0d, paymentMethod87, paymentStatus88, paymentType89);
        models.payment.Payment.PaymentType paymentType91 = payment90.getPaymentType();
        java.util.UUID uUID92 = payment90.getBookingID();
        models.payment.Payment.PaymentType paymentType93 = models.payment.Payment.PaymentType.FINAL;
        payment90.setPaymentType(paymentType93);
        models.payment.Payment payment95 = new models.payment.Payment(uUID30, booking31, (double) 'a', paymentMethod56, paymentStatus83, paymentType93);
        java.util.UUID uUID96 = payment95.getBookingID();
        models.payment.Payment.PaymentType paymentType97 = payment95.getPaymentType();
        payment26.setPaymentType(paymentType97);
        models.payment.Payment.PaymentType paymentType99 = payment26.getPaymentType();
        org.junit.Assert.assertTrue("'" + paymentStatus10 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus10.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType11 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType11.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType13 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType13.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID14);
        org.junit.Assert.assertTrue("'" + paymentType15 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType15.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod19);
        org.junit.Assert.assertTrue("'" + paymentStatus21 + "' != '" + models.payment.Payment.PaymentStatus.PENDING + "'", paymentStatus21.equals(models.payment.Payment.PaymentStatus.PENDING));
        org.junit.Assert.assertTrue("'" + paymentStatus24 + "' != '" + models.payment.Payment.PaymentStatus.PENDING + "'", paymentStatus24.equals(models.payment.Payment.PaymentStatus.PENDING));
        org.junit.Assert.assertTrue("'" + paymentType25 + "' != '" + models.payment.Payment.PaymentType.DEPOSIT + "'", paymentType25.equals(models.payment.Payment.PaymentType.DEPOSIT));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(booking27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 100.0d + "'", double28 == 100.0d);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID29);
        org.junit.Assert.assertTrue("'" + paymentStatus37 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus37.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType38 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType38.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentStatus47 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus47.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType48 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType48.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType50 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType50.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID51);
        org.junit.Assert.assertTrue("'" + paymentType52 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType52.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod56);
        org.junit.Assert.assertTrue("'" + paymentStatus58 + "' != '" + models.payment.Payment.PaymentStatus.PENDING + "'", paymentStatus58.equals(models.payment.Payment.PaymentStatus.PENDING));
        org.junit.Assert.assertTrue("'" + paymentStatus69 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus69.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType70 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType70.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType72 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType72.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID73);
        org.junit.Assert.assertTrue("'" + paymentType74 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType74.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod78);
        org.junit.Assert.assertTrue("'" + paymentStatus80 + "' != '" + models.payment.Payment.PaymentStatus.PENDING + "'", paymentStatus80.equals(models.payment.Payment.PaymentStatus.PENDING));
        org.junit.Assert.assertTrue("'" + paymentStatus83 + "' != '" + models.payment.Payment.PaymentStatus.PENDING + "'", paymentStatus83.equals(models.payment.Payment.PaymentStatus.PENDING));
        org.junit.Assert.assertTrue("'" + paymentStatus88 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus88.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType89 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType89.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType91 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType91.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID92);
        org.junit.Assert.assertTrue("'" + paymentType93 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType93.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID96);
        org.junit.Assert.assertTrue("'" + paymentType97 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType97.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType99 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType99.equals(models.payment.Payment.PaymentType.FINAL));
    }

    @Test
    public void test133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test133");
        models.booking.Booking booking1 = null;
        models.booking.Booking booking3 = null;
        models.booking.Booking booking5 = null;
        java.util.UUID uUID6 = null;
        models.booking.Booking booking7 = null;
        models.payment.PaymentMethod paymentMethod9 = null;
        models.payment.Payment.PaymentStatus paymentStatus10 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType11 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment12 = new models.payment.Payment(uUID6, booking7, 100.0d, paymentMethod9, paymentStatus10, paymentType11);
        models.payment.Payment.PaymentType paymentType13 = payment12.getPaymentType();
        java.util.UUID uUID14 = payment12.getBookingID();
        models.payment.Payment.PaymentType paymentType15 = models.payment.Payment.PaymentType.FINAL;
        payment12.setPaymentType(paymentType15);
        java.util.UUID uUID17 = payment12.getPaymentID();
        models.payment.PaymentMethod paymentMethod19 = models.payment.Payment.generateMethod("");
        payment12.setPaymentMethod(paymentMethod19);
        java.util.UUID uUID21 = null;
        models.booking.Booking booking22 = null;
        models.payment.PaymentMethod paymentMethod24 = null;
        models.payment.Payment.PaymentStatus paymentStatus25 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType26 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment27 = new models.payment.Payment(uUID21, booking22, 100.0d, paymentMethod24, paymentStatus25, paymentType26);
        models.payment.Payment.PaymentType paymentType28 = payment27.getPaymentType();
        models.payment.Payment.PaymentType paymentType29 = payment27.getPaymentType();
        models.payment.Payment payment30 = new models.payment.Payment((double) 10, booking5, paymentMethod19, paymentType29);
        java.util.UUID uUID31 = null;
        models.booking.Booking booking32 = null;
        models.payment.PaymentMethod paymentMethod34 = null;
        models.payment.Payment.PaymentStatus paymentStatus35 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType36 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment37 = new models.payment.Payment(uUID31, booking32, 100.0d, paymentMethod34, paymentStatus35, paymentType36);
        models.payment.Payment.PaymentType paymentType38 = payment37.getPaymentType();
        java.util.UUID uUID39 = payment37.getBookingID();
        models.payment.Payment.PaymentType paymentType40 = models.payment.Payment.PaymentType.FINAL;
        payment37.setPaymentType(paymentType40);
        models.payment.PaymentMethod paymentMethod42 = payment37.getMethod();
        models.payment.Payment.PaymentType paymentType43 = payment37.getPaymentType();
        models.payment.Payment payment44 = new models.payment.Payment((double) (short) -1, booking3, paymentMethod19, paymentType43);
        models.booking.Booking booking46 = null;
        models.booking.Booking booking48 = null;
        java.util.UUID uUID49 = null;
        models.booking.Booking booking50 = null;
        models.payment.PaymentMethod paymentMethod52 = null;
        models.payment.Payment.PaymentStatus paymentStatus53 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType54 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment55 = new models.payment.Payment(uUID49, booking50, 100.0d, paymentMethod52, paymentStatus53, paymentType54);
        models.payment.Payment.PaymentType paymentType56 = payment55.getPaymentType();
        java.util.UUID uUID57 = payment55.getBookingID();
        models.payment.Payment.PaymentType paymentType58 = models.payment.Payment.PaymentType.FINAL;
        payment55.setPaymentType(paymentType58);
        java.util.UUID uUID60 = payment55.getPaymentID();
        models.payment.PaymentMethod paymentMethod62 = models.payment.Payment.generateMethod("");
        payment55.setPaymentMethod(paymentMethod62);
        java.util.UUID uUID64 = null;
        models.booking.Booking booking65 = null;
        models.payment.PaymentMethod paymentMethod67 = null;
        models.payment.Payment.PaymentStatus paymentStatus68 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType69 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment70 = new models.payment.Payment(uUID64, booking65, 100.0d, paymentMethod67, paymentStatus68, paymentType69);
        models.payment.Payment.PaymentType paymentType71 = payment70.getPaymentType();
        models.payment.Payment.PaymentType paymentType72 = payment70.getPaymentType();
        models.payment.Payment payment73 = new models.payment.Payment((double) 10, booking48, paymentMethod62, paymentType72);
        java.util.UUID uUID74 = null;
        models.booking.Booking booking75 = null;
        models.payment.PaymentMethod paymentMethod77 = null;
        models.payment.Payment.PaymentStatus paymentStatus78 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType79 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment80 = new models.payment.Payment(uUID74, booking75, 100.0d, paymentMethod77, paymentStatus78, paymentType79);
        models.payment.Payment.PaymentType paymentType81 = payment80.getPaymentType();
        java.util.UUID uUID82 = payment80.getBookingID();
        models.payment.Payment.PaymentType paymentType83 = models.payment.Payment.PaymentType.FINAL;
        payment80.setPaymentType(paymentType83);
        models.payment.PaymentMethod paymentMethod85 = payment80.getMethod();
        models.payment.Payment.PaymentType paymentType86 = payment80.getPaymentType();
        models.payment.Payment payment87 = new models.payment.Payment((double) 0, booking46, paymentMethod62, paymentType86);
        models.payment.Payment.PaymentStatus paymentStatus88 = payment87.getStatus();
        models.payment.Payment.PaymentType paymentType89 = payment87.getPaymentType();
        models.payment.Payment payment90 = new models.payment.Payment((double) 0L, booking1, paymentMethod19, paymentType89);
        org.junit.Assert.assertTrue("'" + paymentStatus10 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus10.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType11 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType11.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType13 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType13.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID14);
        org.junit.Assert.assertTrue("'" + paymentType15 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType15.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod19);
        org.junit.Assert.assertTrue("'" + paymentStatus25 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus25.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType26 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType26.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType28 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType28.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType29 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType29.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentStatus35 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus35.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType36 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType36.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType38 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType38.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID39);
        org.junit.Assert.assertTrue("'" + paymentType40 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType40.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(paymentMethod42);
        org.junit.Assert.assertTrue("'" + paymentType43 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType43.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentStatus53 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus53.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType54 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType54.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType56 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType56.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID57);
        org.junit.Assert.assertTrue("'" + paymentType58 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType58.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod62);
        org.junit.Assert.assertTrue("'" + paymentStatus68 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus68.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType69 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType69.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType71 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType71.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType72 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType72.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentStatus78 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus78.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType79 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType79.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType81 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType81.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID82);
        org.junit.Assert.assertTrue("'" + paymentType83 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType83.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(paymentMethod85);
        org.junit.Assert.assertTrue("'" + paymentType86 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType86.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentStatus88 + "' != '" + models.payment.Payment.PaymentStatus.PENDING + "'", paymentStatus88.equals(models.payment.Payment.PaymentStatus.PENDING));
        org.junit.Assert.assertTrue("'" + paymentType89 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType89.equals(models.payment.Payment.PaymentType.FINAL));
    }

    @Test
    public void test134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test134");
        java.util.UUID uUID0 = null;
        models.booking.Booking booking1 = null;
        models.payment.PaymentMethod paymentMethod3 = null;
        models.payment.Payment.PaymentStatus paymentStatus4 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType5 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment6 = new models.payment.Payment(uUID0, booking1, 100.0d, paymentMethod3, paymentStatus4, paymentType5);
        models.payment.Payment.PaymentType paymentType7 = models.payment.Payment.PaymentType.DEPOSIT;
        payment6.setPaymentType(paymentType7);
        java.util.UUID uUID9 = null;
        models.booking.Booking booking10 = null;
        java.util.UUID uUID12 = null;
        models.booking.Booking booking13 = null;
        models.payment.PaymentMethod paymentMethod16 = models.payment.Payment.generateMethod("");
        java.util.UUID uUID17 = null;
        models.booking.Booking booking18 = null;
        models.payment.PaymentMethod paymentMethod20 = null;
        models.payment.Payment.PaymentStatus paymentStatus21 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType22 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment23 = new models.payment.Payment(uUID17, booking18, 100.0d, paymentMethod20, paymentStatus21, paymentType22);
        models.payment.Payment.PaymentStatus paymentStatus24 = payment23.getStatus();
        java.util.UUID uUID25 = null;
        models.booking.Booking booking26 = null;
        models.payment.PaymentMethod paymentMethod28 = null;
        models.payment.Payment.PaymentStatus paymentStatus29 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType30 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment31 = new models.payment.Payment(uUID25, booking26, 100.0d, paymentMethod28, paymentStatus29, paymentType30);
        models.payment.Payment.PaymentType paymentType32 = payment31.getPaymentType();
        java.util.UUID uUID33 = payment31.getBookingID();
        models.payment.Payment.PaymentType paymentType34 = models.payment.Payment.PaymentType.FINAL;
        payment31.setPaymentType(paymentType34);
        models.payment.PaymentMethod paymentMethod36 = payment31.getMethod();
        models.payment.Payment.PaymentType paymentType37 = payment31.getPaymentType();
        models.payment.Payment payment38 = new models.payment.Payment(uUID12, booking13, (double) 1L, paymentMethod16, paymentStatus24, paymentType37);
        java.util.UUID uUID39 = null;
        models.booking.Booking booking40 = null;
        models.payment.PaymentMethod paymentMethod42 = null;
        models.payment.Payment.PaymentStatus paymentStatus43 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType44 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment45 = new models.payment.Payment(uUID39, booking40, 100.0d, paymentMethod42, paymentStatus43, paymentType44);
        models.payment.Payment.PaymentStatus paymentStatus46 = payment45.getStatus();
        models.booking.Booking booking48 = null;
        java.util.UUID uUID49 = null;
        models.booking.Booking booking50 = null;
        models.payment.PaymentMethod paymentMethod52 = null;
        models.payment.Payment.PaymentStatus paymentStatus53 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType54 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment55 = new models.payment.Payment(uUID49, booking50, 100.0d, paymentMethod52, paymentStatus53, paymentType54);
        models.payment.Payment.PaymentType paymentType56 = payment55.getPaymentType();
        java.util.UUID uUID57 = payment55.getBookingID();
        models.payment.Payment.PaymentType paymentType58 = models.payment.Payment.PaymentType.FINAL;
        payment55.setPaymentType(paymentType58);
        java.util.UUID uUID60 = payment55.getPaymentID();
        models.payment.PaymentMethod paymentMethod62 = models.payment.Payment.generateMethod("");
        payment55.setPaymentMethod(paymentMethod62);
        java.util.UUID uUID64 = null;
        models.booking.Booking booking65 = null;
        models.payment.PaymentMethod paymentMethod67 = null;
        models.payment.Payment.PaymentStatus paymentStatus68 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType69 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment70 = new models.payment.Payment(uUID64, booking65, 100.0d, paymentMethod67, paymentStatus68, paymentType69);
        models.payment.Payment.PaymentType paymentType71 = payment70.getPaymentType();
        models.payment.Payment.PaymentType paymentType72 = payment70.getPaymentType();
        models.payment.Payment payment73 = new models.payment.Payment((double) 10, booking48, paymentMethod62, paymentType72);
        models.payment.Payment payment74 = new models.payment.Payment(uUID9, booking10, (double) (-1), paymentMethod16, paymentStatus46, paymentType72);
        payment6.setPaymentMethod(paymentMethod16);
        models.booking.Booking booking76 = payment6.getBooking();
        java.util.UUID uUID77 = payment6.getBookingID();
        org.junit.Assert.assertTrue("'" + paymentStatus4 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus4.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType5 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType5.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType7 + "' != '" + models.payment.Payment.PaymentType.DEPOSIT + "'", paymentType7.equals(models.payment.Payment.PaymentType.DEPOSIT));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod16);
        org.junit.Assert.assertTrue("'" + paymentStatus21 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus21.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType22 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType22.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentStatus24 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus24.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentStatus29 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus29.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType30 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType30.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType32 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType32.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID33);
        org.junit.Assert.assertTrue("'" + paymentType34 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType34.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(paymentMethod36);
        org.junit.Assert.assertTrue("'" + paymentType37 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType37.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentStatus43 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus43.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType44 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType44.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentStatus46 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus46.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentStatus53 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus53.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType54 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType54.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType56 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType56.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID57);
        org.junit.Assert.assertTrue("'" + paymentType58 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType58.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod62);
        org.junit.Assert.assertTrue("'" + paymentStatus68 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus68.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType69 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType69.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType71 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType71.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType72 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType72.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(booking76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID77);
    }

    @Test
    public void test135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test135");
        java.util.UUID uUID0 = null;
        models.booking.Booking booking1 = null;
        models.payment.PaymentMethod paymentMethod3 = null;
        models.payment.Payment.PaymentStatus paymentStatus4 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType5 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment6 = new models.payment.Payment(uUID0, booking1, 100.0d, paymentMethod3, paymentStatus4, paymentType5);
        models.payment.Payment.PaymentType paymentType7 = payment6.getPaymentType();
        models.payment.Payment.PaymentType paymentType8 = payment6.getPaymentType();
        models.payment.Payment.PaymentType paymentType9 = payment6.getPaymentType();
        models.booking.Booking booking10 = payment6.getBooking();
        org.junit.Assert.assertTrue("'" + paymentStatus4 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus4.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType5 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType5.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType7 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType7.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType8 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType8.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType9 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType9.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(booking10);
    }

    @Test
    public void test136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test136");
        java.util.UUID uUID0 = null;
        models.booking.Booking booking1 = null;
        models.payment.PaymentMethod paymentMethod3 = null;
        models.payment.Payment.PaymentStatus paymentStatus4 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType5 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment6 = new models.payment.Payment(uUID0, booking1, 100.0d, paymentMethod3, paymentStatus4, paymentType5);
        models.payment.Payment.PaymentType paymentType7 = payment6.getPaymentType();
        java.util.UUID uUID8 = payment6.getBookingID();
        models.payment.Payment.PaymentType paymentType9 = models.payment.Payment.PaymentType.FINAL;
        payment6.setPaymentType(paymentType9);
        models.payment.PaymentMethod paymentMethod11 = payment6.getMethod();
        java.util.UUID uUID12 = payment6.getBookingID();
        models.booking.Booking booking13 = payment6.getBooking();
        java.util.UUID uUID14 = null;
        models.booking.Booking booking15 = null;
        models.payment.PaymentMethod paymentMethod17 = null;
        models.payment.Payment.PaymentStatus paymentStatus18 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType19 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment20 = new models.payment.Payment(uUID14, booking15, 100.0d, paymentMethod17, paymentStatus18, paymentType19);
        models.payment.Payment.PaymentType paymentType21 = payment20.getPaymentType();
        java.util.UUID uUID22 = payment20.getBookingID();
        java.util.UUID uUID23 = payment20.getPaymentID();
        java.util.UUID uUID24 = null;
        models.booking.Booking booking25 = null;
        java.util.UUID uUID27 = null;
        models.booking.Booking booking28 = null;
        java.util.UUID uUID30 = null;
        models.booking.Booking booking31 = null;
        models.payment.PaymentMethod paymentMethod33 = null;
        models.payment.Payment.PaymentStatus paymentStatus34 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType35 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment36 = new models.payment.Payment(uUID30, booking31, 100.0d, paymentMethod33, paymentStatus34, paymentType35);
        models.payment.Payment.PaymentType paymentType37 = payment36.getPaymentType();
        java.util.UUID uUID38 = payment36.getBookingID();
        models.payment.Payment.PaymentType paymentType39 = models.payment.Payment.PaymentType.FINAL;
        payment36.setPaymentType(paymentType39);
        java.util.UUID uUID41 = payment36.getPaymentID();
        models.payment.PaymentMethod paymentMethod43 = models.payment.Payment.generateMethod("");
        payment36.setPaymentMethod(paymentMethod43);
        models.payment.Payment.PaymentStatus paymentStatus45 = models.payment.Payment.PaymentStatus.PENDING;
        models.payment.Payment.PaymentType paymentType46 = null;
        models.payment.Payment payment47 = new models.payment.Payment(uUID27, booking28, (double) (byte) 0, paymentMethod43, paymentStatus45, paymentType46);
        models.payment.Payment.PaymentStatus paymentStatus48 = models.payment.Payment.PaymentStatus.PENDING;
        models.payment.Payment.PaymentType paymentType49 = models.payment.Payment.PaymentType.DEPOSIT;
        models.payment.Payment payment50 = new models.payment.Payment(uUID24, booking25, (double) (byte) 100, paymentMethod43, paymentStatus48, paymentType49);
        models.booking.Booking booking51 = payment50.getBooking();
        double double52 = payment50.getAmount();
        java.util.UUID uUID53 = payment50.getBookingID();
        models.payment.PaymentMethod paymentMethod54 = payment50.getMethod();
        payment20.setPaymentMethod(paymentMethod54);
        payment6.setPaymentMethod(paymentMethod54);
        models.payment.PaymentMethod paymentMethod57 = null;
        payment6.setPaymentMethod(paymentMethod57);
        double double59 = payment6.getAmount();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean60 = payment6.processPayment();
            org.junit.Assert.fail("Expected exception of type models.ParkingSystemException; message: Cannot process payment of a payment that is not pending.");
        } catch (models.ParkingSystemException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + paymentStatus4 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus4.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType5 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType5.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType7 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType7.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID8);
        org.junit.Assert.assertTrue("'" + paymentType9 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType9.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(paymentMethod11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(booking13);
        org.junit.Assert.assertTrue("'" + paymentStatus18 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus18.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType19 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType19.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType21 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType21.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID23);
        org.junit.Assert.assertTrue("'" + paymentStatus34 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus34.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType35 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType35.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType37 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType37.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID38);
        org.junit.Assert.assertTrue("'" + paymentType39 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType39.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod43);
        org.junit.Assert.assertTrue("'" + paymentStatus45 + "' != '" + models.payment.Payment.PaymentStatus.PENDING + "'", paymentStatus45.equals(models.payment.Payment.PaymentStatus.PENDING));
        org.junit.Assert.assertTrue("'" + paymentStatus48 + "' != '" + models.payment.Payment.PaymentStatus.PENDING + "'", paymentStatus48.equals(models.payment.Payment.PaymentStatus.PENDING));
        org.junit.Assert.assertTrue("'" + paymentType49 + "' != '" + models.payment.Payment.PaymentType.DEPOSIT + "'", paymentType49.equals(models.payment.Payment.PaymentType.DEPOSIT));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(booking51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 100.0d + "'", double52 == 100.0d);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 100.0d + "'", double59 == 100.0d);
    }

    @Test
    public void test137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test137");
        java.util.UUID uUID0 = null;
        models.booking.Booking booking1 = null;
        models.payment.PaymentMethod paymentMethod3 = null;
        models.payment.Payment.PaymentStatus paymentStatus4 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType5 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment6 = new models.payment.Payment(uUID0, booking1, 100.0d, paymentMethod3, paymentStatus4, paymentType5);
        models.payment.Payment.PaymentType paymentType7 = payment6.getPaymentType();
        java.util.UUID uUID8 = payment6.getPaymentID();
        models.payment.Payment.PaymentStatus paymentStatus9 = payment6.getStatus();
        java.util.UUID uUID10 = payment6.getPaymentID();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean11 = payment6.processPayment();
            org.junit.Assert.fail("Expected exception of type models.ParkingSystemException; message: Cannot process payment of a payment that is not pending.");
        } catch (models.ParkingSystemException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + paymentStatus4 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus4.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType5 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType5.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType7 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType7.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID8);
        org.junit.Assert.assertTrue("'" + paymentStatus9 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus9.equals(models.payment.Payment.PaymentStatus.FAILED));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID10);
    }

    @Test
    public void test138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test138");
        java.util.UUID uUID0 = null;
        models.booking.Booking booking1 = null;
        models.payment.PaymentMethod paymentMethod3 = null;
        models.payment.Payment.PaymentStatus paymentStatus4 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType5 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment6 = new models.payment.Payment(uUID0, booking1, 100.0d, paymentMethod3, paymentStatus4, paymentType5);
        models.payment.Payment.PaymentType paymentType7 = payment6.getPaymentType();
        java.util.UUID uUID8 = payment6.getBookingID();
        models.payment.Payment.PaymentType paymentType9 = models.payment.Payment.PaymentType.FINAL;
        payment6.setPaymentType(paymentType9);
        models.payment.PaymentMethod paymentMethod11 = payment6.getMethod();
        java.util.UUID uUID12 = payment6.getBookingID();
        models.payment.Payment.PaymentStatus paymentStatus13 = payment6.getStatus();
        java.util.UUID uUID14 = payment6.getPaymentID();
        org.junit.Assert.assertTrue("'" + paymentStatus4 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus4.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType5 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType5.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType7 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType7.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID8);
        org.junit.Assert.assertTrue("'" + paymentType9 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType9.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(paymentMethod11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID12);
        org.junit.Assert.assertTrue("'" + paymentStatus13 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus13.equals(models.payment.Payment.PaymentStatus.FAILED));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID14);
    }

    @Test
    public void test139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test139");
        models.booking.Booking booking1 = null;
        models.booking.Booking booking3 = null;
        java.util.UUID uUID4 = null;
        models.booking.Booking booking5 = null;
        models.payment.PaymentMethod paymentMethod7 = null;
        models.payment.Payment.PaymentStatus paymentStatus8 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType9 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment10 = new models.payment.Payment(uUID4, booking5, 100.0d, paymentMethod7, paymentStatus8, paymentType9);
        models.payment.Payment.PaymentType paymentType11 = payment10.getPaymentType();
        java.util.UUID uUID12 = payment10.getBookingID();
        models.payment.Payment.PaymentType paymentType13 = models.payment.Payment.PaymentType.FINAL;
        payment10.setPaymentType(paymentType13);
        java.util.UUID uUID15 = payment10.getPaymentID();
        models.payment.PaymentMethod paymentMethod17 = models.payment.Payment.generateMethod("");
        payment10.setPaymentMethod(paymentMethod17);
        java.util.UUID uUID19 = null;
        models.booking.Booking booking20 = null;
        models.payment.PaymentMethod paymentMethod22 = null;
        models.payment.Payment.PaymentStatus paymentStatus23 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType24 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment25 = new models.payment.Payment(uUID19, booking20, 100.0d, paymentMethod22, paymentStatus23, paymentType24);
        models.payment.Payment.PaymentType paymentType26 = payment25.getPaymentType();
        models.payment.Payment.PaymentType paymentType27 = payment25.getPaymentType();
        models.payment.Payment payment28 = new models.payment.Payment((double) 10, booking3, paymentMethod17, paymentType27);
        java.util.UUID uUID29 = null;
        models.booking.Booking booking30 = null;
        models.payment.PaymentMethod paymentMethod32 = null;
        models.payment.Payment.PaymentStatus paymentStatus33 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType34 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment35 = new models.payment.Payment(uUID29, booking30, 100.0d, paymentMethod32, paymentStatus33, paymentType34);
        models.payment.Payment.PaymentType paymentType36 = payment35.getPaymentType();
        java.util.UUID uUID37 = payment35.getBookingID();
        models.payment.Payment.PaymentType paymentType38 = models.payment.Payment.PaymentType.FINAL;
        payment35.setPaymentType(paymentType38);
        models.payment.PaymentMethod paymentMethod40 = payment35.getMethod();
        models.payment.Payment.PaymentType paymentType41 = payment35.getPaymentType();
        models.payment.Payment payment42 = new models.payment.Payment((double) 0, booking1, paymentMethod17, paymentType41);
        java.util.UUID uUID43 = payment42.getBookingID();
        java.util.UUID uUID44 = payment42.getBookingID();
        boolean boolean45 = payment42.processPayment();
        models.payment.Payment.PaymentStatus paymentStatus46 = payment42.getStatus();
        org.junit.Assert.assertTrue("'" + paymentStatus8 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus8.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType9 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType9.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType11 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType11.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID12);
        org.junit.Assert.assertTrue("'" + paymentType13 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType13.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod17);
        org.junit.Assert.assertTrue("'" + paymentStatus23 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus23.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType24 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType24.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType26 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType26.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType27 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType27.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentStatus33 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus33.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType34 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType34.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType36 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType36.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID37);
        org.junit.Assert.assertTrue("'" + paymentType38 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType38.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(paymentMethod40);
        org.junit.Assert.assertTrue("'" + paymentType41 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType41.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + paymentStatus46 + "' != '" + models.payment.Payment.PaymentStatus.PAID + "'", paymentStatus46.equals(models.payment.Payment.PaymentStatus.PAID));
    }

    @Test
    public void test140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test140");
        models.booking.Booking booking1 = null;
        models.booking.Booking booking3 = null;
        models.payment.PaymentMethod paymentMethod5 = models.payment.Payment.generateMethod("");
        models.payment.Payment.PaymentType paymentType6 = null;
        models.payment.Payment payment7 = new models.payment.Payment(1.0d, booking3, paymentMethod5, paymentType6);
        models.booking.Booking booking9 = null;
        models.booking.Booking booking11 = null;
        java.util.UUID uUID12 = null;
        models.booking.Booking booking13 = null;
        models.payment.PaymentMethod paymentMethod15 = null;
        models.payment.Payment.PaymentStatus paymentStatus16 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType17 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment18 = new models.payment.Payment(uUID12, booking13, 100.0d, paymentMethod15, paymentStatus16, paymentType17);
        models.payment.Payment.PaymentType paymentType19 = payment18.getPaymentType();
        java.util.UUID uUID20 = payment18.getBookingID();
        models.payment.Payment.PaymentType paymentType21 = models.payment.Payment.PaymentType.FINAL;
        payment18.setPaymentType(paymentType21);
        java.util.UUID uUID23 = payment18.getPaymentID();
        models.payment.PaymentMethod paymentMethod25 = models.payment.Payment.generateMethod("");
        payment18.setPaymentMethod(paymentMethod25);
        java.util.UUID uUID27 = null;
        models.booking.Booking booking28 = null;
        models.payment.PaymentMethod paymentMethod30 = null;
        models.payment.Payment.PaymentStatus paymentStatus31 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType32 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment33 = new models.payment.Payment(uUID27, booking28, 100.0d, paymentMethod30, paymentStatus31, paymentType32);
        models.payment.Payment.PaymentType paymentType34 = payment33.getPaymentType();
        models.payment.Payment.PaymentType paymentType35 = payment33.getPaymentType();
        models.payment.Payment payment36 = new models.payment.Payment((double) 10, booking11, paymentMethod25, paymentType35);
        java.util.UUID uUID37 = null;
        models.booking.Booking booking38 = null;
        models.payment.PaymentMethod paymentMethod40 = null;
        models.payment.Payment.PaymentStatus paymentStatus41 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType42 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment43 = new models.payment.Payment(uUID37, booking38, 100.0d, paymentMethod40, paymentStatus41, paymentType42);
        models.payment.Payment.PaymentType paymentType44 = payment43.getPaymentType();
        java.util.UUID uUID45 = payment43.getBookingID();
        models.payment.Payment.PaymentType paymentType46 = models.payment.Payment.PaymentType.FINAL;
        payment43.setPaymentType(paymentType46);
        models.payment.PaymentMethod paymentMethod48 = payment43.getMethod();
        models.payment.Payment.PaymentType paymentType49 = payment43.getPaymentType();
        models.payment.Payment payment50 = new models.payment.Payment((double) 0, booking9, paymentMethod25, paymentType49);
        java.util.UUID uUID51 = payment50.getBookingID();
        boolean boolean52 = payment50.processPayment();
        java.util.UUID uUID53 = null;
        models.booking.Booking booking54 = null;
        java.util.UUID uUID56 = null;
        models.booking.Booking booking57 = null;
        java.util.UUID uUID59 = null;
        models.booking.Booking booking60 = null;
        models.payment.PaymentMethod paymentMethod62 = null;
        models.payment.Payment.PaymentStatus paymentStatus63 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType64 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment65 = new models.payment.Payment(uUID59, booking60, 100.0d, paymentMethod62, paymentStatus63, paymentType64);
        models.payment.Payment.PaymentType paymentType66 = payment65.getPaymentType();
        java.util.UUID uUID67 = payment65.getBookingID();
        models.payment.Payment.PaymentType paymentType68 = models.payment.Payment.PaymentType.FINAL;
        payment65.setPaymentType(paymentType68);
        java.util.UUID uUID70 = payment65.getPaymentID();
        models.payment.PaymentMethod paymentMethod72 = models.payment.Payment.generateMethod("");
        payment65.setPaymentMethod(paymentMethod72);
        models.payment.Payment.PaymentStatus paymentStatus74 = models.payment.Payment.PaymentStatus.PENDING;
        models.payment.Payment.PaymentType paymentType75 = null;
        models.payment.Payment payment76 = new models.payment.Payment(uUID56, booking57, (double) (byte) 0, paymentMethod72, paymentStatus74, paymentType75);
        models.payment.Payment.PaymentStatus paymentStatus77 = models.payment.Payment.PaymentStatus.PENDING;
        models.payment.Payment.PaymentType paymentType78 = models.payment.Payment.PaymentType.DEPOSIT;
        models.payment.Payment payment79 = new models.payment.Payment(uUID53, booking54, (double) (byte) 100, paymentMethod72, paymentStatus77, paymentType78);
        models.booking.Booking booking80 = payment79.getBooking();
        double double81 = payment79.getAmount();
        java.util.UUID uUID82 = payment79.getBookingID();
        models.payment.Payment.PaymentType paymentType83 = payment79.getPaymentType();
        payment50.setPaymentType(paymentType83);
        models.payment.Payment payment85 = new models.payment.Payment((double) (byte) 100, booking1, paymentMethod5, paymentType83);
        models.payment.PaymentMethod paymentMethod86 = payment85.getMethod();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod5);
        org.junit.Assert.assertTrue("'" + paymentStatus16 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus16.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType17 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType17.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType19 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType19.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID20);
        org.junit.Assert.assertTrue("'" + paymentType21 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType21.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod25);
        org.junit.Assert.assertTrue("'" + paymentStatus31 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus31.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType32 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType32.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType34 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType34.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType35 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType35.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentStatus41 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus41.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType42 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType42.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType44 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType44.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID45);
        org.junit.Assert.assertTrue("'" + paymentType46 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType46.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(paymentMethod48);
        org.junit.Assert.assertTrue("'" + paymentType49 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType49.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + paymentStatus63 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus63.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType64 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType64.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType66 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType66.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID67);
        org.junit.Assert.assertTrue("'" + paymentType68 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType68.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod72);
        org.junit.Assert.assertTrue("'" + paymentStatus74 + "' != '" + models.payment.Payment.PaymentStatus.PENDING + "'", paymentStatus74.equals(models.payment.Payment.PaymentStatus.PENDING));
        org.junit.Assert.assertTrue("'" + paymentStatus77 + "' != '" + models.payment.Payment.PaymentStatus.PENDING + "'", paymentStatus77.equals(models.payment.Payment.PaymentStatus.PENDING));
        org.junit.Assert.assertTrue("'" + paymentType78 + "' != '" + models.payment.Payment.PaymentType.DEPOSIT + "'", paymentType78.equals(models.payment.Payment.PaymentType.DEPOSIT));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(booking80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 100.0d + "'", double81 == 100.0d);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID82);
        org.junit.Assert.assertTrue("'" + paymentType83 + "' != '" + models.payment.Payment.PaymentType.DEPOSIT + "'", paymentType83.equals(models.payment.Payment.PaymentType.DEPOSIT));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod86);
    }

    @Test
    public void test141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test141");
        java.util.UUID uUID0 = null;
        models.booking.Booking booking1 = null;
        models.payment.PaymentMethod paymentMethod3 = null;
        models.payment.Payment.PaymentStatus paymentStatus4 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType5 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment6 = new models.payment.Payment(uUID0, booking1, 100.0d, paymentMethod3, paymentStatus4, paymentType5);
        models.payment.Payment.PaymentType paymentType7 = payment6.getPaymentType();
        models.payment.Payment.PaymentType paymentType8 = payment6.getPaymentType();
        models.payment.Payment.PaymentType paymentType9 = payment6.getPaymentType();
        models.payment.Payment.PaymentType paymentType10 = payment6.getPaymentType();
        java.util.UUID uUID11 = payment6.getBookingID();
        org.junit.Assert.assertTrue("'" + paymentStatus4 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus4.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType5 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType5.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType7 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType7.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType8 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType8.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType9 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType9.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType10 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType10.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID11);
    }

    @Test
    public void test142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test142");
        models.booking.Booking booking1 = null;
        java.util.UUID uUID2 = null;
        models.booking.Booking booking3 = null;
        java.util.UUID uUID5 = null;
        models.booking.Booking booking6 = null;
        models.payment.PaymentMethod paymentMethod8 = null;
        models.payment.Payment.PaymentStatus paymentStatus9 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType10 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment11 = new models.payment.Payment(uUID5, booking6, 100.0d, paymentMethod8, paymentStatus9, paymentType10);
        models.payment.Payment.PaymentType paymentType12 = payment11.getPaymentType();
        java.util.UUID uUID13 = payment11.getBookingID();
        models.payment.Payment.PaymentType paymentType14 = models.payment.Payment.PaymentType.FINAL;
        payment11.setPaymentType(paymentType14);
        java.util.UUID uUID16 = payment11.getPaymentID();
        models.payment.PaymentMethod paymentMethod18 = models.payment.Payment.generateMethod("");
        payment11.setPaymentMethod(paymentMethod18);
        java.util.UUID uUID20 = null;
        models.booking.Booking booking21 = null;
        models.payment.PaymentMethod paymentMethod23 = null;
        models.payment.Payment.PaymentStatus paymentStatus24 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType25 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment26 = new models.payment.Payment(uUID20, booking21, 100.0d, paymentMethod23, paymentStatus24, paymentType25);
        models.payment.Payment.PaymentType paymentType27 = payment26.getPaymentType();
        java.util.UUID uUID28 = payment26.getBookingID();
        models.payment.Payment.PaymentType paymentType29 = models.payment.Payment.PaymentType.FINAL;
        payment26.setPaymentType(paymentType29);
        models.payment.PaymentMethod paymentMethod31 = payment26.getMethod();
        models.payment.Payment.PaymentType paymentType32 = payment26.getPaymentType();
        models.payment.Payment.PaymentStatus paymentStatus33 = payment26.getStatus();
        models.payment.Payment.PaymentType paymentType34 = models.payment.Payment.PaymentType.REFUND;
        models.payment.Payment payment35 = new models.payment.Payment(uUID2, booking3, (double) '#', paymentMethod18, paymentStatus33, paymentType34);
        java.util.UUID uUID36 = null;
        models.booking.Booking booking37 = null;
        java.util.UUID uUID39 = null;
        models.booking.Booking booking40 = null;
        java.util.UUID uUID42 = null;
        models.booking.Booking booking43 = null;
        models.payment.PaymentMethod paymentMethod45 = null;
        models.payment.Payment.PaymentStatus paymentStatus46 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType47 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment48 = new models.payment.Payment(uUID42, booking43, 100.0d, paymentMethod45, paymentStatus46, paymentType47);
        models.payment.Payment.PaymentType paymentType49 = payment48.getPaymentType();
        java.util.UUID uUID50 = payment48.getBookingID();
        models.payment.Payment.PaymentType paymentType51 = models.payment.Payment.PaymentType.FINAL;
        payment48.setPaymentType(paymentType51);
        java.util.UUID uUID53 = payment48.getPaymentID();
        models.payment.PaymentMethod paymentMethod55 = models.payment.Payment.generateMethod("");
        payment48.setPaymentMethod(paymentMethod55);
        models.payment.Payment.PaymentStatus paymentStatus57 = models.payment.Payment.PaymentStatus.PENDING;
        models.payment.Payment.PaymentType paymentType58 = null;
        models.payment.Payment payment59 = new models.payment.Payment(uUID39, booking40, (double) (byte) 0, paymentMethod55, paymentStatus57, paymentType58);
        models.payment.Payment.PaymentStatus paymentStatus60 = models.payment.Payment.PaymentStatus.PENDING;
        models.payment.Payment.PaymentType paymentType61 = models.payment.Payment.PaymentType.DEPOSIT;
        models.payment.Payment payment62 = new models.payment.Payment(uUID36, booking37, (double) (byte) 100, paymentMethod55, paymentStatus60, paymentType61);
        models.payment.Payment payment63 = new models.payment.Payment((double) 10L, booking1, paymentMethod18, paymentType61);
        java.lang.Class<?> wildcardClass64 = paymentMethod18.getClass();
        org.junit.Assert.assertTrue("'" + paymentStatus9 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus9.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType10 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType10.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType12 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType12.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID13);
        org.junit.Assert.assertTrue("'" + paymentType14 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType14.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod18);
        org.junit.Assert.assertTrue("'" + paymentStatus24 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus24.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType25 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType25.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType27 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType27.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID28);
        org.junit.Assert.assertTrue("'" + paymentType29 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType29.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(paymentMethod31);
        org.junit.Assert.assertTrue("'" + paymentType32 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType32.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentStatus33 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus33.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType34 + "' != '" + models.payment.Payment.PaymentType.REFUND + "'", paymentType34.equals(models.payment.Payment.PaymentType.REFUND));
        org.junit.Assert.assertTrue("'" + paymentStatus46 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus46.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType47 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType47.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType49 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType49.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID50);
        org.junit.Assert.assertTrue("'" + paymentType51 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType51.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod55);
        org.junit.Assert.assertTrue("'" + paymentStatus57 + "' != '" + models.payment.Payment.PaymentStatus.PENDING + "'", paymentStatus57.equals(models.payment.Payment.PaymentStatus.PENDING));
        org.junit.Assert.assertTrue("'" + paymentStatus60 + "' != '" + models.payment.Payment.PaymentStatus.PENDING + "'", paymentStatus60.equals(models.payment.Payment.PaymentStatus.PENDING));
        org.junit.Assert.assertTrue("'" + paymentType61 + "' != '" + models.payment.Payment.PaymentType.DEPOSIT + "'", paymentType61.equals(models.payment.Payment.PaymentType.DEPOSIT));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass64);
    }

    @Test
    public void test143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test143");
        java.util.UUID uUID0 = null;
        models.booking.Booking booking1 = null;
        models.payment.PaymentMethod paymentMethod3 = null;
        models.payment.Payment.PaymentStatus paymentStatus4 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType5 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment6 = new models.payment.Payment(uUID0, booking1, 100.0d, paymentMethod3, paymentStatus4, paymentType5);
        models.payment.Payment.PaymentType paymentType7 = models.payment.Payment.PaymentType.DEPOSIT;
        payment6.setPaymentType(paymentType7);
        java.util.UUID uUID9 = payment6.getBookingID();
        java.util.UUID uUID10 = null;
        models.booking.Booking booking11 = null;
        java.util.UUID uUID13 = null;
        models.booking.Booking booking14 = null;
        models.payment.PaymentMethod paymentMethod16 = null;
        models.payment.Payment.PaymentStatus paymentStatus17 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType18 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment19 = new models.payment.Payment(uUID13, booking14, 100.0d, paymentMethod16, paymentStatus17, paymentType18);
        models.payment.Payment.PaymentType paymentType20 = payment19.getPaymentType();
        java.util.UUID uUID21 = payment19.getBookingID();
        models.payment.Payment.PaymentType paymentType22 = models.payment.Payment.PaymentType.FINAL;
        payment19.setPaymentType(paymentType22);
        java.util.UUID uUID24 = payment19.getPaymentID();
        models.payment.PaymentMethod paymentMethod26 = models.payment.Payment.generateMethod("");
        payment19.setPaymentMethod(paymentMethod26);
        models.payment.Payment.PaymentStatus paymentStatus28 = models.payment.Payment.PaymentStatus.PENDING;
        models.payment.Payment.PaymentType paymentType29 = null;
        models.payment.Payment payment30 = new models.payment.Payment(uUID10, booking11, (double) (byte) 0, paymentMethod26, paymentStatus28, paymentType29);
        payment6.setPaymentMethod(paymentMethod26);
        double double32 = payment6.getAmount();
        org.junit.Assert.assertTrue("'" + paymentStatus4 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus4.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType5 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType5.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType7 + "' != '" + models.payment.Payment.PaymentType.DEPOSIT + "'", paymentType7.equals(models.payment.Payment.PaymentType.DEPOSIT));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID9);
        org.junit.Assert.assertTrue("'" + paymentStatus17 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus17.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType18 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType18.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType20 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType20.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID21);
        org.junit.Assert.assertTrue("'" + paymentType22 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType22.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod26);
        org.junit.Assert.assertTrue("'" + paymentStatus28 + "' != '" + models.payment.Payment.PaymentStatus.PENDING + "'", paymentStatus28.equals(models.payment.Payment.PaymentStatus.PENDING));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 100.0d + "'", double32 == 100.0d);
    }

    @Test
    public void test144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test144");
        java.util.UUID uUID0 = null;
        models.booking.Booking booking1 = null;
        java.util.UUID uUID3 = null;
        models.booking.Booking booking4 = null;
        models.payment.PaymentMethod paymentMethod6 = null;
        models.payment.Payment.PaymentStatus paymentStatus7 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType8 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment9 = new models.payment.Payment(uUID3, booking4, 100.0d, paymentMethod6, paymentStatus7, paymentType8);
        models.payment.Payment.PaymentType paymentType10 = payment9.getPaymentType();
        java.util.UUID uUID11 = payment9.getBookingID();
        models.payment.Payment.PaymentType paymentType12 = models.payment.Payment.PaymentType.FINAL;
        payment9.setPaymentType(paymentType12);
        java.util.UUID uUID14 = payment9.getPaymentID();
        models.payment.PaymentMethod paymentMethod16 = models.payment.Payment.generateMethod("");
        payment9.setPaymentMethod(paymentMethod16);
        java.util.UUID uUID18 = null;
        models.booking.Booking booking19 = null;
        models.payment.PaymentMethod paymentMethod21 = null;
        models.payment.Payment.PaymentStatus paymentStatus22 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType23 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment24 = new models.payment.Payment(uUID18, booking19, 100.0d, paymentMethod21, paymentStatus22, paymentType23);
        models.payment.Payment.PaymentType paymentType25 = payment24.getPaymentType();
        java.util.UUID uUID26 = payment24.getBookingID();
        models.payment.Payment.PaymentType paymentType27 = models.payment.Payment.PaymentType.FINAL;
        payment24.setPaymentType(paymentType27);
        models.payment.PaymentMethod paymentMethod29 = payment24.getMethod();
        models.payment.Payment.PaymentType paymentType30 = payment24.getPaymentType();
        models.payment.Payment.PaymentStatus paymentStatus31 = payment24.getStatus();
        models.payment.Payment.PaymentType paymentType32 = models.payment.Payment.PaymentType.REFUND;
        models.payment.Payment payment33 = new models.payment.Payment(uUID0, booking1, (double) '#', paymentMethod16, paymentStatus31, paymentType32);
        models.payment.Payment.PaymentType paymentType34 = payment33.getPaymentType();
        models.payment.PaymentMethod paymentMethod35 = payment33.getMethod();
        org.junit.Assert.assertTrue("'" + paymentStatus7 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus7.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType8 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType8.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType10 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType10.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID11);
        org.junit.Assert.assertTrue("'" + paymentType12 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType12.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod16);
        org.junit.Assert.assertTrue("'" + paymentStatus22 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus22.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType23 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType23.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType25 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType25.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID26);
        org.junit.Assert.assertTrue("'" + paymentType27 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType27.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(paymentMethod29);
        org.junit.Assert.assertTrue("'" + paymentType30 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType30.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentStatus31 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus31.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType32 + "' != '" + models.payment.Payment.PaymentType.REFUND + "'", paymentType32.equals(models.payment.Payment.PaymentType.REFUND));
        org.junit.Assert.assertTrue("'" + paymentType34 + "' != '" + models.payment.Payment.PaymentType.REFUND + "'", paymentType34.equals(models.payment.Payment.PaymentType.REFUND));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod35);
    }

    @Test
    public void test145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test145");
        java.util.UUID uUID0 = null;
        models.booking.Booking booking1 = null;
        models.payment.PaymentMethod paymentMethod3 = null;
        models.payment.Payment.PaymentStatus paymentStatus4 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType5 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment6 = new models.payment.Payment(uUID0, booking1, 100.0d, paymentMethod3, paymentStatus4, paymentType5);
        models.payment.Payment.PaymentType paymentType7 = models.payment.Payment.PaymentType.DEPOSIT;
        payment6.setPaymentType(paymentType7);
        models.payment.Payment.PaymentType paymentType9 = payment6.getPaymentType();
        double double10 = payment6.getAmount();
        java.util.UUID uUID11 = null;
        models.booking.Booking booking12 = null;
        models.payment.PaymentMethod paymentMethod14 = null;
        models.payment.Payment.PaymentStatus paymentStatus15 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType16 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment17 = new models.payment.Payment(uUID11, booking12, 100.0d, paymentMethod14, paymentStatus15, paymentType16);
        models.payment.Payment.PaymentType paymentType18 = payment17.getPaymentType();
        payment6.setPaymentType(paymentType18);
        java.lang.Class<?> wildcardClass20 = payment6.getClass();
        org.junit.Assert.assertTrue("'" + paymentStatus4 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus4.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType5 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType5.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType7 + "' != '" + models.payment.Payment.PaymentType.DEPOSIT + "'", paymentType7.equals(models.payment.Payment.PaymentType.DEPOSIT));
        org.junit.Assert.assertTrue("'" + paymentType9 + "' != '" + models.payment.Payment.PaymentType.DEPOSIT + "'", paymentType9.equals(models.payment.Payment.PaymentType.DEPOSIT));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 100.0d + "'", double10 == 100.0d);
        org.junit.Assert.assertTrue("'" + paymentStatus15 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus15.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType16 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType16.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType18 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType18.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test146");
        java.util.UUID uUID0 = null;
        models.booking.Booking booking1 = null;
        models.payment.PaymentMethod paymentMethod3 = null;
        models.payment.Payment.PaymentStatus paymentStatus4 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType5 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment6 = new models.payment.Payment(uUID0, booking1, 100.0d, paymentMethod3, paymentStatus4, paymentType5);
        java.util.UUID uUID7 = payment6.getPaymentID();
        models.booking.Booking booking9 = null;
        models.booking.Booking booking11 = null;
        java.util.UUID uUID12 = null;
        models.booking.Booking booking13 = null;
        models.payment.PaymentMethod paymentMethod15 = null;
        models.payment.Payment.PaymentStatus paymentStatus16 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType17 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment18 = new models.payment.Payment(uUID12, booking13, 100.0d, paymentMethod15, paymentStatus16, paymentType17);
        models.payment.Payment.PaymentType paymentType19 = payment18.getPaymentType();
        java.util.UUID uUID20 = payment18.getBookingID();
        models.payment.Payment.PaymentType paymentType21 = models.payment.Payment.PaymentType.FINAL;
        payment18.setPaymentType(paymentType21);
        java.util.UUID uUID23 = payment18.getPaymentID();
        models.payment.PaymentMethod paymentMethod25 = models.payment.Payment.generateMethod("");
        payment18.setPaymentMethod(paymentMethod25);
        java.util.UUID uUID27 = null;
        models.booking.Booking booking28 = null;
        models.payment.PaymentMethod paymentMethod30 = null;
        models.payment.Payment.PaymentStatus paymentStatus31 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType32 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment33 = new models.payment.Payment(uUID27, booking28, (-1.0d), paymentMethod30, paymentStatus31, paymentType32);
        models.payment.Payment payment34 = new models.payment.Payment(0.0d, booking11, paymentMethod25, paymentType32);
        java.util.UUID uUID35 = null;
        models.booking.Booking booking36 = null;
        models.payment.PaymentMethod paymentMethod38 = null;
        models.payment.Payment.PaymentStatus paymentStatus39 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType40 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment41 = new models.payment.Payment(uUID35, booking36, 100.0d, paymentMethod38, paymentStatus39, paymentType40);
        models.payment.Payment.PaymentType paymentType42 = payment41.getPaymentType();
        java.util.UUID uUID43 = payment41.getBookingID();
        models.payment.Payment.PaymentType paymentType44 = models.payment.Payment.PaymentType.FINAL;
        payment41.setPaymentType(paymentType44);
        models.payment.PaymentMethod paymentMethod46 = payment41.getMethod();
        models.payment.Payment.PaymentType paymentType47 = payment41.getPaymentType();
        java.util.UUID uUID48 = null;
        models.booking.Booking booking49 = null;
        models.payment.PaymentMethod paymentMethod51 = null;
        models.payment.Payment.PaymentStatus paymentStatus52 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType53 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment54 = new models.payment.Payment(uUID48, booking49, 100.0d, paymentMethod51, paymentStatus52, paymentType53);
        java.util.UUID uUID55 = null;
        models.booking.Booking booking56 = null;
        java.util.UUID uUID58 = null;
        models.booking.Booking booking59 = null;
        models.payment.PaymentMethod paymentMethod61 = null;
        models.payment.Payment.PaymentStatus paymentStatus62 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType63 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment64 = new models.payment.Payment(uUID58, booking59, 100.0d, paymentMethod61, paymentStatus62, paymentType63);
        models.payment.Payment.PaymentType paymentType65 = payment64.getPaymentType();
        java.util.UUID uUID66 = payment64.getBookingID();
        models.payment.Payment.PaymentType paymentType67 = models.payment.Payment.PaymentType.FINAL;
        payment64.setPaymentType(paymentType67);
        java.util.UUID uUID69 = payment64.getPaymentID();
        models.payment.PaymentMethod paymentMethod71 = models.payment.Payment.generateMethod("");
        payment64.setPaymentMethod(paymentMethod71);
        models.payment.Payment.PaymentStatus paymentStatus73 = models.payment.Payment.PaymentStatus.PENDING;
        models.payment.Payment.PaymentType paymentType74 = null;
        models.payment.Payment payment75 = new models.payment.Payment(uUID55, booking56, (double) (byte) 0, paymentMethod71, paymentStatus73, paymentType74);
        payment54.setPaymentMethod(paymentMethod71);
        payment41.setPaymentMethod(paymentMethod71);
        models.booking.Booking booking78 = payment41.getBooking();
        models.payment.Payment.PaymentType paymentType79 = payment41.getPaymentType();
        models.payment.Payment payment80 = new models.payment.Payment((double) 100.0f, booking9, paymentMethod25, paymentType79);
        payment6.setPaymentType(paymentType79);
        org.junit.Assert.assertTrue("'" + paymentStatus4 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus4.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType5 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType5.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID7);
        org.junit.Assert.assertTrue("'" + paymentStatus16 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus16.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType17 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType17.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType19 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType19.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID20);
        org.junit.Assert.assertTrue("'" + paymentType21 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType21.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod25);
        org.junit.Assert.assertTrue("'" + paymentStatus31 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus31.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType32 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType32.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentStatus39 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus39.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType40 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType40.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType42 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType42.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID43);
        org.junit.Assert.assertTrue("'" + paymentType44 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType44.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(paymentMethod46);
        org.junit.Assert.assertTrue("'" + paymentType47 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType47.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentStatus52 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus52.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType53 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType53.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentStatus62 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus62.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType63 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType63.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType65 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType65.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID66);
        org.junit.Assert.assertTrue("'" + paymentType67 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType67.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod71);
        org.junit.Assert.assertTrue("'" + paymentStatus73 + "' != '" + models.payment.Payment.PaymentStatus.PENDING + "'", paymentStatus73.equals(models.payment.Payment.PaymentStatus.PENDING));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(booking78);
        org.junit.Assert.assertTrue("'" + paymentType79 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType79.equals(models.payment.Payment.PaymentType.FINAL));
    }

    @Test
    public void test147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test147");
        java.util.UUID uUID0 = null;
        models.booking.Booking booking1 = null;
        models.payment.PaymentMethod paymentMethod3 = null;
        models.payment.Payment.PaymentStatus paymentStatus4 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType5 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment6 = new models.payment.Payment(uUID0, booking1, 100.0d, paymentMethod3, paymentStatus4, paymentType5);
        models.payment.Payment.PaymentType paymentType7 = payment6.getPaymentType();
        models.payment.Payment.PaymentType paymentType8 = payment6.getPaymentType();
        models.payment.Payment.PaymentType paymentType9 = payment6.getPaymentType();
        models.payment.Payment.PaymentType paymentType10 = payment6.getPaymentType();
        models.payment.Payment.PaymentType paymentType11 = payment6.getPaymentType();
        org.junit.Assert.assertTrue("'" + paymentStatus4 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus4.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType5 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType5.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType7 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType7.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType8 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType8.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType9 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType9.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType10 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType10.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType11 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType11.equals(models.payment.Payment.PaymentType.FINAL));
    }

    @Test
    public void test148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test148");
        java.util.UUID uUID0 = null;
        models.booking.Booking booking1 = null;
        models.payment.PaymentMethod paymentMethod3 = null;
        models.payment.Payment.PaymentStatus paymentStatus4 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType5 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment6 = new models.payment.Payment(uUID0, booking1, 100.0d, paymentMethod3, paymentStatus4, paymentType5);
        models.payment.Payment.PaymentType paymentType7 = models.payment.Payment.PaymentType.DEPOSIT;
        payment6.setPaymentType(paymentType7);
        models.payment.Payment.PaymentStatus paymentStatus9 = payment6.getStatus();
        models.booking.Booking booking11 = null;
        java.util.UUID uUID12 = null;
        models.booking.Booking booking13 = null;
        java.util.UUID uUID15 = null;
        models.booking.Booking booking16 = null;
        java.util.UUID uUID18 = null;
        models.booking.Booking booking19 = null;
        models.payment.PaymentMethod paymentMethod21 = null;
        models.payment.Payment.PaymentStatus paymentStatus22 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType23 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment24 = new models.payment.Payment(uUID18, booking19, 100.0d, paymentMethod21, paymentStatus22, paymentType23);
        models.payment.Payment.PaymentType paymentType25 = payment24.getPaymentType();
        java.util.UUID uUID26 = payment24.getBookingID();
        models.payment.Payment.PaymentType paymentType27 = models.payment.Payment.PaymentType.FINAL;
        payment24.setPaymentType(paymentType27);
        java.util.UUID uUID29 = payment24.getPaymentID();
        models.payment.PaymentMethod paymentMethod31 = models.payment.Payment.generateMethod("");
        payment24.setPaymentMethod(paymentMethod31);
        models.payment.Payment.PaymentStatus paymentStatus33 = models.payment.Payment.PaymentStatus.PENDING;
        models.payment.Payment.PaymentType paymentType34 = null;
        models.payment.Payment payment35 = new models.payment.Payment(uUID15, booking16, (double) (byte) 0, paymentMethod31, paymentStatus33, paymentType34);
        models.payment.Payment.PaymentStatus paymentStatus36 = models.payment.Payment.PaymentStatus.PENDING;
        models.payment.Payment.PaymentType paymentType37 = models.payment.Payment.PaymentType.DEPOSIT;
        models.payment.Payment payment38 = new models.payment.Payment(uUID12, booking13, (double) (byte) 100, paymentMethod31, paymentStatus36, paymentType37);
        models.booking.Booking booking39 = payment38.getBooking();
        double double40 = payment38.getAmount();
        java.util.UUID uUID41 = payment38.getBookingID();
        models.payment.PaymentMethod paymentMethod42 = payment38.getMethod();
        java.util.UUID uUID43 = null;
        models.booking.Booking booking44 = null;
        models.payment.PaymentMethod paymentMethod46 = null;
        models.payment.Payment.PaymentStatus paymentStatus47 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType48 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment49 = new models.payment.Payment(uUID43, booking44, 100.0d, paymentMethod46, paymentStatus47, paymentType48);
        models.payment.Payment.PaymentType paymentType50 = payment49.getPaymentType();
        java.util.UUID uUID51 = payment49.getBookingID();
        models.payment.Payment.PaymentType paymentType52 = models.payment.Payment.PaymentType.FINAL;
        payment49.setPaymentType(paymentType52);
        models.payment.Payment payment54 = new models.payment.Payment((double) 1.0f, booking11, paymentMethod42, paymentType52);
        models.payment.Payment.PaymentType paymentType55 = payment54.getPaymentType();
        payment6.setPaymentType(paymentType55);
        org.junit.Assert.assertTrue("'" + paymentStatus4 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus4.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType5 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType5.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType7 + "' != '" + models.payment.Payment.PaymentType.DEPOSIT + "'", paymentType7.equals(models.payment.Payment.PaymentType.DEPOSIT));
        org.junit.Assert.assertTrue("'" + paymentStatus9 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus9.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentStatus22 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus22.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType23 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType23.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType25 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType25.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID26);
        org.junit.Assert.assertTrue("'" + paymentType27 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType27.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod31);
        org.junit.Assert.assertTrue("'" + paymentStatus33 + "' != '" + models.payment.Payment.PaymentStatus.PENDING + "'", paymentStatus33.equals(models.payment.Payment.PaymentStatus.PENDING));
        org.junit.Assert.assertTrue("'" + paymentStatus36 + "' != '" + models.payment.Payment.PaymentStatus.PENDING + "'", paymentStatus36.equals(models.payment.Payment.PaymentStatus.PENDING));
        org.junit.Assert.assertTrue("'" + paymentType37 + "' != '" + models.payment.Payment.PaymentType.DEPOSIT + "'", paymentType37.equals(models.payment.Payment.PaymentType.DEPOSIT));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(booking39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 100.0d + "'", double40 == 100.0d);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod42);
        org.junit.Assert.assertTrue("'" + paymentStatus47 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus47.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType48 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType48.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType50 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType50.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID51);
        org.junit.Assert.assertTrue("'" + paymentType52 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType52.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType55 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType55.equals(models.payment.Payment.PaymentType.FINAL));
    }

    @Test
    public void test149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test149");
        java.util.UUID uUID0 = null;
        models.booking.Booking booking1 = null;
        java.util.UUID uUID3 = null;
        models.booking.Booking booking4 = null;
        models.payment.PaymentMethod paymentMethod6 = null;
        models.payment.Payment.PaymentStatus paymentStatus7 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType8 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment9 = new models.payment.Payment(uUID3, booking4, 100.0d, paymentMethod6, paymentStatus7, paymentType8);
        java.util.UUID uUID10 = null;
        models.booking.Booking booking11 = null;
        java.util.UUID uUID13 = null;
        models.booking.Booking booking14 = null;
        models.payment.PaymentMethod paymentMethod16 = null;
        models.payment.Payment.PaymentStatus paymentStatus17 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType18 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment19 = new models.payment.Payment(uUID13, booking14, 100.0d, paymentMethod16, paymentStatus17, paymentType18);
        models.payment.Payment.PaymentType paymentType20 = payment19.getPaymentType();
        java.util.UUID uUID21 = payment19.getBookingID();
        models.payment.Payment.PaymentType paymentType22 = models.payment.Payment.PaymentType.FINAL;
        payment19.setPaymentType(paymentType22);
        java.util.UUID uUID24 = payment19.getPaymentID();
        models.payment.PaymentMethod paymentMethod26 = models.payment.Payment.generateMethod("");
        payment19.setPaymentMethod(paymentMethod26);
        models.payment.Payment.PaymentStatus paymentStatus28 = models.payment.Payment.PaymentStatus.PENDING;
        models.payment.Payment.PaymentType paymentType29 = null;
        models.payment.Payment payment30 = new models.payment.Payment(uUID10, booking11, (double) (byte) 0, paymentMethod26, paymentStatus28, paymentType29);
        payment9.setPaymentMethod(paymentMethod26);
        java.util.UUID uUID32 = null;
        models.booking.Booking booking33 = null;
        java.util.UUID uUID35 = null;
        models.booking.Booking booking36 = null;
        models.payment.PaymentMethod paymentMethod38 = null;
        models.payment.Payment.PaymentStatus paymentStatus39 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType40 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment41 = new models.payment.Payment(uUID35, booking36, 100.0d, paymentMethod38, paymentStatus39, paymentType40);
        models.payment.Payment.PaymentType paymentType42 = payment41.getPaymentType();
        java.util.UUID uUID43 = payment41.getBookingID();
        models.payment.Payment.PaymentType paymentType44 = models.payment.Payment.PaymentType.FINAL;
        payment41.setPaymentType(paymentType44);
        java.util.UUID uUID46 = payment41.getPaymentID();
        models.payment.PaymentMethod paymentMethod48 = models.payment.Payment.generateMethod("");
        payment41.setPaymentMethod(paymentMethod48);
        models.payment.Payment.PaymentStatus paymentStatus50 = models.payment.Payment.PaymentStatus.PENDING;
        models.payment.Payment.PaymentType paymentType51 = null;
        models.payment.Payment payment52 = new models.payment.Payment(uUID32, booking33, (double) (byte) 0, paymentMethod48, paymentStatus50, paymentType51);
        models.payment.Payment.PaymentStatus paymentStatus53 = payment52.getStatus();
        java.util.UUID uUID54 = null;
        models.booking.Booking booking55 = null;
        models.payment.PaymentMethod paymentMethod57 = null;
        models.payment.Payment.PaymentStatus paymentStatus58 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType59 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment60 = new models.payment.Payment(uUID54, booking55, 100.0d, paymentMethod57, paymentStatus58, paymentType59);
        models.payment.Payment.PaymentType paymentType61 = payment60.getPaymentType();
        java.util.UUID uUID62 = payment60.getBookingID();
        models.payment.Payment.PaymentType paymentType63 = models.payment.Payment.PaymentType.FINAL;
        payment60.setPaymentType(paymentType63);
        models.payment.Payment payment65 = new models.payment.Payment(uUID0, booking1, (double) 'a', paymentMethod26, paymentStatus53, paymentType63);
        double double66 = payment65.getAmount();
        double double67 = payment65.getAmount();
        models.payment.Payment.PaymentType paymentType68 = payment65.getPaymentType();
        org.junit.Assert.assertTrue("'" + paymentStatus7 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus7.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType8 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType8.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentStatus17 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus17.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType18 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType18.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType20 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType20.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID21);
        org.junit.Assert.assertTrue("'" + paymentType22 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType22.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod26);
        org.junit.Assert.assertTrue("'" + paymentStatus28 + "' != '" + models.payment.Payment.PaymentStatus.PENDING + "'", paymentStatus28.equals(models.payment.Payment.PaymentStatus.PENDING));
        org.junit.Assert.assertTrue("'" + paymentStatus39 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus39.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType40 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType40.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType42 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType42.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID43);
        org.junit.Assert.assertTrue("'" + paymentType44 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType44.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod48);
        org.junit.Assert.assertTrue("'" + paymentStatus50 + "' != '" + models.payment.Payment.PaymentStatus.PENDING + "'", paymentStatus50.equals(models.payment.Payment.PaymentStatus.PENDING));
        org.junit.Assert.assertTrue("'" + paymentStatus53 + "' != '" + models.payment.Payment.PaymentStatus.PENDING + "'", paymentStatus53.equals(models.payment.Payment.PaymentStatus.PENDING));
        org.junit.Assert.assertTrue("'" + paymentStatus58 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus58.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType59 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType59.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType61 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType61.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID62);
        org.junit.Assert.assertTrue("'" + paymentType63 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType63.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 97.0d + "'", double66 == 97.0d);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 97.0d + "'", double67 == 97.0d);
        org.junit.Assert.assertTrue("'" + paymentType68 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType68.equals(models.payment.Payment.PaymentType.FINAL));
    }

    @Test
    public void test150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test150");
        models.booking.Booking booking1 = null;
        models.booking.Booking booking3 = null;
        java.util.UUID uUID4 = null;
        models.booking.Booking booking5 = null;
        models.payment.PaymentMethod paymentMethod7 = null;
        models.payment.Payment.PaymentStatus paymentStatus8 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType9 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment10 = new models.payment.Payment(uUID4, booking5, 100.0d, paymentMethod7, paymentStatus8, paymentType9);
        models.payment.Payment.PaymentType paymentType11 = payment10.getPaymentType();
        java.util.UUID uUID12 = payment10.getBookingID();
        models.payment.Payment.PaymentType paymentType13 = models.payment.Payment.PaymentType.FINAL;
        payment10.setPaymentType(paymentType13);
        java.util.UUID uUID15 = payment10.getPaymentID();
        models.payment.PaymentMethod paymentMethod17 = models.payment.Payment.generateMethod("");
        payment10.setPaymentMethod(paymentMethod17);
        java.util.UUID uUID19 = null;
        models.booking.Booking booking20 = null;
        models.payment.PaymentMethod paymentMethod22 = null;
        models.payment.Payment.PaymentStatus paymentStatus23 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType24 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment25 = new models.payment.Payment(uUID19, booking20, 100.0d, paymentMethod22, paymentStatus23, paymentType24);
        models.payment.Payment.PaymentType paymentType26 = payment25.getPaymentType();
        models.payment.Payment.PaymentType paymentType27 = payment25.getPaymentType();
        models.payment.Payment payment28 = new models.payment.Payment((double) 10, booking3, paymentMethod17, paymentType27);
        java.util.UUID uUID29 = null;
        models.booking.Booking booking30 = null;
        models.payment.PaymentMethod paymentMethod32 = null;
        models.payment.Payment.PaymentStatus paymentStatus33 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType34 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment35 = new models.payment.Payment(uUID29, booking30, 100.0d, paymentMethod32, paymentStatus33, paymentType34);
        models.payment.Payment payment36 = new models.payment.Payment((double) '4', booking1, paymentMethod17, paymentType34);
        java.util.UUID uUID37 = payment36.getBookingID();
        models.payment.PaymentMethod paymentMethod38 = payment36.getMethod();
        org.junit.Assert.assertTrue("'" + paymentStatus8 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus8.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType9 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType9.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType11 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType11.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID12);
        org.junit.Assert.assertTrue("'" + paymentType13 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType13.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod17);
        org.junit.Assert.assertTrue("'" + paymentStatus23 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus23.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType24 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType24.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType26 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType26.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType27 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType27.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentStatus33 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus33.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType34 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType34.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod38);
    }

    @Test
    public void test151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test151");
        java.util.UUID uUID0 = null;
        models.booking.Booking booking1 = null;
        java.util.UUID uUID3 = null;
        models.booking.Booking booking4 = null;
        java.util.UUID uUID6 = null;
        models.booking.Booking booking7 = null;
        models.payment.PaymentMethod paymentMethod9 = null;
        models.payment.Payment.PaymentStatus paymentStatus10 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType11 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment12 = new models.payment.Payment(uUID6, booking7, 100.0d, paymentMethod9, paymentStatus10, paymentType11);
        models.payment.Payment.PaymentType paymentType13 = payment12.getPaymentType();
        java.util.UUID uUID14 = payment12.getBookingID();
        models.payment.Payment.PaymentType paymentType15 = models.payment.Payment.PaymentType.FINAL;
        payment12.setPaymentType(paymentType15);
        java.util.UUID uUID17 = payment12.getPaymentID();
        models.payment.PaymentMethod paymentMethod19 = models.payment.Payment.generateMethod("");
        payment12.setPaymentMethod(paymentMethod19);
        models.payment.Payment.PaymentStatus paymentStatus21 = models.payment.Payment.PaymentStatus.PENDING;
        models.payment.Payment.PaymentType paymentType22 = null;
        models.payment.Payment payment23 = new models.payment.Payment(uUID3, booking4, (double) (byte) 0, paymentMethod19, paymentStatus21, paymentType22);
        models.payment.Payment.PaymentStatus paymentStatus24 = models.payment.Payment.PaymentStatus.PENDING;
        models.payment.Payment.PaymentType paymentType25 = models.payment.Payment.PaymentType.DEPOSIT;
        models.payment.Payment payment26 = new models.payment.Payment(uUID0, booking1, (double) (byte) 100, paymentMethod19, paymentStatus24, paymentType25);
        models.booking.Booking booking27 = payment26.getBooking();
        double double28 = payment26.getAmount();
        java.util.UUID uUID29 = payment26.getBookingID();
        java.util.UUID uUID30 = payment26.getBookingID();
        org.junit.Assert.assertTrue("'" + paymentStatus10 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus10.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType11 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType11.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType13 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType13.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID14);
        org.junit.Assert.assertTrue("'" + paymentType15 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType15.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod19);
        org.junit.Assert.assertTrue("'" + paymentStatus21 + "' != '" + models.payment.Payment.PaymentStatus.PENDING + "'", paymentStatus21.equals(models.payment.Payment.PaymentStatus.PENDING));
        org.junit.Assert.assertTrue("'" + paymentStatus24 + "' != '" + models.payment.Payment.PaymentStatus.PENDING + "'", paymentStatus24.equals(models.payment.Payment.PaymentStatus.PENDING));
        org.junit.Assert.assertTrue("'" + paymentType25 + "' != '" + models.payment.Payment.PaymentType.DEPOSIT + "'", paymentType25.equals(models.payment.Payment.PaymentType.DEPOSIT));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(booking27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 100.0d + "'", double28 == 100.0d);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID30);
    }

    @Test
    public void test152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test152");
        java.util.UUID uUID0 = null;
        models.booking.Booking booking1 = null;
        models.payment.PaymentMethod paymentMethod3 = null;
        models.payment.Payment.PaymentStatus paymentStatus4 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType5 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment6 = new models.payment.Payment(uUID0, booking1, 100.0d, paymentMethod3, paymentStatus4, paymentType5);
        models.payment.Payment.PaymentType paymentType7 = payment6.getPaymentType();
        java.util.UUID uUID8 = payment6.getBookingID();
        models.payment.Payment.PaymentType paymentType9 = models.payment.Payment.PaymentType.FINAL;
        payment6.setPaymentType(paymentType9);
        models.payment.PaymentMethod paymentMethod11 = payment6.getMethod();
        java.util.UUID uUID12 = payment6.getBookingID();
        models.booking.Booking booking13 = payment6.getBooking();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass14 = booking13.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + paymentStatus4 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus4.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType5 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType5.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType7 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType7.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID8);
        org.junit.Assert.assertTrue("'" + paymentType9 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType9.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(paymentMethod11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(booking13);
    }

    @Test
    public void test153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test153");
        java.util.UUID uUID0 = null;
        models.booking.Booking booking1 = null;
        models.payment.PaymentMethod paymentMethod3 = null;
        models.payment.Payment.PaymentStatus paymentStatus4 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType5 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment6 = new models.payment.Payment(uUID0, booking1, 100.0d, paymentMethod3, paymentStatus4, paymentType5);
        models.payment.Payment.PaymentType paymentType7 = payment6.getPaymentType();
        java.util.UUID uUID8 = payment6.getBookingID();
        java.util.UUID uUID9 = payment6.getPaymentID();
        models.booking.Booking booking10 = payment6.getBooking();
        double double11 = payment6.getAmount();
        java.lang.Class<?> wildcardClass12 = payment6.getClass();
        org.junit.Assert.assertTrue("'" + paymentStatus4 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus4.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType5 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType5.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType7 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType7.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(booking10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test154");
        java.util.UUID uUID0 = null;
        models.booking.Booking booking1 = null;
        models.payment.PaymentMethod paymentMethod3 = null;
        models.payment.Payment.PaymentStatus paymentStatus4 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType5 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment6 = new models.payment.Payment(uUID0, booking1, 100.0d, paymentMethod3, paymentStatus4, paymentType5);
        double double7 = payment6.getAmount();
        models.booking.Booking booking8 = payment6.getBooking();
        models.booking.Booking booking9 = payment6.getBooking();
        models.booking.Booking booking10 = payment6.getBooking();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean11 = payment6.processPayment();
            org.junit.Assert.fail("Expected exception of type models.ParkingSystemException; message: Cannot process payment of a payment that is not pending.");
        } catch (models.ParkingSystemException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + paymentStatus4 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus4.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType5 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType5.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 100.0d + "'", double7 == 100.0d);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(booking8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(booking9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(booking10);
    }

    @Test
    public void test155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test155");
        models.booking.Booking booking1 = null;
        models.booking.Booking booking3 = null;
        models.payment.PaymentMethod paymentMethod5 = models.payment.Payment.generateMethod("");
        models.payment.Payment.PaymentType paymentType6 = null;
        models.payment.Payment payment7 = new models.payment.Payment(1.0d, booking3, paymentMethod5, paymentType6);
        models.payment.Payment.PaymentType paymentType8 = null;
        models.payment.Payment payment9 = new models.payment.Payment(97.0d, booking1, paymentMethod5, paymentType8);
        models.payment.Payment.PaymentStatus paymentStatus10 = payment9.getStatus();
        models.payment.PaymentMethod paymentMethod12 = models.payment.Payment.generateMethod("");
        payment9.setPaymentMethod(paymentMethod12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod5);
        org.junit.Assert.assertTrue("'" + paymentStatus10 + "' != '" + models.payment.Payment.PaymentStatus.PENDING + "'", paymentStatus10.equals(models.payment.Payment.PaymentStatus.PENDING));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod12);
    }

    @Test
    public void test156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test156");
        java.util.UUID uUID0 = null;
        models.booking.Booking booking1 = null;
        models.payment.PaymentMethod paymentMethod3 = null;
        models.payment.Payment.PaymentStatus paymentStatus4 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType5 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment6 = new models.payment.Payment(uUID0, booking1, 100.0d, paymentMethod3, paymentStatus4, paymentType5);
        models.payment.Payment.PaymentType paymentType7 = payment6.getPaymentType();
        java.util.UUID uUID8 = payment6.getBookingID();
        models.payment.Payment.PaymentType paymentType9 = models.payment.Payment.PaymentType.FINAL;
        payment6.setPaymentType(paymentType9);
        java.util.UUID uUID11 = payment6.getPaymentID();
        models.payment.PaymentMethod paymentMethod13 = models.payment.Payment.generateMethod("");
        payment6.setPaymentMethod(paymentMethod13);
        models.payment.Payment.PaymentStatus paymentStatus15 = payment6.getStatus();
        java.util.UUID uUID16 = payment6.getPaymentID();
        models.payment.Payment.PaymentStatus paymentStatus17 = payment6.getStatus();
        models.booking.Booking booking18 = payment6.getBooking();
        org.junit.Assert.assertTrue("'" + paymentStatus4 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus4.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType5 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType5.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType7 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType7.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID8);
        org.junit.Assert.assertTrue("'" + paymentType9 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType9.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod13);
        org.junit.Assert.assertTrue("'" + paymentStatus15 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus15.equals(models.payment.Payment.PaymentStatus.FAILED));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID16);
        org.junit.Assert.assertTrue("'" + paymentStatus17 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus17.equals(models.payment.Payment.PaymentStatus.FAILED));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(booking18);
    }

    @Test
    public void test157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test157");
        java.util.UUID uUID0 = null;
        models.booking.Booking booking1 = null;
        models.payment.PaymentMethod paymentMethod3 = null;
        models.payment.Payment.PaymentStatus paymentStatus4 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType5 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment6 = new models.payment.Payment(uUID0, booking1, 100.0d, paymentMethod3, paymentStatus4, paymentType5);
        models.payment.Payment.PaymentType paymentType7 = payment6.getPaymentType();
        java.util.UUID uUID8 = payment6.getPaymentID();
        models.payment.PaymentMethod paymentMethod9 = payment6.getMethod();
        org.junit.Assert.assertTrue("'" + paymentStatus4 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus4.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType5 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType5.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType7 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType7.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(paymentMethod9);
    }

    @Test
    public void test158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test158");
        models.booking.Booking booking1 = null;
        java.util.UUID uUID2 = null;
        models.booking.Booking booking3 = null;
        java.util.UUID uUID5 = null;
        models.booking.Booking booking6 = null;
        java.util.UUID uUID8 = null;
        models.booking.Booking booking9 = null;
        models.payment.PaymentMethod paymentMethod11 = null;
        models.payment.Payment.PaymentStatus paymentStatus12 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType13 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment14 = new models.payment.Payment(uUID8, booking9, 100.0d, paymentMethod11, paymentStatus12, paymentType13);
        models.payment.Payment.PaymentType paymentType15 = payment14.getPaymentType();
        java.util.UUID uUID16 = payment14.getBookingID();
        models.payment.Payment.PaymentType paymentType17 = models.payment.Payment.PaymentType.FINAL;
        payment14.setPaymentType(paymentType17);
        java.util.UUID uUID19 = payment14.getPaymentID();
        models.payment.PaymentMethod paymentMethod21 = models.payment.Payment.generateMethod("");
        payment14.setPaymentMethod(paymentMethod21);
        models.payment.Payment.PaymentStatus paymentStatus23 = models.payment.Payment.PaymentStatus.PENDING;
        models.payment.Payment.PaymentType paymentType24 = null;
        models.payment.Payment payment25 = new models.payment.Payment(uUID5, booking6, (double) (byte) 0, paymentMethod21, paymentStatus23, paymentType24);
        models.payment.Payment.PaymentStatus paymentStatus26 = models.payment.Payment.PaymentStatus.PENDING;
        models.payment.Payment.PaymentType paymentType27 = models.payment.Payment.PaymentType.DEPOSIT;
        models.payment.Payment payment28 = new models.payment.Payment(uUID2, booking3, (double) (byte) 100, paymentMethod21, paymentStatus26, paymentType27);
        models.booking.Booking booking29 = payment28.getBooking();
        double double30 = payment28.getAmount();
        java.util.UUID uUID31 = payment28.getBookingID();
        models.payment.PaymentMethod paymentMethod32 = payment28.getMethod();
        java.util.UUID uUID33 = null;
        models.booking.Booking booking34 = null;
        models.payment.PaymentMethod paymentMethod36 = null;
        models.payment.Payment.PaymentStatus paymentStatus37 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType38 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment39 = new models.payment.Payment(uUID33, booking34, 100.0d, paymentMethod36, paymentStatus37, paymentType38);
        models.payment.Payment.PaymentType paymentType40 = payment39.getPaymentType();
        java.util.UUID uUID41 = payment39.getBookingID();
        models.payment.Payment.PaymentType paymentType42 = models.payment.Payment.PaymentType.FINAL;
        payment39.setPaymentType(paymentType42);
        models.payment.Payment payment44 = new models.payment.Payment((double) 1.0f, booking1, paymentMethod32, paymentType42);
        java.util.UUID uUID45 = payment44.getBookingID();
        org.junit.Assert.assertTrue("'" + paymentStatus12 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus12.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType13 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType13.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType15 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType15.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID16);
        org.junit.Assert.assertTrue("'" + paymentType17 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType17.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod21);
        org.junit.Assert.assertTrue("'" + paymentStatus23 + "' != '" + models.payment.Payment.PaymentStatus.PENDING + "'", paymentStatus23.equals(models.payment.Payment.PaymentStatus.PENDING));
        org.junit.Assert.assertTrue("'" + paymentStatus26 + "' != '" + models.payment.Payment.PaymentStatus.PENDING + "'", paymentStatus26.equals(models.payment.Payment.PaymentStatus.PENDING));
        org.junit.Assert.assertTrue("'" + paymentType27 + "' != '" + models.payment.Payment.PaymentType.DEPOSIT + "'", paymentType27.equals(models.payment.Payment.PaymentType.DEPOSIT));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(booking29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 100.0d + "'", double30 == 100.0d);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod32);
        org.junit.Assert.assertTrue("'" + paymentStatus37 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus37.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType38 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType38.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType40 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType40.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID41);
        org.junit.Assert.assertTrue("'" + paymentType42 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType42.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID45);
    }

    @Test
    public void test159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test159");
        models.booking.Booking booking1 = null;
        models.booking.Booking booking3 = null;
        models.booking.Booking booking5 = null;
        models.booking.Booking booking7 = null;
        java.util.UUID uUID8 = null;
        models.booking.Booking booking9 = null;
        models.payment.PaymentMethod paymentMethod11 = null;
        models.payment.Payment.PaymentStatus paymentStatus12 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType13 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment14 = new models.payment.Payment(uUID8, booking9, 100.0d, paymentMethod11, paymentStatus12, paymentType13);
        models.payment.Payment.PaymentType paymentType15 = payment14.getPaymentType();
        java.util.UUID uUID16 = payment14.getBookingID();
        models.payment.Payment.PaymentType paymentType17 = models.payment.Payment.PaymentType.FINAL;
        payment14.setPaymentType(paymentType17);
        java.util.UUID uUID19 = payment14.getPaymentID();
        models.payment.PaymentMethod paymentMethod21 = models.payment.Payment.generateMethod("");
        payment14.setPaymentMethod(paymentMethod21);
        java.util.UUID uUID23 = null;
        models.booking.Booking booking24 = null;
        models.payment.PaymentMethod paymentMethod26 = null;
        models.payment.Payment.PaymentStatus paymentStatus27 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType28 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment29 = new models.payment.Payment(uUID23, booking24, 100.0d, paymentMethod26, paymentStatus27, paymentType28);
        models.payment.Payment.PaymentType paymentType30 = payment29.getPaymentType();
        models.payment.Payment.PaymentType paymentType31 = payment29.getPaymentType();
        models.payment.Payment payment32 = new models.payment.Payment((double) 10, booking7, paymentMethod21, paymentType31);
        java.util.UUID uUID33 = null;
        models.booking.Booking booking34 = null;
        models.payment.PaymentMethod paymentMethod36 = null;
        models.payment.Payment.PaymentStatus paymentStatus37 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType38 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment39 = new models.payment.Payment(uUID33, booking34, 100.0d, paymentMethod36, paymentStatus37, paymentType38);
        models.payment.Payment.PaymentType paymentType40 = payment39.getPaymentType();
        java.util.UUID uUID41 = payment39.getBookingID();
        models.payment.Payment.PaymentType paymentType42 = models.payment.Payment.PaymentType.FINAL;
        payment39.setPaymentType(paymentType42);
        models.payment.PaymentMethod paymentMethod44 = payment39.getMethod();
        models.payment.Payment.PaymentType paymentType45 = payment39.getPaymentType();
        models.payment.Payment payment46 = new models.payment.Payment((double) 0, booking5, paymentMethod21, paymentType45);
        models.booking.Booking booking48 = null;
        java.util.UUID uUID49 = null;
        models.booking.Booking booking50 = null;
        models.payment.PaymentMethod paymentMethod52 = null;
        models.payment.Payment.PaymentStatus paymentStatus53 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType54 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment55 = new models.payment.Payment(uUID49, booking50, 100.0d, paymentMethod52, paymentStatus53, paymentType54);
        models.payment.Payment.PaymentType paymentType56 = payment55.getPaymentType();
        java.util.UUID uUID57 = payment55.getBookingID();
        models.payment.Payment.PaymentType paymentType58 = models.payment.Payment.PaymentType.FINAL;
        payment55.setPaymentType(paymentType58);
        java.util.UUID uUID60 = payment55.getPaymentID();
        models.payment.PaymentMethod paymentMethod62 = models.payment.Payment.generateMethod("");
        payment55.setPaymentMethod(paymentMethod62);
        java.util.UUID uUID64 = null;
        models.booking.Booking booking65 = null;
        models.payment.PaymentMethod paymentMethod67 = null;
        models.payment.Payment.PaymentStatus paymentStatus68 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType69 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment70 = new models.payment.Payment(uUID64, booking65, 100.0d, paymentMethod67, paymentStatus68, paymentType69);
        models.payment.Payment.PaymentType paymentType71 = payment70.getPaymentType();
        models.payment.Payment.PaymentType paymentType72 = payment70.getPaymentType();
        models.payment.Payment payment73 = new models.payment.Payment((double) 10, booking48, paymentMethod62, paymentType72);
        models.payment.Payment payment74 = new models.payment.Payment((double) 10, booking3, paymentMethod21, paymentType72);
        models.payment.PaymentMethod paymentMethod75 = payment74.getMethod();
        java.util.UUID uUID76 = null;
        models.booking.Booking booking77 = null;
        models.payment.PaymentMethod paymentMethod79 = null;
        models.payment.Payment.PaymentStatus paymentStatus80 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType81 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment82 = new models.payment.Payment(uUID76, booking77, 100.0d, paymentMethod79, paymentStatus80, paymentType81);
        models.payment.Payment.PaymentType paymentType83 = models.payment.Payment.PaymentType.DEPOSIT;
        payment82.setPaymentType(paymentType83);
        java.util.UUID uUID85 = payment82.getBookingID();
        models.payment.Payment.PaymentType paymentType86 = payment82.getPaymentType();
        models.payment.Payment payment87 = new models.payment.Payment(0.0d, booking1, paymentMethod75, paymentType86);
        org.junit.Assert.assertTrue("'" + paymentStatus12 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus12.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType13 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType13.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType15 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType15.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID16);
        org.junit.Assert.assertTrue("'" + paymentType17 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType17.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod21);
        org.junit.Assert.assertTrue("'" + paymentStatus27 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus27.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType28 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType28.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType30 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType30.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType31 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType31.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentStatus37 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus37.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType38 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType38.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType40 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType40.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID41);
        org.junit.Assert.assertTrue("'" + paymentType42 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType42.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(paymentMethod44);
        org.junit.Assert.assertTrue("'" + paymentType45 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType45.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentStatus53 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus53.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType54 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType54.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType56 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType56.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID57);
        org.junit.Assert.assertTrue("'" + paymentType58 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType58.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod62);
        org.junit.Assert.assertTrue("'" + paymentStatus68 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus68.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType69 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType69.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType71 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType71.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType72 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType72.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod75);
        org.junit.Assert.assertTrue("'" + paymentStatus80 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus80.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType81 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType81.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType83 + "' != '" + models.payment.Payment.PaymentType.DEPOSIT + "'", paymentType83.equals(models.payment.Payment.PaymentType.DEPOSIT));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID85);
        org.junit.Assert.assertTrue("'" + paymentType86 + "' != '" + models.payment.Payment.PaymentType.DEPOSIT + "'", paymentType86.equals(models.payment.Payment.PaymentType.DEPOSIT));
    }

    @Test
    public void test160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test160");
        java.util.UUID uUID0 = null;
        models.booking.Booking booking1 = null;
        models.payment.PaymentMethod paymentMethod3 = null;
        models.payment.Payment.PaymentStatus paymentStatus4 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType5 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment6 = new models.payment.Payment(uUID0, booking1, 100.0d, paymentMethod3, paymentStatus4, paymentType5);
        models.payment.Payment.PaymentStatus paymentStatus7 = payment6.getStatus();
        models.payment.PaymentMethod paymentMethod8 = payment6.getMethod();
        models.payment.Payment.PaymentType paymentType9 = payment6.getPaymentType();
        models.payment.Payment.PaymentType paymentType10 = payment6.getPaymentType();
        org.junit.Assert.assertTrue("'" + paymentStatus4 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus4.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType5 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType5.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentStatus7 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus7.equals(models.payment.Payment.PaymentStatus.FAILED));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(paymentMethod8);
        org.junit.Assert.assertTrue("'" + paymentType9 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType9.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType10 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType10.equals(models.payment.Payment.PaymentType.FINAL));
    }

    @Test
    public void test161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test161");
        models.booking.Booking booking1 = null;
        models.booking.Booking booking3 = null;
        java.util.UUID uUID4 = null;
        models.booking.Booking booking5 = null;
        models.payment.PaymentMethod paymentMethod7 = null;
        models.payment.Payment.PaymentStatus paymentStatus8 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType9 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment10 = new models.payment.Payment(uUID4, booking5, 100.0d, paymentMethod7, paymentStatus8, paymentType9);
        models.payment.Payment.PaymentType paymentType11 = payment10.getPaymentType();
        java.util.UUID uUID12 = payment10.getBookingID();
        models.payment.Payment.PaymentType paymentType13 = models.payment.Payment.PaymentType.FINAL;
        payment10.setPaymentType(paymentType13);
        java.util.UUID uUID15 = payment10.getPaymentID();
        models.payment.PaymentMethod paymentMethod17 = models.payment.Payment.generateMethod("");
        payment10.setPaymentMethod(paymentMethod17);
        java.util.UUID uUID19 = null;
        models.booking.Booking booking20 = null;
        models.payment.PaymentMethod paymentMethod22 = null;
        models.payment.Payment.PaymentStatus paymentStatus23 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType24 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment25 = new models.payment.Payment(uUID19, booking20, 100.0d, paymentMethod22, paymentStatus23, paymentType24);
        models.payment.Payment.PaymentType paymentType26 = payment25.getPaymentType();
        models.payment.Payment.PaymentType paymentType27 = payment25.getPaymentType();
        models.payment.Payment payment28 = new models.payment.Payment((double) 10, booking3, paymentMethod17, paymentType27);
        java.util.UUID uUID29 = null;
        models.booking.Booking booking30 = null;
        models.payment.PaymentMethod paymentMethod32 = null;
        models.payment.Payment.PaymentStatus paymentStatus33 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType34 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment35 = new models.payment.Payment(uUID29, booking30, 100.0d, paymentMethod32, paymentStatus33, paymentType34);
        models.payment.Payment.PaymentType paymentType36 = payment35.getPaymentType();
        java.util.UUID uUID37 = payment35.getBookingID();
        models.payment.Payment.PaymentType paymentType38 = models.payment.Payment.PaymentType.FINAL;
        payment35.setPaymentType(paymentType38);
        models.payment.PaymentMethod paymentMethod40 = payment35.getMethod();
        models.payment.Payment.PaymentType paymentType41 = payment35.getPaymentType();
        models.payment.Payment payment42 = new models.payment.Payment((double) 0, booking1, paymentMethod17, paymentType41);
        double double43 = payment42.getAmount();
        double double44 = payment42.getAmount();
        boolean boolean45 = payment42.processPayment();
        java.util.UUID uUID46 = payment42.getBookingID();
        org.junit.Assert.assertTrue("'" + paymentStatus8 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus8.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType9 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType9.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType11 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType11.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID12);
        org.junit.Assert.assertTrue("'" + paymentType13 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType13.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod17);
        org.junit.Assert.assertTrue("'" + paymentStatus23 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus23.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType24 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType24.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType26 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType26.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType27 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType27.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentStatus33 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus33.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType34 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType34.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType36 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType36.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID37);
        org.junit.Assert.assertTrue("'" + paymentType38 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType38.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(paymentMethod40);
        org.junit.Assert.assertTrue("'" + paymentType41 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType41.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.0d + "'", double44 == 0.0d);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID46);
    }

    @Test
    public void test162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test162");
        java.util.UUID uUID0 = null;
        models.booking.Booking booking1 = null;
        models.payment.PaymentMethod paymentMethod3 = null;
        models.payment.Payment.PaymentStatus paymentStatus4 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType5 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment6 = new models.payment.Payment(uUID0, booking1, 100.0d, paymentMethod3, paymentStatus4, paymentType5);
        models.payment.Payment.PaymentType paymentType7 = payment6.getPaymentType();
        java.util.UUID uUID8 = payment6.getBookingID();
        models.payment.Payment.PaymentType paymentType9 = models.payment.Payment.PaymentType.FINAL;
        payment6.setPaymentType(paymentType9);
        java.util.UUID uUID11 = payment6.getPaymentID();
        double double12 = payment6.getAmount();
        java.util.UUID uUID13 = null;
        models.booking.Booking booking14 = null;
        models.payment.PaymentMethod paymentMethod16 = null;
        models.payment.Payment.PaymentStatus paymentStatus17 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType18 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment19 = new models.payment.Payment(uUID13, booking14, 100.0d, paymentMethod16, paymentStatus17, paymentType18);
        payment6.setPaymentType(paymentType18);
        java.util.UUID uUID21 = null;
        models.booking.Booking booking22 = null;
        models.payment.PaymentMethod paymentMethod24 = null;
        models.payment.Payment.PaymentStatus paymentStatus25 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType26 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment27 = new models.payment.Payment(uUID21, booking22, 100.0d, paymentMethod24, paymentStatus25, paymentType26);
        models.payment.Payment.PaymentType paymentType28 = payment27.getPaymentType();
        models.payment.Payment.PaymentType paymentType29 = payment27.getPaymentType();
        java.util.UUID uUID30 = null;
        models.booking.Booking booking31 = null;
        java.util.UUID uUID33 = null;
        models.booking.Booking booking34 = null;
        models.payment.PaymentMethod paymentMethod36 = null;
        models.payment.Payment.PaymentStatus paymentStatus37 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType38 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment39 = new models.payment.Payment(uUID33, booking34, 100.0d, paymentMethod36, paymentStatus37, paymentType38);
        models.payment.Payment.PaymentType paymentType40 = payment39.getPaymentType();
        java.util.UUID uUID41 = payment39.getBookingID();
        models.payment.Payment.PaymentType paymentType42 = models.payment.Payment.PaymentType.FINAL;
        payment39.setPaymentType(paymentType42);
        java.util.UUID uUID44 = payment39.getPaymentID();
        models.payment.PaymentMethod paymentMethod46 = models.payment.Payment.generateMethod("");
        payment39.setPaymentMethod(paymentMethod46);
        models.payment.Payment.PaymentStatus paymentStatus48 = models.payment.Payment.PaymentStatus.PENDING;
        models.payment.Payment.PaymentType paymentType49 = null;
        models.payment.Payment payment50 = new models.payment.Payment(uUID30, booking31, (double) (byte) 0, paymentMethod46, paymentStatus48, paymentType49);
        payment27.setPaymentMethod(paymentMethod46);
        payment6.setPaymentMethod(paymentMethod46);
        double double53 = payment6.getAmount();
        org.junit.Assert.assertTrue("'" + paymentStatus4 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus4.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType5 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType5.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType7 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType7.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID8);
        org.junit.Assert.assertTrue("'" + paymentType9 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType9.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 100.0d + "'", double12 == 100.0d);
        org.junit.Assert.assertTrue("'" + paymentStatus17 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus17.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType18 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType18.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentStatus25 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus25.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType26 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType26.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType28 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType28.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType29 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType29.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentStatus37 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus37.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType38 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType38.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType40 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType40.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID41);
        org.junit.Assert.assertTrue("'" + paymentType42 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType42.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod46);
        org.junit.Assert.assertTrue("'" + paymentStatus48 + "' != '" + models.payment.Payment.PaymentStatus.PENDING + "'", paymentStatus48.equals(models.payment.Payment.PaymentStatus.PENDING));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 100.0d + "'", double53 == 100.0d);
    }

    @Test
    public void test163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test163");
        java.util.UUID uUID0 = null;
        models.booking.Booking booking1 = null;
        java.util.UUID uUID3 = null;
        models.booking.Booking booking4 = null;
        models.payment.PaymentMethod paymentMethod7 = models.payment.Payment.generateMethod("");
        java.util.UUID uUID8 = null;
        models.booking.Booking booking9 = null;
        models.payment.PaymentMethod paymentMethod11 = null;
        models.payment.Payment.PaymentStatus paymentStatus12 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType13 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment14 = new models.payment.Payment(uUID8, booking9, 100.0d, paymentMethod11, paymentStatus12, paymentType13);
        models.payment.Payment.PaymentStatus paymentStatus15 = payment14.getStatus();
        java.util.UUID uUID16 = null;
        models.booking.Booking booking17 = null;
        models.payment.PaymentMethod paymentMethod19 = null;
        models.payment.Payment.PaymentStatus paymentStatus20 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType21 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment22 = new models.payment.Payment(uUID16, booking17, 100.0d, paymentMethod19, paymentStatus20, paymentType21);
        models.payment.Payment.PaymentType paymentType23 = payment22.getPaymentType();
        java.util.UUID uUID24 = payment22.getBookingID();
        models.payment.Payment.PaymentType paymentType25 = models.payment.Payment.PaymentType.FINAL;
        payment22.setPaymentType(paymentType25);
        models.payment.PaymentMethod paymentMethod27 = payment22.getMethod();
        models.payment.Payment.PaymentType paymentType28 = payment22.getPaymentType();
        models.payment.Payment payment29 = new models.payment.Payment(uUID3, booking4, (double) 1L, paymentMethod7, paymentStatus15, paymentType28);
        java.util.UUID uUID30 = null;
        models.booking.Booking booking31 = null;
        models.payment.PaymentMethod paymentMethod33 = null;
        models.payment.Payment.PaymentStatus paymentStatus34 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType35 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment36 = new models.payment.Payment(uUID30, booking31, 100.0d, paymentMethod33, paymentStatus34, paymentType35);
        models.payment.Payment.PaymentStatus paymentStatus37 = payment36.getStatus();
        models.booking.Booking booking39 = null;
        java.util.UUID uUID40 = null;
        models.booking.Booking booking41 = null;
        models.payment.PaymentMethod paymentMethod43 = null;
        models.payment.Payment.PaymentStatus paymentStatus44 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType45 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment46 = new models.payment.Payment(uUID40, booking41, 100.0d, paymentMethod43, paymentStatus44, paymentType45);
        models.payment.Payment.PaymentType paymentType47 = payment46.getPaymentType();
        java.util.UUID uUID48 = payment46.getBookingID();
        models.payment.Payment.PaymentType paymentType49 = models.payment.Payment.PaymentType.FINAL;
        payment46.setPaymentType(paymentType49);
        java.util.UUID uUID51 = payment46.getPaymentID();
        models.payment.PaymentMethod paymentMethod53 = models.payment.Payment.generateMethod("");
        payment46.setPaymentMethod(paymentMethod53);
        java.util.UUID uUID55 = null;
        models.booking.Booking booking56 = null;
        models.payment.PaymentMethod paymentMethod58 = null;
        models.payment.Payment.PaymentStatus paymentStatus59 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType60 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment61 = new models.payment.Payment(uUID55, booking56, 100.0d, paymentMethod58, paymentStatus59, paymentType60);
        models.payment.Payment.PaymentType paymentType62 = payment61.getPaymentType();
        models.payment.Payment.PaymentType paymentType63 = payment61.getPaymentType();
        models.payment.Payment payment64 = new models.payment.Payment((double) 10, booking39, paymentMethod53, paymentType63);
        models.payment.Payment payment65 = new models.payment.Payment(uUID0, booking1, (double) (-1), paymentMethod7, paymentStatus37, paymentType63);
        models.payment.PaymentMethod paymentMethod66 = payment65.getMethod();
        models.payment.Payment.PaymentType paymentType67 = payment65.getPaymentType();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod7);
        org.junit.Assert.assertTrue("'" + paymentStatus12 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus12.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType13 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType13.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentStatus15 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus15.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentStatus20 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus20.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType21 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType21.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType23 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType23.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID24);
        org.junit.Assert.assertTrue("'" + paymentType25 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType25.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(paymentMethod27);
        org.junit.Assert.assertTrue("'" + paymentType28 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType28.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentStatus34 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus34.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType35 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType35.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentStatus37 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus37.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentStatus44 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus44.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType45 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType45.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType47 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType47.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID48);
        org.junit.Assert.assertTrue("'" + paymentType49 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType49.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod53);
        org.junit.Assert.assertTrue("'" + paymentStatus59 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus59.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType60 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType60.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType62 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType62.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType63 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType63.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod66);
        org.junit.Assert.assertTrue("'" + paymentType67 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType67.equals(models.payment.Payment.PaymentType.FINAL));
    }

    @Test
    public void test164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test164");
        java.util.UUID uUID0 = null;
        models.booking.Booking booking1 = null;
        models.payment.PaymentMethod paymentMethod3 = null;
        models.payment.Payment.PaymentStatus paymentStatus4 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType5 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment6 = new models.payment.Payment(uUID0, booking1, 100.0d, paymentMethod3, paymentStatus4, paymentType5);
        models.payment.Payment.PaymentType paymentType7 = payment6.getPaymentType();
        java.util.UUID uUID8 = payment6.getBookingID();
        models.payment.PaymentMethod paymentMethod9 = payment6.getMethod();
        models.payment.Payment.PaymentType paymentType10 = payment6.getPaymentType();
        models.booking.Booking booking11 = payment6.getBooking();
        org.junit.Assert.assertTrue("'" + paymentStatus4 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus4.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType5 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType5.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType7 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType7.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(paymentMethod9);
        org.junit.Assert.assertTrue("'" + paymentType10 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType10.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(booking11);
    }

    @Test
    public void test165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test165");
        java.util.UUID uUID0 = null;
        models.booking.Booking booking1 = null;
        models.payment.PaymentMethod paymentMethod4 = models.payment.Payment.generateMethod("");
        java.util.UUID uUID5 = null;
        models.booking.Booking booking6 = null;
        models.payment.PaymentMethod paymentMethod8 = null;
        models.payment.Payment.PaymentStatus paymentStatus9 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType10 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment11 = new models.payment.Payment(uUID5, booking6, 100.0d, paymentMethod8, paymentStatus9, paymentType10);
        models.payment.Payment.PaymentStatus paymentStatus12 = payment11.getStatus();
        java.util.UUID uUID13 = null;
        models.booking.Booking booking14 = null;
        models.payment.PaymentMethod paymentMethod16 = null;
        models.payment.Payment.PaymentStatus paymentStatus17 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType18 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment19 = new models.payment.Payment(uUID13, booking14, 100.0d, paymentMethod16, paymentStatus17, paymentType18);
        models.payment.Payment.PaymentType paymentType20 = payment19.getPaymentType();
        java.util.UUID uUID21 = payment19.getBookingID();
        models.payment.Payment.PaymentType paymentType22 = models.payment.Payment.PaymentType.FINAL;
        payment19.setPaymentType(paymentType22);
        models.payment.PaymentMethod paymentMethod24 = payment19.getMethod();
        models.payment.Payment.PaymentType paymentType25 = payment19.getPaymentType();
        models.payment.Payment payment26 = new models.payment.Payment(uUID0, booking1, (double) 1L, paymentMethod4, paymentStatus12, paymentType25);
        models.booking.Booking booking28 = null;
        models.booking.Booking booking30 = null;
        java.util.UUID uUID31 = null;
        models.booking.Booking booking32 = null;
        models.payment.PaymentMethod paymentMethod34 = null;
        models.payment.Payment.PaymentStatus paymentStatus35 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType36 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment37 = new models.payment.Payment(uUID31, booking32, 100.0d, paymentMethod34, paymentStatus35, paymentType36);
        models.payment.Payment.PaymentType paymentType38 = payment37.getPaymentType();
        java.util.UUID uUID39 = payment37.getBookingID();
        models.payment.Payment.PaymentType paymentType40 = models.payment.Payment.PaymentType.FINAL;
        payment37.setPaymentType(paymentType40);
        java.util.UUID uUID42 = payment37.getPaymentID();
        models.payment.PaymentMethod paymentMethod44 = models.payment.Payment.generateMethod("");
        payment37.setPaymentMethod(paymentMethod44);
        java.util.UUID uUID46 = null;
        models.booking.Booking booking47 = null;
        models.payment.PaymentMethod paymentMethod49 = null;
        models.payment.Payment.PaymentStatus paymentStatus50 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType51 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment52 = new models.payment.Payment(uUID46, booking47, 100.0d, paymentMethod49, paymentStatus50, paymentType51);
        models.payment.Payment.PaymentType paymentType53 = payment52.getPaymentType();
        models.payment.Payment.PaymentType paymentType54 = payment52.getPaymentType();
        models.payment.Payment payment55 = new models.payment.Payment((double) 10, booking30, paymentMethod44, paymentType54);
        java.util.UUID uUID56 = null;
        models.booking.Booking booking57 = null;
        models.payment.PaymentMethod paymentMethod59 = null;
        models.payment.Payment.PaymentStatus paymentStatus60 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType61 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment62 = new models.payment.Payment(uUID56, booking57, 100.0d, paymentMethod59, paymentStatus60, paymentType61);
        models.payment.Payment.PaymentType paymentType63 = payment62.getPaymentType();
        java.util.UUID uUID64 = payment62.getBookingID();
        models.payment.Payment.PaymentType paymentType65 = models.payment.Payment.PaymentType.FINAL;
        payment62.setPaymentType(paymentType65);
        models.payment.PaymentMethod paymentMethod67 = payment62.getMethod();
        models.payment.Payment.PaymentType paymentType68 = payment62.getPaymentType();
        models.payment.Payment payment69 = new models.payment.Payment((double) (short) -1, booking28, paymentMethod44, paymentType68);
        payment26.setPaymentMethod(paymentMethod44);
        java.lang.Class<?> wildcardClass71 = payment26.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod4);
        org.junit.Assert.assertTrue("'" + paymentStatus9 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus9.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType10 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType10.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentStatus12 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus12.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentStatus17 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus17.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType18 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType18.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType20 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType20.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID21);
        org.junit.Assert.assertTrue("'" + paymentType22 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType22.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(paymentMethod24);
        org.junit.Assert.assertTrue("'" + paymentType25 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType25.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentStatus35 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus35.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType36 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType36.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType38 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType38.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID39);
        org.junit.Assert.assertTrue("'" + paymentType40 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType40.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod44);
        org.junit.Assert.assertTrue("'" + paymentStatus50 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus50.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType51 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType51.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType53 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType53.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType54 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType54.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentStatus60 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus60.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType61 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType61.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType63 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType63.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID64);
        org.junit.Assert.assertTrue("'" + paymentType65 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType65.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(paymentMethod67);
        org.junit.Assert.assertTrue("'" + paymentType68 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType68.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass71);
    }

    @Test
    public void test166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test166");
        models.booking.Booking booking1 = null;
        java.util.UUID uUID2 = null;
        models.booking.Booking booking3 = null;
        models.payment.PaymentMethod paymentMethod5 = null;
        models.payment.Payment.PaymentStatus paymentStatus6 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType7 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment8 = new models.payment.Payment(uUID2, booking3, 100.0d, paymentMethod5, paymentStatus6, paymentType7);
        models.payment.Payment.PaymentType paymentType9 = payment8.getPaymentType();
        java.util.UUID uUID10 = payment8.getBookingID();
        models.payment.Payment.PaymentType paymentType11 = models.payment.Payment.PaymentType.FINAL;
        payment8.setPaymentType(paymentType11);
        java.util.UUID uUID13 = payment8.getPaymentID();
        double double14 = payment8.getAmount();
        java.util.UUID uUID15 = null;
        models.booking.Booking booking16 = null;
        models.payment.PaymentMethod paymentMethod18 = null;
        models.payment.Payment.PaymentStatus paymentStatus19 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType20 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment21 = new models.payment.Payment(uUID15, booking16, 100.0d, paymentMethod18, paymentStatus19, paymentType20);
        payment8.setPaymentType(paymentType20);
        models.booking.Booking booking24 = null;
        models.booking.Booking booking26 = null;
        java.util.UUID uUID27 = null;
        models.booking.Booking booking28 = null;
        models.payment.PaymentMethod paymentMethod30 = null;
        models.payment.Payment.PaymentStatus paymentStatus31 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType32 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment33 = new models.payment.Payment(uUID27, booking28, 100.0d, paymentMethod30, paymentStatus31, paymentType32);
        models.payment.Payment.PaymentType paymentType34 = payment33.getPaymentType();
        java.util.UUID uUID35 = payment33.getBookingID();
        models.payment.Payment.PaymentType paymentType36 = models.payment.Payment.PaymentType.FINAL;
        payment33.setPaymentType(paymentType36);
        java.util.UUID uUID38 = payment33.getPaymentID();
        models.payment.PaymentMethod paymentMethod40 = models.payment.Payment.generateMethod("");
        payment33.setPaymentMethod(paymentMethod40);
        java.util.UUID uUID42 = null;
        models.booking.Booking booking43 = null;
        models.payment.PaymentMethod paymentMethod45 = null;
        models.payment.Payment.PaymentStatus paymentStatus46 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType47 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment48 = new models.payment.Payment(uUID42, booking43, 100.0d, paymentMethod45, paymentStatus46, paymentType47);
        models.payment.Payment.PaymentType paymentType49 = payment48.getPaymentType();
        models.payment.Payment.PaymentType paymentType50 = payment48.getPaymentType();
        models.payment.Payment payment51 = new models.payment.Payment((double) 10, booking26, paymentMethod40, paymentType50);
        java.util.UUID uUID52 = null;
        models.booking.Booking booking53 = null;
        models.payment.PaymentMethod paymentMethod55 = null;
        models.payment.Payment.PaymentStatus paymentStatus56 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType57 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment58 = new models.payment.Payment(uUID52, booking53, 100.0d, paymentMethod55, paymentStatus56, paymentType57);
        models.payment.Payment.PaymentType paymentType59 = payment58.getPaymentType();
        java.util.UUID uUID60 = payment58.getBookingID();
        models.payment.Payment.PaymentType paymentType61 = models.payment.Payment.PaymentType.FINAL;
        payment58.setPaymentType(paymentType61);
        models.payment.PaymentMethod paymentMethod63 = payment58.getMethod();
        models.payment.Payment.PaymentType paymentType64 = payment58.getPaymentType();
        models.payment.Payment payment65 = new models.payment.Payment((double) 0, booking24, paymentMethod40, paymentType64);
        payment8.setPaymentMethod(paymentMethod40);
        java.util.UUID uUID67 = null;
        models.booking.Booking booking68 = null;
        models.payment.PaymentMethod paymentMethod70 = null;
        models.payment.Payment.PaymentStatus paymentStatus71 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType72 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment73 = new models.payment.Payment(uUID67, booking68, 100.0d, paymentMethod70, paymentStatus71, paymentType72);
        models.payment.Payment.PaymentType paymentType74 = models.payment.Payment.PaymentType.DEPOSIT;
        payment73.setPaymentType(paymentType74);
        models.payment.Payment payment76 = new models.payment.Payment((double) (short) 1, booking1, paymentMethod40, paymentType74);
        models.payment.Payment.PaymentStatus paymentStatus77 = payment76.getStatus();
        double double78 = payment76.getAmount();
        org.junit.Assert.assertTrue("'" + paymentStatus6 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus6.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType7 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType7.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType9 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType9.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID10);
        org.junit.Assert.assertTrue("'" + paymentType11 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType11.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 100.0d + "'", double14 == 100.0d);
        org.junit.Assert.assertTrue("'" + paymentStatus19 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus19.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType20 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType20.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentStatus31 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus31.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType32 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType32.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType34 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType34.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID35);
        org.junit.Assert.assertTrue("'" + paymentType36 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType36.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod40);
        org.junit.Assert.assertTrue("'" + paymentStatus46 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus46.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType47 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType47.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType49 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType49.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType50 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType50.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentStatus56 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus56.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType57 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType57.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType59 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType59.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID60);
        org.junit.Assert.assertTrue("'" + paymentType61 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType61.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(paymentMethod63);
        org.junit.Assert.assertTrue("'" + paymentType64 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType64.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentStatus71 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus71.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType72 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType72.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType74 + "' != '" + models.payment.Payment.PaymentType.DEPOSIT + "'", paymentType74.equals(models.payment.Payment.PaymentType.DEPOSIT));
        org.junit.Assert.assertTrue("'" + paymentStatus77 + "' != '" + models.payment.Payment.PaymentStatus.PENDING + "'", paymentStatus77.equals(models.payment.Payment.PaymentStatus.PENDING));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 1.0d + "'", double78 == 1.0d);
    }

    @Test
    public void test167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test167");
        java.util.UUID uUID0 = null;
        models.booking.Booking booking1 = null;
        models.payment.PaymentMethod paymentMethod3 = null;
        models.payment.Payment.PaymentStatus paymentStatus4 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType5 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment6 = new models.payment.Payment(uUID0, booking1, 100.0d, paymentMethod3, paymentStatus4, paymentType5);
        models.payment.Payment.PaymentType paymentType7 = payment6.getPaymentType();
        java.util.UUID uUID8 = payment6.getPaymentID();
        models.booking.Booking booking9 = payment6.getBooking();
        org.junit.Assert.assertTrue("'" + paymentStatus4 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus4.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType5 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType5.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType7 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType7.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(booking9);
    }

    @Test
    public void test168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test168");
        models.booking.Booking booking1 = null;
        models.booking.Booking booking3 = null;
        java.util.UUID uUID4 = null;
        models.booking.Booking booking5 = null;
        models.payment.PaymentMethod paymentMethod7 = null;
        models.payment.Payment.PaymentStatus paymentStatus8 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType9 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment10 = new models.payment.Payment(uUID4, booking5, 100.0d, paymentMethod7, paymentStatus8, paymentType9);
        models.payment.Payment.PaymentType paymentType11 = payment10.getPaymentType();
        java.util.UUID uUID12 = payment10.getBookingID();
        models.payment.Payment.PaymentType paymentType13 = models.payment.Payment.PaymentType.FINAL;
        payment10.setPaymentType(paymentType13);
        java.util.UUID uUID15 = payment10.getPaymentID();
        models.payment.PaymentMethod paymentMethod17 = models.payment.Payment.generateMethod("");
        payment10.setPaymentMethod(paymentMethod17);
        java.util.UUID uUID19 = null;
        models.booking.Booking booking20 = null;
        models.payment.PaymentMethod paymentMethod22 = null;
        models.payment.Payment.PaymentStatus paymentStatus23 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType24 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment25 = new models.payment.Payment(uUID19, booking20, 100.0d, paymentMethod22, paymentStatus23, paymentType24);
        models.payment.Payment.PaymentType paymentType26 = payment25.getPaymentType();
        models.payment.Payment.PaymentType paymentType27 = payment25.getPaymentType();
        models.payment.Payment payment28 = new models.payment.Payment((double) 10, booking3, paymentMethod17, paymentType27);
        java.util.UUID uUID29 = null;
        models.booking.Booking booking30 = null;
        models.payment.PaymentMethod paymentMethod32 = null;
        models.payment.Payment.PaymentStatus paymentStatus33 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType34 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment35 = new models.payment.Payment(uUID29, booking30, 100.0d, paymentMethod32, paymentStatus33, paymentType34);
        models.payment.Payment.PaymentType paymentType36 = payment35.getPaymentType();
        java.util.UUID uUID37 = payment35.getBookingID();
        models.payment.Payment.PaymentType paymentType38 = models.payment.Payment.PaymentType.FINAL;
        payment35.setPaymentType(paymentType38);
        models.payment.PaymentMethod paymentMethod40 = payment35.getMethod();
        models.payment.Payment.PaymentType paymentType41 = payment35.getPaymentType();
        models.payment.Payment payment42 = new models.payment.Payment((double) 0, booking1, paymentMethod17, paymentType41);
        java.util.UUID uUID43 = payment42.getBookingID();
        java.util.UUID uUID44 = payment42.getBookingID();
        models.payment.Payment.PaymentStatus paymentStatus45 = payment42.getStatus();
        models.payment.Payment.PaymentStatus paymentStatus46 = payment42.getStatus();
        java.util.UUID uUID47 = payment42.getBookingID();
        java.util.UUID uUID48 = payment42.getPaymentID();
        java.util.UUID uUID49 = null;
        models.booking.Booking booking50 = null;
        java.util.UUID uUID52 = null;
        models.booking.Booking booking53 = null;
        models.payment.PaymentMethod paymentMethod55 = null;
        models.payment.Payment.PaymentStatus paymentStatus56 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType57 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment58 = new models.payment.Payment(uUID52, booking53, 100.0d, paymentMethod55, paymentStatus56, paymentType57);
        models.payment.Payment.PaymentType paymentType59 = payment58.getPaymentType();
        java.util.UUID uUID60 = payment58.getBookingID();
        models.payment.Payment.PaymentType paymentType61 = models.payment.Payment.PaymentType.FINAL;
        payment58.setPaymentType(paymentType61);
        java.util.UUID uUID63 = payment58.getPaymentID();
        models.payment.PaymentMethod paymentMethod65 = models.payment.Payment.generateMethod("");
        payment58.setPaymentMethod(paymentMethod65);
        models.payment.Payment.PaymentStatus paymentStatus67 = models.payment.Payment.PaymentStatus.PENDING;
        models.payment.Payment.PaymentType paymentType68 = null;
        models.payment.Payment payment69 = new models.payment.Payment(uUID49, booking50, (double) (byte) 0, paymentMethod65, paymentStatus67, paymentType68);
        payment42.setPaymentMethod(paymentMethod65);
        org.junit.Assert.assertTrue("'" + paymentStatus8 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus8.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType9 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType9.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType11 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType11.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID12);
        org.junit.Assert.assertTrue("'" + paymentType13 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType13.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod17);
        org.junit.Assert.assertTrue("'" + paymentStatus23 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus23.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType24 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType24.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType26 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType26.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType27 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType27.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentStatus33 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus33.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType34 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType34.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType36 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType36.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID37);
        org.junit.Assert.assertTrue("'" + paymentType38 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType38.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(paymentMethod40);
        org.junit.Assert.assertTrue("'" + paymentType41 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType41.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID44);
        org.junit.Assert.assertTrue("'" + paymentStatus45 + "' != '" + models.payment.Payment.PaymentStatus.PENDING + "'", paymentStatus45.equals(models.payment.Payment.PaymentStatus.PENDING));
        org.junit.Assert.assertTrue("'" + paymentStatus46 + "' != '" + models.payment.Payment.PaymentStatus.PENDING + "'", paymentStatus46.equals(models.payment.Payment.PaymentStatus.PENDING));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(uUID48);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(uUID48.toString(), "cb4204a2-9167-420e-9669-ea3f44632a17");
        org.junit.Assert.assertTrue("'" + paymentStatus56 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus56.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType57 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType57.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType59 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType59.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID60);
        org.junit.Assert.assertTrue("'" + paymentType61 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType61.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod65);
        org.junit.Assert.assertTrue("'" + paymentStatus67 + "' != '" + models.payment.Payment.PaymentStatus.PENDING + "'", paymentStatus67.equals(models.payment.Payment.PaymentStatus.PENDING));
    }

    @Test
    public void test169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test169");
        java.util.UUID uUID0 = null;
        models.booking.Booking booking1 = null;
        models.payment.PaymentMethod paymentMethod3 = null;
        models.payment.Payment.PaymentStatus paymentStatus4 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType5 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment6 = new models.payment.Payment(uUID0, booking1, 100.0d, paymentMethod3, paymentStatus4, paymentType5);
        double double7 = payment6.getAmount();
        models.payment.Payment.PaymentStatus paymentStatus8 = payment6.getStatus();
        java.lang.Class<?> wildcardClass9 = paymentStatus8.getClass();
        org.junit.Assert.assertTrue("'" + paymentStatus4 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus4.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType5 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType5.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 100.0d + "'", double7 == 100.0d);
        org.junit.Assert.assertTrue("'" + paymentStatus8 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus8.equals(models.payment.Payment.PaymentStatus.FAILED));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test170");
        java.util.UUID uUID0 = null;
        models.booking.Booking booking1 = null;
        models.payment.PaymentMethod paymentMethod3 = null;
        models.payment.Payment.PaymentStatus paymentStatus4 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType5 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment6 = new models.payment.Payment(uUID0, booking1, 100.0d, paymentMethod3, paymentStatus4, paymentType5);
        double double7 = payment6.getAmount();
        models.booking.Booking booking8 = payment6.getBooking();
        models.booking.Booking booking9 = payment6.getBooking();
        java.util.UUID uUID10 = payment6.getBookingID();
        models.payment.PaymentMethod paymentMethod11 = payment6.getMethod();
        org.junit.Assert.assertTrue("'" + paymentStatus4 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus4.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType5 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType5.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 100.0d + "'", double7 == 100.0d);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(booking8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(booking9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(paymentMethod11);
    }

    @Test
    public void test171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test171");
        models.booking.Booking booking1 = null;
        models.booking.Booking booking3 = null;
        java.util.UUID uUID4 = null;
        models.booking.Booking booking5 = null;
        models.payment.PaymentMethod paymentMethod7 = null;
        models.payment.Payment.PaymentStatus paymentStatus8 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType9 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment10 = new models.payment.Payment(uUID4, booking5, 100.0d, paymentMethod7, paymentStatus8, paymentType9);
        models.payment.Payment.PaymentType paymentType11 = payment10.getPaymentType();
        java.util.UUID uUID12 = payment10.getBookingID();
        models.payment.Payment.PaymentType paymentType13 = models.payment.Payment.PaymentType.FINAL;
        payment10.setPaymentType(paymentType13);
        java.util.UUID uUID15 = payment10.getPaymentID();
        models.payment.PaymentMethod paymentMethod17 = models.payment.Payment.generateMethod("");
        payment10.setPaymentMethod(paymentMethod17);
        java.util.UUID uUID19 = null;
        models.booking.Booking booking20 = null;
        models.payment.PaymentMethod paymentMethod22 = null;
        models.payment.Payment.PaymentStatus paymentStatus23 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType24 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment25 = new models.payment.Payment(uUID19, booking20, 100.0d, paymentMethod22, paymentStatus23, paymentType24);
        models.payment.Payment.PaymentType paymentType26 = payment25.getPaymentType();
        models.payment.Payment.PaymentType paymentType27 = payment25.getPaymentType();
        models.payment.Payment payment28 = new models.payment.Payment((double) 10, booking3, paymentMethod17, paymentType27);
        models.payment.Payment.PaymentType paymentType29 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment30 = new models.payment.Payment((double) 0.0f, booking1, paymentMethod17, paymentType29);
        boolean boolean31 = payment30.processPayment();
        double double32 = payment30.getAmount();
        models.payment.Payment.PaymentStatus paymentStatus33 = payment30.getStatus();
        org.junit.Assert.assertTrue("'" + paymentStatus8 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus8.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType9 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType9.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType11 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType11.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID12);
        org.junit.Assert.assertTrue("'" + paymentType13 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType13.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod17);
        org.junit.Assert.assertTrue("'" + paymentStatus23 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus23.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType24 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType24.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType26 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType26.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType27 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType27.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType29 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType29.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
        org.junit.Assert.assertTrue("'" + paymentStatus33 + "' != '" + models.payment.Payment.PaymentStatus.PAID + "'", paymentStatus33.equals(models.payment.Payment.PaymentStatus.PAID));
    }

    @Test
    public void test172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test172");
        java.util.UUID uUID0 = null;
        models.booking.Booking booking1 = null;
        models.payment.PaymentMethod paymentMethod3 = null;
        models.payment.Payment.PaymentStatus paymentStatus4 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType5 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment6 = new models.payment.Payment(uUID0, booking1, 100.0d, paymentMethod3, paymentStatus4, paymentType5);
        models.payment.Payment.PaymentType paymentType7 = payment6.getPaymentType();
        java.util.UUID uUID8 = payment6.getBookingID();
        models.payment.Payment.PaymentType paymentType9 = models.payment.Payment.PaymentType.FINAL;
        payment6.setPaymentType(paymentType9);
        java.util.UUID uUID11 = payment6.getPaymentID();
        models.payment.PaymentMethod paymentMethod13 = models.payment.Payment.generateMethod("");
        payment6.setPaymentMethod(paymentMethod13);
        models.payment.Payment.PaymentStatus paymentStatus15 = payment6.getStatus();
        java.util.UUID uUID16 = null;
        models.booking.Booking booking17 = null;
        models.payment.PaymentMethod paymentMethod19 = null;
        models.payment.Payment.PaymentStatus paymentStatus20 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType21 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment22 = new models.payment.Payment(uUID16, booking17, 100.0d, paymentMethod19, paymentStatus20, paymentType21);
        java.util.UUID uUID23 = payment22.getPaymentID();
        models.payment.Payment.PaymentType paymentType24 = payment22.getPaymentType();
        payment6.setPaymentType(paymentType24);
        models.booking.Booking booking26 = payment6.getBooking();
        models.booking.Booking booking27 = payment6.getBooking();
        java.lang.Class<?> wildcardClass28 = payment6.getClass();
        org.junit.Assert.assertTrue("'" + paymentStatus4 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus4.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType5 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType5.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType7 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType7.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID8);
        org.junit.Assert.assertTrue("'" + paymentType9 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType9.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod13);
        org.junit.Assert.assertTrue("'" + paymentStatus15 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus15.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentStatus20 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus20.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType21 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType21.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID23);
        org.junit.Assert.assertTrue("'" + paymentType24 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType24.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(booking26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(booking27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass28);
    }

    @Test
    public void test173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test173");
        java.util.UUID uUID0 = null;
        models.booking.Booking booking1 = null;
        models.payment.PaymentMethod paymentMethod3 = null;
        models.payment.Payment.PaymentStatus paymentStatus4 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType5 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment6 = new models.payment.Payment(uUID0, booking1, 100.0d, paymentMethod3, paymentStatus4, paymentType5);
        models.payment.Payment.PaymentType paymentType7 = payment6.getPaymentType();
        java.util.UUID uUID8 = payment6.getBookingID();
        models.payment.Payment.PaymentType paymentType9 = models.payment.Payment.PaymentType.FINAL;
        payment6.setPaymentType(paymentType9);
        models.payment.PaymentMethod paymentMethod11 = payment6.getMethod();
        models.payment.Payment.PaymentType paymentType12 = payment6.getPaymentType();
        java.util.UUID uUID13 = null;
        models.booking.Booking booking14 = null;
        models.payment.PaymentMethod paymentMethod16 = null;
        models.payment.Payment.PaymentStatus paymentStatus17 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType18 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment19 = new models.payment.Payment(uUID13, booking14, 100.0d, paymentMethod16, paymentStatus17, paymentType18);
        java.util.UUID uUID20 = null;
        models.booking.Booking booking21 = null;
        java.util.UUID uUID23 = null;
        models.booking.Booking booking24 = null;
        models.payment.PaymentMethod paymentMethod26 = null;
        models.payment.Payment.PaymentStatus paymentStatus27 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType28 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment29 = new models.payment.Payment(uUID23, booking24, 100.0d, paymentMethod26, paymentStatus27, paymentType28);
        models.payment.Payment.PaymentType paymentType30 = payment29.getPaymentType();
        java.util.UUID uUID31 = payment29.getBookingID();
        models.payment.Payment.PaymentType paymentType32 = models.payment.Payment.PaymentType.FINAL;
        payment29.setPaymentType(paymentType32);
        java.util.UUID uUID34 = payment29.getPaymentID();
        models.payment.PaymentMethod paymentMethod36 = models.payment.Payment.generateMethod("");
        payment29.setPaymentMethod(paymentMethod36);
        models.payment.Payment.PaymentStatus paymentStatus38 = models.payment.Payment.PaymentStatus.PENDING;
        models.payment.Payment.PaymentType paymentType39 = null;
        models.payment.Payment payment40 = new models.payment.Payment(uUID20, booking21, (double) (byte) 0, paymentMethod36, paymentStatus38, paymentType39);
        payment19.setPaymentMethod(paymentMethod36);
        payment6.setPaymentMethod(paymentMethod36);
        models.booking.Booking booking43 = payment6.getBooking();
        models.payment.Payment.PaymentType paymentType44 = payment6.getPaymentType();
        java.util.UUID uUID45 = null;
        models.booking.Booking booking46 = null;
        models.payment.PaymentMethod paymentMethod48 = null;
        models.payment.Payment.PaymentStatus paymentStatus49 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType50 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment51 = new models.payment.Payment(uUID45, booking46, 100.0d, paymentMethod48, paymentStatus49, paymentType50);
        models.payment.Payment.PaymentType paymentType52 = models.payment.Payment.PaymentType.DEPOSIT;
        payment51.setPaymentType(paymentType52);
        payment6.setPaymentType(paymentType52);
        java.util.UUID uUID55 = null;
        models.booking.Booking booking56 = null;
        models.payment.PaymentMethod paymentMethod58 = null;
        models.payment.Payment.PaymentStatus paymentStatus59 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType60 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment61 = new models.payment.Payment(uUID55, booking56, 100.0d, paymentMethod58, paymentStatus59, paymentType60);
        models.payment.Payment.PaymentType paymentType62 = payment61.getPaymentType();
        java.util.UUID uUID63 = payment61.getBookingID();
        models.payment.Payment.PaymentType paymentType64 = models.payment.Payment.PaymentType.FINAL;
        payment61.setPaymentType(paymentType64);
        models.payment.PaymentMethod paymentMethod66 = payment61.getMethod();
        java.util.UUID uUID67 = null;
        models.booking.Booking booking68 = null;
        models.payment.PaymentMethod paymentMethod70 = null;
        models.payment.Payment.PaymentStatus paymentStatus71 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType72 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment73 = new models.payment.Payment(uUID67, booking68, 100.0d, paymentMethod70, paymentStatus71, paymentType72);
        models.payment.Payment.PaymentType paymentType74 = payment73.getPaymentType();
        java.util.UUID uUID75 = payment73.getBookingID();
        models.payment.Payment.PaymentType paymentType76 = models.payment.Payment.PaymentType.FINAL;
        payment73.setPaymentType(paymentType76);
        payment61.setPaymentType(paymentType76);
        payment6.setPaymentType(paymentType76);
        double double80 = payment6.getAmount();
        org.junit.Assert.assertTrue("'" + paymentStatus4 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus4.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType5 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType5.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType7 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType7.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID8);
        org.junit.Assert.assertTrue("'" + paymentType9 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType9.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(paymentMethod11);
        org.junit.Assert.assertTrue("'" + paymentType12 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType12.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentStatus17 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus17.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType18 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType18.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentStatus27 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus27.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType28 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType28.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType30 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType30.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID31);
        org.junit.Assert.assertTrue("'" + paymentType32 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType32.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod36);
        org.junit.Assert.assertTrue("'" + paymentStatus38 + "' != '" + models.payment.Payment.PaymentStatus.PENDING + "'", paymentStatus38.equals(models.payment.Payment.PaymentStatus.PENDING));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(booking43);
        org.junit.Assert.assertTrue("'" + paymentType44 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType44.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentStatus49 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus49.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType50 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType50.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType52 + "' != '" + models.payment.Payment.PaymentType.DEPOSIT + "'", paymentType52.equals(models.payment.Payment.PaymentType.DEPOSIT));
        org.junit.Assert.assertTrue("'" + paymentStatus59 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus59.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType60 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType60.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType62 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType62.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID63);
        org.junit.Assert.assertTrue("'" + paymentType64 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType64.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(paymentMethod66);
        org.junit.Assert.assertTrue("'" + paymentStatus71 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus71.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType72 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType72.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType74 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType74.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID75);
        org.junit.Assert.assertTrue("'" + paymentType76 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType76.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 100.0d + "'", double80 == 100.0d);
    }

    @Test
    public void test174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test174");
        models.booking.Booking booking1 = null;
        models.payment.PaymentMethod paymentMethod3 = models.payment.Payment.generateMethod("");
        java.util.UUID uUID4 = null;
        models.booking.Booking booking5 = null;
        models.payment.PaymentMethod paymentMethod7 = null;
        models.payment.Payment.PaymentStatus paymentStatus8 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType9 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment10 = new models.payment.Payment(uUID4, booking5, 100.0d, paymentMethod7, paymentStatus8, paymentType9);
        models.payment.Payment.PaymentType paymentType11 = payment10.getPaymentType();
        models.payment.Payment.PaymentType paymentType12 = payment10.getPaymentType();
        models.payment.Payment.PaymentType paymentType13 = payment10.getPaymentType();
        models.payment.Payment payment14 = new models.payment.Payment((double) (byte) 10, booking1, paymentMethod3, paymentType13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod3);
        org.junit.Assert.assertTrue("'" + paymentStatus8 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus8.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType9 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType9.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType11 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType11.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType12 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType12.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType13 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType13.equals(models.payment.Payment.PaymentType.FINAL));
    }

    @Test
    public void test175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test175");
        models.booking.Booking booking1 = null;
        java.util.UUID uUID2 = null;
        models.booking.Booking booking3 = null;
        models.payment.PaymentMethod paymentMethod5 = null;
        models.payment.Payment.PaymentStatus paymentStatus6 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType7 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment8 = new models.payment.Payment(uUID2, booking3, 100.0d, paymentMethod5, paymentStatus6, paymentType7);
        models.payment.Payment.PaymentType paymentType9 = payment8.getPaymentType();
        java.util.UUID uUID10 = payment8.getBookingID();
        models.payment.Payment.PaymentType paymentType11 = models.payment.Payment.PaymentType.FINAL;
        payment8.setPaymentType(paymentType11);
        java.util.UUID uUID13 = payment8.getPaymentID();
        double double14 = payment8.getAmount();
        java.util.UUID uUID15 = null;
        models.booking.Booking booking16 = null;
        models.payment.PaymentMethod paymentMethod18 = null;
        models.payment.Payment.PaymentStatus paymentStatus19 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType20 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment21 = new models.payment.Payment(uUID15, booking16, 100.0d, paymentMethod18, paymentStatus19, paymentType20);
        payment8.setPaymentType(paymentType20);
        models.booking.Booking booking24 = null;
        models.booking.Booking booking26 = null;
        java.util.UUID uUID27 = null;
        models.booking.Booking booking28 = null;
        models.payment.PaymentMethod paymentMethod30 = null;
        models.payment.Payment.PaymentStatus paymentStatus31 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType32 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment33 = new models.payment.Payment(uUID27, booking28, 100.0d, paymentMethod30, paymentStatus31, paymentType32);
        models.payment.Payment.PaymentType paymentType34 = payment33.getPaymentType();
        java.util.UUID uUID35 = payment33.getBookingID();
        models.payment.Payment.PaymentType paymentType36 = models.payment.Payment.PaymentType.FINAL;
        payment33.setPaymentType(paymentType36);
        java.util.UUID uUID38 = payment33.getPaymentID();
        models.payment.PaymentMethod paymentMethod40 = models.payment.Payment.generateMethod("");
        payment33.setPaymentMethod(paymentMethod40);
        java.util.UUID uUID42 = null;
        models.booking.Booking booking43 = null;
        models.payment.PaymentMethod paymentMethod45 = null;
        models.payment.Payment.PaymentStatus paymentStatus46 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType47 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment48 = new models.payment.Payment(uUID42, booking43, 100.0d, paymentMethod45, paymentStatus46, paymentType47);
        models.payment.Payment.PaymentType paymentType49 = payment48.getPaymentType();
        models.payment.Payment.PaymentType paymentType50 = payment48.getPaymentType();
        models.payment.Payment payment51 = new models.payment.Payment((double) 10, booking26, paymentMethod40, paymentType50);
        java.util.UUID uUID52 = null;
        models.booking.Booking booking53 = null;
        models.payment.PaymentMethod paymentMethod55 = null;
        models.payment.Payment.PaymentStatus paymentStatus56 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType57 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment58 = new models.payment.Payment(uUID52, booking53, 100.0d, paymentMethod55, paymentStatus56, paymentType57);
        models.payment.Payment.PaymentType paymentType59 = payment58.getPaymentType();
        java.util.UUID uUID60 = payment58.getBookingID();
        models.payment.Payment.PaymentType paymentType61 = models.payment.Payment.PaymentType.FINAL;
        payment58.setPaymentType(paymentType61);
        models.payment.PaymentMethod paymentMethod63 = payment58.getMethod();
        models.payment.Payment.PaymentType paymentType64 = payment58.getPaymentType();
        models.payment.Payment payment65 = new models.payment.Payment((double) 0, booking24, paymentMethod40, paymentType64);
        payment8.setPaymentMethod(paymentMethod40);
        java.util.UUID uUID67 = null;
        models.booking.Booking booking68 = null;
        models.payment.PaymentMethod paymentMethod70 = null;
        models.payment.Payment.PaymentStatus paymentStatus71 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType72 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment73 = new models.payment.Payment(uUID67, booking68, 100.0d, paymentMethod70, paymentStatus71, paymentType72);
        models.payment.Payment.PaymentType paymentType74 = models.payment.Payment.PaymentType.DEPOSIT;
        payment73.setPaymentType(paymentType74);
        models.payment.Payment.PaymentType paymentType76 = payment73.getPaymentType();
        models.payment.Payment payment77 = new models.payment.Payment((double) '4', booking1, paymentMethod40, paymentType76);
        java.lang.Class<?> wildcardClass78 = paymentType76.getClass();
        org.junit.Assert.assertTrue("'" + paymentStatus6 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus6.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType7 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType7.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType9 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType9.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID10);
        org.junit.Assert.assertTrue("'" + paymentType11 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType11.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 100.0d + "'", double14 == 100.0d);
        org.junit.Assert.assertTrue("'" + paymentStatus19 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus19.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType20 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType20.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentStatus31 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus31.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType32 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType32.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType34 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType34.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID35);
        org.junit.Assert.assertTrue("'" + paymentType36 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType36.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod40);
        org.junit.Assert.assertTrue("'" + paymentStatus46 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus46.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType47 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType47.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType49 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType49.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType50 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType50.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentStatus56 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus56.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType57 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType57.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType59 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType59.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID60);
        org.junit.Assert.assertTrue("'" + paymentType61 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType61.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(paymentMethod63);
        org.junit.Assert.assertTrue("'" + paymentType64 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType64.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentStatus71 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus71.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType72 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType72.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType74 + "' != '" + models.payment.Payment.PaymentType.DEPOSIT + "'", paymentType74.equals(models.payment.Payment.PaymentType.DEPOSIT));
        org.junit.Assert.assertTrue("'" + paymentType76 + "' != '" + models.payment.Payment.PaymentType.DEPOSIT + "'", paymentType76.equals(models.payment.Payment.PaymentType.DEPOSIT));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass78);
    }

    @Test
    public void test176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test176");
        java.util.UUID uUID0 = null;
        models.booking.Booking booking1 = null;
        java.util.UUID uUID3 = null;
        models.booking.Booking booking4 = null;
        java.util.UUID uUID6 = null;
        models.booking.Booking booking7 = null;
        models.payment.PaymentMethod paymentMethod9 = null;
        models.payment.Payment.PaymentStatus paymentStatus10 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType11 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment12 = new models.payment.Payment(uUID6, booking7, 100.0d, paymentMethod9, paymentStatus10, paymentType11);
        models.payment.Payment.PaymentType paymentType13 = payment12.getPaymentType();
        java.util.UUID uUID14 = payment12.getBookingID();
        models.payment.Payment.PaymentType paymentType15 = models.payment.Payment.PaymentType.FINAL;
        payment12.setPaymentType(paymentType15);
        java.util.UUID uUID17 = payment12.getPaymentID();
        models.payment.PaymentMethod paymentMethod19 = models.payment.Payment.generateMethod("");
        payment12.setPaymentMethod(paymentMethod19);
        models.payment.Payment.PaymentStatus paymentStatus21 = models.payment.Payment.PaymentStatus.PENDING;
        models.payment.Payment.PaymentType paymentType22 = null;
        models.payment.Payment payment23 = new models.payment.Payment(uUID3, booking4, (double) (byte) 0, paymentMethod19, paymentStatus21, paymentType22);
        models.payment.Payment.PaymentStatus paymentStatus24 = models.payment.Payment.PaymentStatus.PENDING;
        models.payment.Payment.PaymentType paymentType25 = models.payment.Payment.PaymentType.DEPOSIT;
        models.payment.Payment payment26 = new models.payment.Payment(uUID0, booking1, (double) (byte) 100, paymentMethod19, paymentStatus24, paymentType25);
        models.booking.Booking booking27 = payment26.getBooking();
        double double28 = payment26.getAmount();
        double double29 = payment26.getAmount();
        models.payment.Payment.PaymentType paymentType30 = payment26.getPaymentType();
        models.payment.PaymentMethod paymentMethod31 = payment26.getMethod();
        java.util.UUID uUID32 = payment26.getBookingID();
        org.junit.Assert.assertTrue("'" + paymentStatus10 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus10.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType11 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType11.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType13 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType13.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID14);
        org.junit.Assert.assertTrue("'" + paymentType15 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType15.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod19);
        org.junit.Assert.assertTrue("'" + paymentStatus21 + "' != '" + models.payment.Payment.PaymentStatus.PENDING + "'", paymentStatus21.equals(models.payment.Payment.PaymentStatus.PENDING));
        org.junit.Assert.assertTrue("'" + paymentStatus24 + "' != '" + models.payment.Payment.PaymentStatus.PENDING + "'", paymentStatus24.equals(models.payment.Payment.PaymentStatus.PENDING));
        org.junit.Assert.assertTrue("'" + paymentType25 + "' != '" + models.payment.Payment.PaymentType.DEPOSIT + "'", paymentType25.equals(models.payment.Payment.PaymentType.DEPOSIT));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(booking27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 100.0d + "'", double28 == 100.0d);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 100.0d + "'", double29 == 100.0d);
        org.junit.Assert.assertTrue("'" + paymentType30 + "' != '" + models.payment.Payment.PaymentType.DEPOSIT + "'", paymentType30.equals(models.payment.Payment.PaymentType.DEPOSIT));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID32);
    }

    @Test
    public void test177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test177");
        java.util.UUID uUID0 = null;
        models.booking.Booking booking1 = null;
        models.payment.PaymentMethod paymentMethod3 = null;
        models.payment.Payment.PaymentStatus paymentStatus4 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType5 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment6 = new models.payment.Payment(uUID0, booking1, 100.0d, paymentMethod3, paymentStatus4, paymentType5);
        models.payment.Payment.PaymentType paymentType7 = payment6.getPaymentType();
        java.util.UUID uUID8 = payment6.getBookingID();
        models.payment.PaymentMethod paymentMethod9 = payment6.getMethod();
        java.util.UUID uUID10 = null;
        models.booking.Booking booking11 = null;
        java.util.UUID uUID13 = null;
        models.booking.Booking booking14 = null;
        models.payment.PaymentMethod paymentMethod16 = null;
        models.payment.Payment.PaymentStatus paymentStatus17 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType18 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment19 = new models.payment.Payment(uUID13, booking14, 100.0d, paymentMethod16, paymentStatus17, paymentType18);
        models.payment.Payment.PaymentType paymentType20 = payment19.getPaymentType();
        java.util.UUID uUID21 = payment19.getBookingID();
        models.payment.Payment.PaymentType paymentType22 = models.payment.Payment.PaymentType.FINAL;
        payment19.setPaymentType(paymentType22);
        java.util.UUID uUID24 = payment19.getPaymentID();
        models.payment.PaymentMethod paymentMethod26 = models.payment.Payment.generateMethod("");
        payment19.setPaymentMethod(paymentMethod26);
        models.payment.Payment.PaymentStatus paymentStatus28 = models.payment.Payment.PaymentStatus.PENDING;
        models.payment.Payment.PaymentType paymentType29 = null;
        models.payment.Payment payment30 = new models.payment.Payment(uUID10, booking11, (double) (byte) 0, paymentMethod26, paymentStatus28, paymentType29);
        payment6.setPaymentMethod(paymentMethod26);
        models.payment.Payment.PaymentType paymentType32 = payment6.getPaymentType();
        java.lang.Class<?> wildcardClass33 = paymentType32.getClass();
        org.junit.Assert.assertTrue("'" + paymentStatus4 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus4.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType5 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType5.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType7 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType7.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(paymentMethod9);
        org.junit.Assert.assertTrue("'" + paymentStatus17 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus17.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType18 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType18.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType20 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType20.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID21);
        org.junit.Assert.assertTrue("'" + paymentType22 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType22.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod26);
        org.junit.Assert.assertTrue("'" + paymentStatus28 + "' != '" + models.payment.Payment.PaymentStatus.PENDING + "'", paymentStatus28.equals(models.payment.Payment.PaymentStatus.PENDING));
        org.junit.Assert.assertTrue("'" + paymentType32 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType32.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass33);
    }

    @Test
    public void test178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test178");
        java.util.UUID uUID0 = null;
        models.booking.Booking booking1 = null;
        models.payment.PaymentMethod paymentMethod3 = null;
        models.payment.Payment.PaymentStatus paymentStatus4 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType5 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment6 = new models.payment.Payment(uUID0, booking1, 100.0d, paymentMethod3, paymentStatus4, paymentType5);
        models.payment.Payment.PaymentType paymentType7 = payment6.getPaymentType();
        java.util.UUID uUID8 = payment6.getBookingID();
        models.payment.Payment.PaymentType paymentType9 = models.payment.Payment.PaymentType.FINAL;
        payment6.setPaymentType(paymentType9);
        java.util.UUID uUID11 = payment6.getPaymentID();
        double double12 = payment6.getAmount();
        java.util.UUID uUID13 = null;
        models.booking.Booking booking14 = null;
        models.payment.PaymentMethod paymentMethod16 = null;
        models.payment.Payment.PaymentStatus paymentStatus17 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType18 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment19 = new models.payment.Payment(uUID13, booking14, 100.0d, paymentMethod16, paymentStatus17, paymentType18);
        payment6.setPaymentType(paymentType18);
        models.payment.Payment.PaymentStatus paymentStatus21 = payment6.getStatus();
        double double22 = payment6.getAmount();
        models.payment.Payment.PaymentStatus paymentStatus23 = payment6.getStatus();
        org.junit.Assert.assertTrue("'" + paymentStatus4 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus4.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType5 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType5.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType7 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType7.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID8);
        org.junit.Assert.assertTrue("'" + paymentType9 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType9.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 100.0d + "'", double12 == 100.0d);
        org.junit.Assert.assertTrue("'" + paymentStatus17 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus17.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType18 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType18.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentStatus21 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus21.equals(models.payment.Payment.PaymentStatus.FAILED));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 100.0d + "'", double22 == 100.0d);
        org.junit.Assert.assertTrue("'" + paymentStatus23 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus23.equals(models.payment.Payment.PaymentStatus.FAILED));
    }

    @Test
    public void test179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test179");
        java.util.UUID uUID0 = null;
        models.booking.Booking booking1 = null;
        models.payment.PaymentMethod paymentMethod3 = null;
        models.payment.Payment.PaymentStatus paymentStatus4 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType5 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment6 = new models.payment.Payment(uUID0, booking1, 100.0d, paymentMethod3, paymentStatus4, paymentType5);
        models.payment.Payment.PaymentType paymentType7 = payment6.getPaymentType();
        java.util.UUID uUID8 = payment6.getBookingID();
        models.payment.Payment.PaymentType paymentType9 = models.payment.Payment.PaymentType.FINAL;
        payment6.setPaymentType(paymentType9);
        models.payment.PaymentMethod paymentMethod11 = payment6.getMethod();
        models.payment.Payment.PaymentType paymentType12 = payment6.getPaymentType();
        models.payment.PaymentMethod paymentMethod13 = payment6.getMethod();
        java.util.UUID uUID14 = null;
        models.booking.Booking booking15 = null;
        java.util.UUID uUID17 = null;
        models.booking.Booking booking18 = null;
        models.payment.PaymentMethod paymentMethod20 = null;
        models.payment.Payment.PaymentStatus paymentStatus21 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType22 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment23 = new models.payment.Payment(uUID17, booking18, 100.0d, paymentMethod20, paymentStatus21, paymentType22);
        java.util.UUID uUID24 = null;
        models.booking.Booking booking25 = null;
        java.util.UUID uUID27 = null;
        models.booking.Booking booking28 = null;
        models.payment.PaymentMethod paymentMethod30 = null;
        models.payment.Payment.PaymentStatus paymentStatus31 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType32 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment33 = new models.payment.Payment(uUID27, booking28, 100.0d, paymentMethod30, paymentStatus31, paymentType32);
        models.payment.Payment.PaymentType paymentType34 = payment33.getPaymentType();
        java.util.UUID uUID35 = payment33.getBookingID();
        models.payment.Payment.PaymentType paymentType36 = models.payment.Payment.PaymentType.FINAL;
        payment33.setPaymentType(paymentType36);
        java.util.UUID uUID38 = payment33.getPaymentID();
        models.payment.PaymentMethod paymentMethod40 = models.payment.Payment.generateMethod("");
        payment33.setPaymentMethod(paymentMethod40);
        models.payment.Payment.PaymentStatus paymentStatus42 = models.payment.Payment.PaymentStatus.PENDING;
        models.payment.Payment.PaymentType paymentType43 = null;
        models.payment.Payment payment44 = new models.payment.Payment(uUID24, booking25, (double) (byte) 0, paymentMethod40, paymentStatus42, paymentType43);
        payment23.setPaymentMethod(paymentMethod40);
        java.util.UUID uUID46 = null;
        models.booking.Booking booking47 = null;
        java.util.UUID uUID49 = null;
        models.booking.Booking booking50 = null;
        models.payment.PaymentMethod paymentMethod52 = null;
        models.payment.Payment.PaymentStatus paymentStatus53 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType54 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment55 = new models.payment.Payment(uUID49, booking50, 100.0d, paymentMethod52, paymentStatus53, paymentType54);
        models.payment.Payment.PaymentType paymentType56 = payment55.getPaymentType();
        java.util.UUID uUID57 = payment55.getBookingID();
        models.payment.Payment.PaymentType paymentType58 = models.payment.Payment.PaymentType.FINAL;
        payment55.setPaymentType(paymentType58);
        java.util.UUID uUID60 = payment55.getPaymentID();
        models.payment.PaymentMethod paymentMethod62 = models.payment.Payment.generateMethod("");
        payment55.setPaymentMethod(paymentMethod62);
        models.payment.Payment.PaymentStatus paymentStatus64 = models.payment.Payment.PaymentStatus.PENDING;
        models.payment.Payment.PaymentType paymentType65 = null;
        models.payment.Payment payment66 = new models.payment.Payment(uUID46, booking47, (double) (byte) 0, paymentMethod62, paymentStatus64, paymentType65);
        models.payment.Payment.PaymentStatus paymentStatus67 = payment66.getStatus();
        java.util.UUID uUID68 = null;
        models.booking.Booking booking69 = null;
        models.payment.PaymentMethod paymentMethod71 = null;
        models.payment.Payment.PaymentStatus paymentStatus72 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType73 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment74 = new models.payment.Payment(uUID68, booking69, 100.0d, paymentMethod71, paymentStatus72, paymentType73);
        models.payment.Payment.PaymentType paymentType75 = payment74.getPaymentType();
        java.util.UUID uUID76 = payment74.getBookingID();
        models.payment.Payment.PaymentType paymentType77 = models.payment.Payment.PaymentType.FINAL;
        payment74.setPaymentType(paymentType77);
        models.payment.Payment payment79 = new models.payment.Payment(uUID14, booking15, (double) 'a', paymentMethod40, paymentStatus67, paymentType77);
        java.util.UUID uUID80 = payment79.getBookingID();
        models.payment.Payment.PaymentType paymentType81 = payment79.getPaymentType();
        payment6.setPaymentType(paymentType81);
        org.junit.Assert.assertTrue("'" + paymentStatus4 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus4.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType5 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType5.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType7 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType7.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID8);
        org.junit.Assert.assertTrue("'" + paymentType9 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType9.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(paymentMethod11);
        org.junit.Assert.assertTrue("'" + paymentType12 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType12.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(paymentMethod13);
        org.junit.Assert.assertTrue("'" + paymentStatus21 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus21.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType22 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType22.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentStatus31 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus31.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType32 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType32.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType34 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType34.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID35);
        org.junit.Assert.assertTrue("'" + paymentType36 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType36.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod40);
        org.junit.Assert.assertTrue("'" + paymentStatus42 + "' != '" + models.payment.Payment.PaymentStatus.PENDING + "'", paymentStatus42.equals(models.payment.Payment.PaymentStatus.PENDING));
        org.junit.Assert.assertTrue("'" + paymentStatus53 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus53.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType54 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType54.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType56 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType56.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID57);
        org.junit.Assert.assertTrue("'" + paymentType58 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType58.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod62);
        org.junit.Assert.assertTrue("'" + paymentStatus64 + "' != '" + models.payment.Payment.PaymentStatus.PENDING + "'", paymentStatus64.equals(models.payment.Payment.PaymentStatus.PENDING));
        org.junit.Assert.assertTrue("'" + paymentStatus67 + "' != '" + models.payment.Payment.PaymentStatus.PENDING + "'", paymentStatus67.equals(models.payment.Payment.PaymentStatus.PENDING));
        org.junit.Assert.assertTrue("'" + paymentStatus72 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus72.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType73 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType73.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType75 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType75.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID76);
        org.junit.Assert.assertTrue("'" + paymentType77 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType77.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID80);
        org.junit.Assert.assertTrue("'" + paymentType81 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType81.equals(models.payment.Payment.PaymentType.FINAL));
    }

    @Test
    public void test180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test180");
        java.util.UUID uUID0 = null;
        models.booking.Booking booking1 = null;
        java.util.UUID uUID3 = null;
        models.booking.Booking booking4 = null;
        models.payment.PaymentMethod paymentMethod6 = null;
        models.payment.Payment.PaymentStatus paymentStatus7 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType8 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment9 = new models.payment.Payment(uUID3, booking4, 100.0d, paymentMethod6, paymentStatus7, paymentType8);
        models.payment.Payment.PaymentType paymentType10 = payment9.getPaymentType();
        java.util.UUID uUID11 = payment9.getBookingID();
        models.payment.Payment.PaymentType paymentType12 = models.payment.Payment.PaymentType.FINAL;
        payment9.setPaymentType(paymentType12);
        java.util.UUID uUID14 = payment9.getPaymentID();
        models.payment.PaymentMethod paymentMethod16 = models.payment.Payment.generateMethod("");
        payment9.setPaymentMethod(paymentMethod16);
        models.payment.Payment.PaymentStatus paymentStatus18 = models.payment.Payment.PaymentStatus.PENDING;
        models.payment.Payment.PaymentType paymentType19 = null;
        models.payment.Payment payment20 = new models.payment.Payment(uUID0, booking1, (double) (byte) 0, paymentMethod16, paymentStatus18, paymentType19);
        models.payment.Payment.PaymentStatus paymentStatus21 = payment20.getStatus();
        boolean boolean22 = payment20.processPayment();
        models.booking.Booking booking23 = payment20.getBooking();
        org.junit.Assert.assertTrue("'" + paymentStatus7 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus7.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType8 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType8.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType10 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType10.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID11);
        org.junit.Assert.assertTrue("'" + paymentType12 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType12.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod16);
        org.junit.Assert.assertTrue("'" + paymentStatus18 + "' != '" + models.payment.Payment.PaymentStatus.PENDING + "'", paymentStatus18.equals(models.payment.Payment.PaymentStatus.PENDING));
        org.junit.Assert.assertTrue("'" + paymentStatus21 + "' != '" + models.payment.Payment.PaymentStatus.PENDING + "'", paymentStatus21.equals(models.payment.Payment.PaymentStatus.PENDING));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(booking23);
    }

    @Test
    public void test181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test181");
        java.util.UUID uUID0 = null;
        models.booking.Booking booking1 = null;
        models.payment.PaymentMethod paymentMethod3 = null;
        models.payment.Payment.PaymentStatus paymentStatus4 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType5 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment6 = new models.payment.Payment(uUID0, booking1, 100.0d, paymentMethod3, paymentStatus4, paymentType5);
        models.payment.Payment.PaymentType paymentType7 = payment6.getPaymentType();
        java.util.UUID uUID8 = payment6.getBookingID();
        java.util.UUID uUID9 = payment6.getPaymentID();
        double double10 = payment6.getAmount();
        models.booking.Booking booking11 = payment6.getBooking();
        org.junit.Assert.assertTrue("'" + paymentStatus4 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus4.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType5 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType5.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType7 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType7.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 100.0d + "'", double10 == 100.0d);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(booking11);
    }

    @Test
    public void test182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test182");
        java.util.UUID uUID0 = null;
        models.booking.Booking booking1 = null;
        models.payment.PaymentMethod paymentMethod3 = null;
        models.payment.Payment.PaymentStatus paymentStatus4 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType5 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment6 = new models.payment.Payment(uUID0, booking1, 100.0d, paymentMethod3, paymentStatus4, paymentType5);
        models.payment.Payment.PaymentType paymentType7 = payment6.getPaymentType();
        java.util.UUID uUID8 = payment6.getBookingID();
        models.payment.Payment.PaymentType paymentType9 = models.payment.Payment.PaymentType.FINAL;
        payment6.setPaymentType(paymentType9);
        java.util.UUID uUID11 = payment6.getPaymentID();
        double double12 = payment6.getAmount();
        java.util.UUID uUID13 = null;
        models.booking.Booking booking14 = null;
        models.payment.PaymentMethod paymentMethod16 = null;
        models.payment.Payment.PaymentStatus paymentStatus17 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType18 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment19 = new models.payment.Payment(uUID13, booking14, 100.0d, paymentMethod16, paymentStatus17, paymentType18);
        payment6.setPaymentType(paymentType18);
        models.payment.Payment.PaymentStatus paymentStatus21 = payment6.getStatus();
        java.lang.Class<?> wildcardClass22 = payment6.getClass();
        org.junit.Assert.assertTrue("'" + paymentStatus4 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus4.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType5 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType5.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType7 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType7.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID8);
        org.junit.Assert.assertTrue("'" + paymentType9 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType9.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 100.0d + "'", double12 == 100.0d);
        org.junit.Assert.assertTrue("'" + paymentStatus17 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus17.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType18 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType18.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentStatus21 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus21.equals(models.payment.Payment.PaymentStatus.FAILED));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass22);
    }

    @Test
    public void test183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test183");
        java.util.UUID uUID0 = null;
        models.booking.Booking booking1 = null;
        models.payment.PaymentMethod paymentMethod3 = null;
        models.payment.Payment.PaymentStatus paymentStatus4 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType5 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment6 = new models.payment.Payment(uUID0, booking1, 100.0d, paymentMethod3, paymentStatus4, paymentType5);
        java.util.UUID uUID7 = payment6.getPaymentID();
        models.payment.Payment.PaymentType paymentType8 = payment6.getPaymentType();
        java.util.UUID uUID9 = payment6.getPaymentID();
        org.junit.Assert.assertTrue("'" + paymentStatus4 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus4.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType5 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType5.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID7);
        org.junit.Assert.assertTrue("'" + paymentType8 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType8.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID9);
    }

    @Test
    public void test184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test184");
        java.util.UUID uUID0 = null;
        models.booking.Booking booking1 = null;
        models.payment.PaymentMethod paymentMethod3 = null;
        models.payment.Payment.PaymentStatus paymentStatus4 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType5 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment6 = new models.payment.Payment(uUID0, booking1, 100.0d, paymentMethod3, paymentStatus4, paymentType5);
        models.payment.Payment.PaymentType paymentType7 = payment6.getPaymentType();
        java.util.UUID uUID8 = payment6.getBookingID();
        models.payment.Payment.PaymentType paymentType9 = models.payment.Payment.PaymentType.FINAL;
        payment6.setPaymentType(paymentType9);
        models.payment.PaymentMethod paymentMethod11 = payment6.getMethod();
        models.payment.Payment.PaymentType paymentType12 = payment6.getPaymentType();
        java.util.UUID uUID13 = null;
        models.booking.Booking booking14 = null;
        models.payment.PaymentMethod paymentMethod16 = null;
        models.payment.Payment.PaymentStatus paymentStatus17 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType18 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment19 = new models.payment.Payment(uUID13, booking14, 100.0d, paymentMethod16, paymentStatus17, paymentType18);
        java.util.UUID uUID20 = null;
        models.booking.Booking booking21 = null;
        java.util.UUID uUID23 = null;
        models.booking.Booking booking24 = null;
        models.payment.PaymentMethod paymentMethod26 = null;
        models.payment.Payment.PaymentStatus paymentStatus27 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType28 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment29 = new models.payment.Payment(uUID23, booking24, 100.0d, paymentMethod26, paymentStatus27, paymentType28);
        models.payment.Payment.PaymentType paymentType30 = payment29.getPaymentType();
        java.util.UUID uUID31 = payment29.getBookingID();
        models.payment.Payment.PaymentType paymentType32 = models.payment.Payment.PaymentType.FINAL;
        payment29.setPaymentType(paymentType32);
        java.util.UUID uUID34 = payment29.getPaymentID();
        models.payment.PaymentMethod paymentMethod36 = models.payment.Payment.generateMethod("");
        payment29.setPaymentMethod(paymentMethod36);
        models.payment.Payment.PaymentStatus paymentStatus38 = models.payment.Payment.PaymentStatus.PENDING;
        models.payment.Payment.PaymentType paymentType39 = null;
        models.payment.Payment payment40 = new models.payment.Payment(uUID20, booking21, (double) (byte) 0, paymentMethod36, paymentStatus38, paymentType39);
        payment19.setPaymentMethod(paymentMethod36);
        payment6.setPaymentMethod(paymentMethod36);
        models.booking.Booking booking43 = payment6.getBooking();
        models.payment.Payment.PaymentType paymentType44 = payment6.getPaymentType();
        java.util.UUID uUID45 = null;
        models.booking.Booking booking46 = null;
        models.payment.PaymentMethod paymentMethod48 = null;
        models.payment.Payment.PaymentStatus paymentStatus49 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType50 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment51 = new models.payment.Payment(uUID45, booking46, 100.0d, paymentMethod48, paymentStatus49, paymentType50);
        models.payment.Payment.PaymentType paymentType52 = models.payment.Payment.PaymentType.DEPOSIT;
        payment51.setPaymentType(paymentType52);
        payment6.setPaymentType(paymentType52);
        models.payment.Payment.PaymentType paymentType55 = payment6.getPaymentType();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean56 = payment6.processPayment();
            org.junit.Assert.fail("Expected exception of type models.ParkingSystemException; message: Cannot process payment of a payment that is not pending.");
        } catch (models.ParkingSystemException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + paymentStatus4 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus4.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType5 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType5.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType7 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType7.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID8);
        org.junit.Assert.assertTrue("'" + paymentType9 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType9.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(paymentMethod11);
        org.junit.Assert.assertTrue("'" + paymentType12 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType12.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentStatus17 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus17.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType18 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType18.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentStatus27 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus27.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType28 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType28.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType30 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType30.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID31);
        org.junit.Assert.assertTrue("'" + paymentType32 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType32.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod36);
        org.junit.Assert.assertTrue("'" + paymentStatus38 + "' != '" + models.payment.Payment.PaymentStatus.PENDING + "'", paymentStatus38.equals(models.payment.Payment.PaymentStatus.PENDING));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(booking43);
        org.junit.Assert.assertTrue("'" + paymentType44 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType44.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentStatus49 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus49.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType50 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType50.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType52 + "' != '" + models.payment.Payment.PaymentType.DEPOSIT + "'", paymentType52.equals(models.payment.Payment.PaymentType.DEPOSIT));
        org.junit.Assert.assertTrue("'" + paymentType55 + "' != '" + models.payment.Payment.PaymentType.DEPOSIT + "'", paymentType55.equals(models.payment.Payment.PaymentType.DEPOSIT));
    }

    @Test
    public void test185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test185");
        models.booking.Booking booking1 = null;
        models.booking.Booking booking3 = null;
        java.util.UUID uUID4 = null;
        models.booking.Booking booking5 = null;
        models.payment.PaymentMethod paymentMethod7 = null;
        models.payment.Payment.PaymentStatus paymentStatus8 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType9 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment10 = new models.payment.Payment(uUID4, booking5, 100.0d, paymentMethod7, paymentStatus8, paymentType9);
        models.payment.Payment.PaymentType paymentType11 = payment10.getPaymentType();
        java.util.UUID uUID12 = payment10.getBookingID();
        models.payment.Payment.PaymentType paymentType13 = models.payment.Payment.PaymentType.FINAL;
        payment10.setPaymentType(paymentType13);
        java.util.UUID uUID15 = payment10.getPaymentID();
        models.payment.PaymentMethod paymentMethod17 = models.payment.Payment.generateMethod("");
        payment10.setPaymentMethod(paymentMethod17);
        java.util.UUID uUID19 = null;
        models.booking.Booking booking20 = null;
        models.payment.PaymentMethod paymentMethod22 = null;
        models.payment.Payment.PaymentStatus paymentStatus23 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType24 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment25 = new models.payment.Payment(uUID19, booking20, 100.0d, paymentMethod22, paymentStatus23, paymentType24);
        models.payment.Payment.PaymentType paymentType26 = payment25.getPaymentType();
        models.payment.Payment.PaymentType paymentType27 = payment25.getPaymentType();
        models.payment.Payment payment28 = new models.payment.Payment((double) 10, booking3, paymentMethod17, paymentType27);
        models.payment.Payment.PaymentType paymentType29 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment30 = new models.payment.Payment((double) 0.0f, booking1, paymentMethod17, paymentType29);
        java.util.UUID uUID31 = payment30.getBookingID();
        java.lang.Class<?> wildcardClass32 = payment30.getClass();
        org.junit.Assert.assertTrue("'" + paymentStatus8 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus8.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType9 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType9.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType11 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType11.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID12);
        org.junit.Assert.assertTrue("'" + paymentType13 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType13.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod17);
        org.junit.Assert.assertTrue("'" + paymentStatus23 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus23.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType24 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType24.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType26 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType26.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType27 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType27.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType29 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType29.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass32);
    }

    @Test
    public void test186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test186");
        java.util.UUID uUID0 = null;
        models.booking.Booking booking1 = null;
        models.booking.Booking booking4 = null;
        models.booking.Booking booking6 = null;
        java.util.UUID uUID7 = null;
        models.booking.Booking booking8 = null;
        models.payment.PaymentMethod paymentMethod10 = null;
        models.payment.Payment.PaymentStatus paymentStatus11 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType12 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment13 = new models.payment.Payment(uUID7, booking8, 100.0d, paymentMethod10, paymentStatus11, paymentType12);
        models.payment.Payment.PaymentType paymentType14 = payment13.getPaymentType();
        java.util.UUID uUID15 = payment13.getBookingID();
        models.payment.Payment.PaymentType paymentType16 = models.payment.Payment.PaymentType.FINAL;
        payment13.setPaymentType(paymentType16);
        java.util.UUID uUID18 = payment13.getPaymentID();
        models.payment.PaymentMethod paymentMethod20 = models.payment.Payment.generateMethod("");
        payment13.setPaymentMethod(paymentMethod20);
        java.util.UUID uUID22 = null;
        models.booking.Booking booking23 = null;
        models.payment.PaymentMethod paymentMethod25 = null;
        models.payment.Payment.PaymentStatus paymentStatus26 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType27 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment28 = new models.payment.Payment(uUID22, booking23, 100.0d, paymentMethod25, paymentStatus26, paymentType27);
        models.payment.Payment.PaymentType paymentType29 = payment28.getPaymentType();
        models.payment.Payment.PaymentType paymentType30 = payment28.getPaymentType();
        models.payment.Payment payment31 = new models.payment.Payment((double) 10, booking6, paymentMethod20, paymentType30);
        models.payment.Payment.PaymentType paymentType32 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment33 = new models.payment.Payment((double) 0.0f, booking4, paymentMethod20, paymentType32);
        java.util.UUID uUID34 = null;
        models.booking.Booking booking35 = null;
        models.payment.PaymentMethod paymentMethod37 = null;
        models.payment.Payment.PaymentStatus paymentStatus38 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType39 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment40 = new models.payment.Payment(uUID34, booking35, (-1.0d), paymentMethod37, paymentStatus38, paymentType39);
        java.util.UUID uUID41 = null;
        models.booking.Booking booking42 = null;
        models.payment.PaymentMethod paymentMethod44 = null;
        models.payment.Payment.PaymentStatus paymentStatus45 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType46 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment47 = new models.payment.Payment(uUID41, booking42, 100.0d, paymentMethod44, paymentStatus45, paymentType46);
        models.payment.Payment.PaymentType paymentType48 = payment47.getPaymentType();
        java.util.UUID uUID49 = payment47.getBookingID();
        models.payment.Payment.PaymentType paymentType50 = models.payment.Payment.PaymentType.FINAL;
        payment47.setPaymentType(paymentType50);
        models.payment.PaymentMethod paymentMethod52 = payment47.getMethod();
        java.util.UUID uUID53 = null;
        models.booking.Booking booking54 = null;
        models.payment.PaymentMethod paymentMethod56 = null;
        models.payment.Payment.PaymentStatus paymentStatus57 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType58 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment59 = new models.payment.Payment(uUID53, booking54, 100.0d, paymentMethod56, paymentStatus57, paymentType58);
        models.payment.Payment.PaymentType paymentType60 = payment59.getPaymentType();
        java.util.UUID uUID61 = payment59.getBookingID();
        models.payment.Payment.PaymentType paymentType62 = models.payment.Payment.PaymentType.FINAL;
        payment59.setPaymentType(paymentType62);
        payment47.setPaymentType(paymentType62);
        models.payment.Payment payment65 = new models.payment.Payment(uUID0, booking1, (double) (byte) 10, paymentMethod20, paymentStatus38, paymentType62);
        models.payment.Payment.PaymentStatus paymentStatus66 = payment65.getStatus();
        java.util.UUID uUID67 = payment65.getPaymentID();
        org.junit.Assert.assertTrue("'" + paymentStatus11 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus11.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType12 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType12.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType14 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType14.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID15);
        org.junit.Assert.assertTrue("'" + paymentType16 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType16.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod20);
        org.junit.Assert.assertTrue("'" + paymentStatus26 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus26.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType27 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType27.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType29 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType29.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType30 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType30.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType32 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType32.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentStatus38 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus38.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType39 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType39.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentStatus45 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus45.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType46 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType46.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType48 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType48.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID49);
        org.junit.Assert.assertTrue("'" + paymentType50 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType50.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(paymentMethod52);
        org.junit.Assert.assertTrue("'" + paymentStatus57 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus57.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType58 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType58.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType60 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType60.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID61);
        org.junit.Assert.assertTrue("'" + paymentType62 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType62.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentStatus66 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus66.equals(models.payment.Payment.PaymentStatus.FAILED));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID67);
    }

    @Test
    public void test187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test187");
        java.util.UUID uUID0 = null;
        models.booking.Booking booking1 = null;
        models.payment.PaymentMethod paymentMethod3 = null;
        models.payment.Payment.PaymentStatus paymentStatus4 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType5 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment6 = new models.payment.Payment(uUID0, booking1, 100.0d, paymentMethod3, paymentStatus4, paymentType5);
        models.payment.Payment.PaymentType paymentType7 = payment6.getPaymentType();
        java.util.UUID uUID8 = payment6.getBookingID();
        java.util.UUID uUID9 = payment6.getPaymentID();
        double double10 = payment6.getAmount();
        java.util.UUID uUID11 = payment6.getPaymentID();
        double double12 = payment6.getAmount();
        org.junit.Assert.assertTrue("'" + paymentStatus4 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus4.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType5 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType5.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType7 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType7.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 100.0d + "'", double10 == 100.0d);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 100.0d + "'", double12 == 100.0d);
    }

    @Test
    public void test188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test188");
        java.util.UUID uUID0 = null;
        models.booking.Booking booking1 = null;
        models.payment.PaymentMethod paymentMethod3 = null;
        models.payment.Payment.PaymentStatus paymentStatus4 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType5 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment6 = new models.payment.Payment(uUID0, booking1, 100.0d, paymentMethod3, paymentStatus4, paymentType5);
        models.payment.Payment.PaymentType paymentType7 = payment6.getPaymentType();
        java.util.UUID uUID8 = payment6.getBookingID();
        models.payment.Payment.PaymentType paymentType9 = models.payment.Payment.PaymentType.FINAL;
        payment6.setPaymentType(paymentType9);
        models.payment.PaymentMethod paymentMethod11 = payment6.getMethod();
        java.util.UUID uUID12 = payment6.getBookingID();
        models.booking.Booking booking13 = payment6.getBooking();
        java.util.UUID uUID14 = null;
        models.booking.Booking booking15 = null;
        models.payment.PaymentMethod paymentMethod17 = null;
        models.payment.Payment.PaymentStatus paymentStatus18 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType19 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment20 = new models.payment.Payment(uUID14, booking15, 100.0d, paymentMethod17, paymentStatus18, paymentType19);
        models.payment.Payment.PaymentType paymentType21 = payment20.getPaymentType();
        java.util.UUID uUID22 = payment20.getBookingID();
        java.util.UUID uUID23 = payment20.getPaymentID();
        java.util.UUID uUID24 = null;
        models.booking.Booking booking25 = null;
        java.util.UUID uUID27 = null;
        models.booking.Booking booking28 = null;
        java.util.UUID uUID30 = null;
        models.booking.Booking booking31 = null;
        models.payment.PaymentMethod paymentMethod33 = null;
        models.payment.Payment.PaymentStatus paymentStatus34 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType35 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment36 = new models.payment.Payment(uUID30, booking31, 100.0d, paymentMethod33, paymentStatus34, paymentType35);
        models.payment.Payment.PaymentType paymentType37 = payment36.getPaymentType();
        java.util.UUID uUID38 = payment36.getBookingID();
        models.payment.Payment.PaymentType paymentType39 = models.payment.Payment.PaymentType.FINAL;
        payment36.setPaymentType(paymentType39);
        java.util.UUID uUID41 = payment36.getPaymentID();
        models.payment.PaymentMethod paymentMethod43 = models.payment.Payment.generateMethod("");
        payment36.setPaymentMethod(paymentMethod43);
        models.payment.Payment.PaymentStatus paymentStatus45 = models.payment.Payment.PaymentStatus.PENDING;
        models.payment.Payment.PaymentType paymentType46 = null;
        models.payment.Payment payment47 = new models.payment.Payment(uUID27, booking28, (double) (byte) 0, paymentMethod43, paymentStatus45, paymentType46);
        models.payment.Payment.PaymentStatus paymentStatus48 = models.payment.Payment.PaymentStatus.PENDING;
        models.payment.Payment.PaymentType paymentType49 = models.payment.Payment.PaymentType.DEPOSIT;
        models.payment.Payment payment50 = new models.payment.Payment(uUID24, booking25, (double) (byte) 100, paymentMethod43, paymentStatus48, paymentType49);
        models.booking.Booking booking51 = payment50.getBooking();
        double double52 = payment50.getAmount();
        java.util.UUID uUID53 = payment50.getBookingID();
        models.payment.PaymentMethod paymentMethod54 = payment50.getMethod();
        payment20.setPaymentMethod(paymentMethod54);
        payment6.setPaymentMethod(paymentMethod54);
        models.payment.PaymentMethod paymentMethod57 = null;
        payment6.setPaymentMethod(paymentMethod57);
        double double59 = payment6.getAmount();
        java.util.UUID uUID60 = payment6.getPaymentID();
        models.payment.Payment.PaymentType paymentType61 = payment6.getPaymentType();
        org.junit.Assert.assertTrue("'" + paymentStatus4 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus4.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType5 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType5.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType7 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType7.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID8);
        org.junit.Assert.assertTrue("'" + paymentType9 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType9.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(paymentMethod11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(booking13);
        org.junit.Assert.assertTrue("'" + paymentStatus18 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus18.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType19 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType19.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType21 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType21.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID23);
        org.junit.Assert.assertTrue("'" + paymentStatus34 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus34.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType35 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType35.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType37 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType37.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID38);
        org.junit.Assert.assertTrue("'" + paymentType39 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType39.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod43);
        org.junit.Assert.assertTrue("'" + paymentStatus45 + "' != '" + models.payment.Payment.PaymentStatus.PENDING + "'", paymentStatus45.equals(models.payment.Payment.PaymentStatus.PENDING));
        org.junit.Assert.assertTrue("'" + paymentStatus48 + "' != '" + models.payment.Payment.PaymentStatus.PENDING + "'", paymentStatus48.equals(models.payment.Payment.PaymentStatus.PENDING));
        org.junit.Assert.assertTrue("'" + paymentType49 + "' != '" + models.payment.Payment.PaymentType.DEPOSIT + "'", paymentType49.equals(models.payment.Payment.PaymentType.DEPOSIT));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(booking51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 100.0d + "'", double52 == 100.0d);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 100.0d + "'", double59 == 100.0d);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID60);
        org.junit.Assert.assertTrue("'" + paymentType61 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType61.equals(models.payment.Payment.PaymentType.FINAL));
    }

    @Test
    public void test189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test189");
        models.booking.Booking booking1 = null;
        models.booking.Booking booking3 = null;
        java.util.UUID uUID4 = null;
        models.booking.Booking booking5 = null;
        models.payment.PaymentMethod paymentMethod7 = null;
        models.payment.Payment.PaymentStatus paymentStatus8 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType9 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment10 = new models.payment.Payment(uUID4, booking5, 100.0d, paymentMethod7, paymentStatus8, paymentType9);
        models.payment.Payment.PaymentType paymentType11 = payment10.getPaymentType();
        java.util.UUID uUID12 = payment10.getBookingID();
        models.payment.Payment.PaymentType paymentType13 = models.payment.Payment.PaymentType.FINAL;
        payment10.setPaymentType(paymentType13);
        java.util.UUID uUID15 = payment10.getPaymentID();
        models.payment.PaymentMethod paymentMethod17 = models.payment.Payment.generateMethod("");
        payment10.setPaymentMethod(paymentMethod17);
        java.util.UUID uUID19 = null;
        models.booking.Booking booking20 = null;
        models.payment.PaymentMethod paymentMethod22 = null;
        models.payment.Payment.PaymentStatus paymentStatus23 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType24 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment25 = new models.payment.Payment(uUID19, booking20, 100.0d, paymentMethod22, paymentStatus23, paymentType24);
        models.payment.Payment.PaymentType paymentType26 = payment25.getPaymentType();
        models.payment.Payment.PaymentType paymentType27 = payment25.getPaymentType();
        models.payment.Payment payment28 = new models.payment.Payment((double) 10, booking3, paymentMethod17, paymentType27);
        java.util.UUID uUID29 = null;
        models.booking.Booking booking30 = null;
        models.payment.PaymentMethod paymentMethod32 = null;
        models.payment.Payment.PaymentStatus paymentStatus33 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType34 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment35 = new models.payment.Payment(uUID29, booking30, 100.0d, paymentMethod32, paymentStatus33, paymentType34);
        models.payment.Payment.PaymentType paymentType36 = payment35.getPaymentType();
        java.util.UUID uUID37 = payment35.getBookingID();
        models.payment.Payment.PaymentType paymentType38 = models.payment.Payment.PaymentType.FINAL;
        payment35.setPaymentType(paymentType38);
        models.payment.PaymentMethod paymentMethod40 = payment35.getMethod();
        models.payment.Payment.PaymentType paymentType41 = payment35.getPaymentType();
        models.payment.Payment payment42 = new models.payment.Payment((double) 0, booking1, paymentMethod17, paymentType41);
        models.payment.Payment.PaymentStatus paymentStatus43 = payment42.getStatus();
        double double44 = payment42.getAmount();
        org.junit.Assert.assertTrue("'" + paymentStatus8 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus8.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType9 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType9.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType11 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType11.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID12);
        org.junit.Assert.assertTrue("'" + paymentType13 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType13.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod17);
        org.junit.Assert.assertTrue("'" + paymentStatus23 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus23.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType24 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType24.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType26 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType26.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType27 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType27.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentStatus33 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus33.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType34 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType34.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType36 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType36.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID37);
        org.junit.Assert.assertTrue("'" + paymentType38 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType38.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(paymentMethod40);
        org.junit.Assert.assertTrue("'" + paymentType41 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType41.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentStatus43 + "' != '" + models.payment.Payment.PaymentStatus.PENDING + "'", paymentStatus43.equals(models.payment.Payment.PaymentStatus.PENDING));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.0d + "'", double44 == 0.0d);
    }

    @Test
    public void test190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test190");
        java.util.UUID uUID0 = null;
        models.booking.Booking booking1 = null;
        java.util.UUID uUID3 = null;
        models.booking.Booking booking4 = null;
        models.payment.PaymentMethod paymentMethod7 = models.payment.Payment.generateMethod("");
        java.util.UUID uUID8 = null;
        models.booking.Booking booking9 = null;
        models.payment.PaymentMethod paymentMethod11 = null;
        models.payment.Payment.PaymentStatus paymentStatus12 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType13 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment14 = new models.payment.Payment(uUID8, booking9, 100.0d, paymentMethod11, paymentStatus12, paymentType13);
        models.payment.Payment.PaymentStatus paymentStatus15 = payment14.getStatus();
        java.util.UUID uUID16 = null;
        models.booking.Booking booking17 = null;
        models.payment.PaymentMethod paymentMethod19 = null;
        models.payment.Payment.PaymentStatus paymentStatus20 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType21 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment22 = new models.payment.Payment(uUID16, booking17, 100.0d, paymentMethod19, paymentStatus20, paymentType21);
        models.payment.Payment.PaymentType paymentType23 = payment22.getPaymentType();
        java.util.UUID uUID24 = payment22.getBookingID();
        models.payment.Payment.PaymentType paymentType25 = models.payment.Payment.PaymentType.FINAL;
        payment22.setPaymentType(paymentType25);
        models.payment.PaymentMethod paymentMethod27 = payment22.getMethod();
        models.payment.Payment.PaymentType paymentType28 = payment22.getPaymentType();
        models.payment.Payment payment29 = new models.payment.Payment(uUID3, booking4, (double) 1L, paymentMethod7, paymentStatus15, paymentType28);
        java.util.UUID uUID30 = null;
        models.booking.Booking booking31 = null;
        models.payment.PaymentMethod paymentMethod33 = null;
        models.payment.Payment.PaymentStatus paymentStatus34 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType35 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment36 = new models.payment.Payment(uUID30, booking31, 100.0d, paymentMethod33, paymentStatus34, paymentType35);
        models.payment.Payment.PaymentStatus paymentStatus37 = payment36.getStatus();
        models.booking.Booking booking39 = null;
        java.util.UUID uUID40 = null;
        models.booking.Booking booking41 = null;
        models.payment.PaymentMethod paymentMethod43 = null;
        models.payment.Payment.PaymentStatus paymentStatus44 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType45 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment46 = new models.payment.Payment(uUID40, booking41, 100.0d, paymentMethod43, paymentStatus44, paymentType45);
        models.payment.Payment.PaymentType paymentType47 = payment46.getPaymentType();
        java.util.UUID uUID48 = payment46.getBookingID();
        models.payment.Payment.PaymentType paymentType49 = models.payment.Payment.PaymentType.FINAL;
        payment46.setPaymentType(paymentType49);
        java.util.UUID uUID51 = payment46.getPaymentID();
        models.payment.PaymentMethod paymentMethod53 = models.payment.Payment.generateMethod("");
        payment46.setPaymentMethod(paymentMethod53);
        java.util.UUID uUID55 = null;
        models.booking.Booking booking56 = null;
        models.payment.PaymentMethod paymentMethod58 = null;
        models.payment.Payment.PaymentStatus paymentStatus59 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType60 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment61 = new models.payment.Payment(uUID55, booking56, 100.0d, paymentMethod58, paymentStatus59, paymentType60);
        models.payment.Payment.PaymentType paymentType62 = payment61.getPaymentType();
        models.payment.Payment.PaymentType paymentType63 = payment61.getPaymentType();
        models.payment.Payment payment64 = new models.payment.Payment((double) 10, booking39, paymentMethod53, paymentType63);
        models.payment.Payment payment65 = new models.payment.Payment(uUID0, booking1, (double) (-1), paymentMethod7, paymentStatus37, paymentType63);
        models.booking.Booking booking67 = null;
        java.util.UUID uUID68 = null;
        models.booking.Booking booking69 = null;
        models.payment.PaymentMethod paymentMethod71 = null;
        models.payment.Payment.PaymentStatus paymentStatus72 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType73 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment74 = new models.payment.Payment(uUID68, booking69, 100.0d, paymentMethod71, paymentStatus72, paymentType73);
        models.payment.Payment.PaymentType paymentType75 = payment74.getPaymentType();
        java.util.UUID uUID76 = payment74.getBookingID();
        models.payment.Payment.PaymentType paymentType77 = models.payment.Payment.PaymentType.FINAL;
        payment74.setPaymentType(paymentType77);
        java.util.UUID uUID79 = payment74.getPaymentID();
        models.payment.PaymentMethod paymentMethod81 = models.payment.Payment.generateMethod("");
        payment74.setPaymentMethod(paymentMethod81);
        java.util.UUID uUID83 = null;
        models.booking.Booking booking84 = null;
        models.payment.PaymentMethod paymentMethod86 = null;
        models.payment.Payment.PaymentStatus paymentStatus87 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType88 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment89 = new models.payment.Payment(uUID83, booking84, (-1.0d), paymentMethod86, paymentStatus87, paymentType88);
        models.payment.Payment payment90 = new models.payment.Payment(0.0d, booking67, paymentMethod81, paymentType88);
        payment65.setPaymentMethod(paymentMethod81);
        double double92 = payment65.getAmount();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod7);
        org.junit.Assert.assertTrue("'" + paymentStatus12 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus12.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType13 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType13.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentStatus15 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus15.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentStatus20 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus20.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType21 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType21.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType23 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType23.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID24);
        org.junit.Assert.assertTrue("'" + paymentType25 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType25.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(paymentMethod27);
        org.junit.Assert.assertTrue("'" + paymentType28 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType28.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentStatus34 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus34.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType35 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType35.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentStatus37 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus37.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentStatus44 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus44.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType45 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType45.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType47 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType47.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID48);
        org.junit.Assert.assertTrue("'" + paymentType49 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType49.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod53);
        org.junit.Assert.assertTrue("'" + paymentStatus59 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus59.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType60 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType60.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType62 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType62.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType63 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType63.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentStatus72 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus72.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType73 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType73.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType75 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType75.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID76);
        org.junit.Assert.assertTrue("'" + paymentType77 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType77.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod81);
        org.junit.Assert.assertTrue("'" + paymentStatus87 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus87.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType88 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType88.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + (-1.0d) + "'", double92 == (-1.0d));
    }

    @Test
    public void test191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test191");
        java.util.UUID uUID0 = null;
        models.booking.Booking booking1 = null;
        java.util.UUID uUID3 = null;
        models.booking.Booking booking4 = null;
        models.payment.PaymentMethod paymentMethod6 = null;
        models.payment.Payment.PaymentStatus paymentStatus7 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType8 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment9 = new models.payment.Payment(uUID3, booking4, 100.0d, paymentMethod6, paymentStatus7, paymentType8);
        models.payment.Payment.PaymentType paymentType10 = payment9.getPaymentType();
        java.util.UUID uUID11 = payment9.getBookingID();
        models.payment.Payment.PaymentType paymentType12 = models.payment.Payment.PaymentType.FINAL;
        payment9.setPaymentType(paymentType12);
        java.util.UUID uUID14 = payment9.getPaymentID();
        models.payment.PaymentMethod paymentMethod16 = models.payment.Payment.generateMethod("");
        payment9.setPaymentMethod(paymentMethod16);
        models.payment.Payment.PaymentStatus paymentStatus18 = models.payment.Payment.PaymentStatus.PENDING;
        models.payment.Payment.PaymentType paymentType19 = null;
        models.payment.Payment payment20 = new models.payment.Payment(uUID0, booking1, (double) (byte) 0, paymentMethod16, paymentStatus18, paymentType19);
        boolean boolean21 = payment20.processPayment();
        models.payment.PaymentMethod paymentMethod22 = payment20.getMethod();
        models.payment.Payment.PaymentType paymentType23 = payment20.getPaymentType();
        org.junit.Assert.assertTrue("'" + paymentStatus7 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus7.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType8 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType8.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType10 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType10.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID11);
        org.junit.Assert.assertTrue("'" + paymentType12 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType12.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod16);
        org.junit.Assert.assertTrue("'" + paymentStatus18 + "' != '" + models.payment.Payment.PaymentStatus.PENDING + "'", paymentStatus18.equals(models.payment.Payment.PaymentStatus.PENDING));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(paymentType23);
    }

    @Test
    public void test192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test192");
        models.booking.Booking booking1 = null;
        models.booking.Booking booking3 = null;
        models.booking.Booking booking5 = null;
        java.util.UUID uUID6 = null;
        models.booking.Booking booking7 = null;
        java.util.UUID uUID9 = null;
        models.booking.Booking booking10 = null;
        models.payment.PaymentMethod paymentMethod12 = null;
        models.payment.Payment.PaymentStatus paymentStatus13 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType14 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment15 = new models.payment.Payment(uUID9, booking10, 100.0d, paymentMethod12, paymentStatus13, paymentType14);
        models.payment.Payment.PaymentType paymentType16 = payment15.getPaymentType();
        java.util.UUID uUID17 = payment15.getBookingID();
        models.payment.Payment.PaymentType paymentType18 = models.payment.Payment.PaymentType.FINAL;
        payment15.setPaymentType(paymentType18);
        java.util.UUID uUID20 = payment15.getPaymentID();
        models.payment.PaymentMethod paymentMethod22 = models.payment.Payment.generateMethod("");
        payment15.setPaymentMethod(paymentMethod22);
        models.payment.Payment.PaymentStatus paymentStatus24 = models.payment.Payment.PaymentStatus.PENDING;
        models.payment.Payment.PaymentType paymentType25 = null;
        models.payment.Payment payment26 = new models.payment.Payment(uUID6, booking7, (double) (byte) 0, paymentMethod22, paymentStatus24, paymentType25);
        models.payment.Payment.PaymentStatus paymentStatus27 = payment26.getStatus();
        boolean boolean28 = payment26.processPayment();
        models.payment.PaymentMethod paymentMethod29 = payment26.getMethod();
        java.util.UUID uUID30 = null;
        models.booking.Booking booking31 = null;
        models.payment.PaymentMethod paymentMethod33 = null;
        models.payment.Payment.PaymentStatus paymentStatus34 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType35 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment36 = new models.payment.Payment(uUID30, booking31, 100.0d, paymentMethod33, paymentStatus34, paymentType35);
        models.payment.Payment payment37 = new models.payment.Payment((double) 100, booking5, paymentMethod29, paymentType35);
        java.util.UUID uUID38 = null;
        models.booking.Booking booking39 = null;
        models.payment.PaymentMethod paymentMethod41 = null;
        models.payment.Payment.PaymentStatus paymentStatus42 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType43 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment44 = new models.payment.Payment(uUID38, booking39, 100.0d, paymentMethod41, paymentStatus42, paymentType43);
        models.payment.Payment payment45 = new models.payment.Payment((double) 100.0f, booking3, paymentMethod29, paymentType43);
        models.booking.Booking booking47 = null;
        models.booking.Booking booking49 = null;
        java.util.UUID uUID50 = null;
        models.booking.Booking booking51 = null;
        java.util.UUID uUID53 = null;
        models.booking.Booking booking54 = null;
        models.payment.PaymentMethod paymentMethod56 = null;
        models.payment.Payment.PaymentStatus paymentStatus57 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType58 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment59 = new models.payment.Payment(uUID53, booking54, 100.0d, paymentMethod56, paymentStatus57, paymentType58);
        models.payment.Payment.PaymentType paymentType60 = payment59.getPaymentType();
        java.util.UUID uUID61 = payment59.getBookingID();
        models.payment.Payment.PaymentType paymentType62 = models.payment.Payment.PaymentType.FINAL;
        payment59.setPaymentType(paymentType62);
        java.util.UUID uUID64 = payment59.getPaymentID();
        models.payment.PaymentMethod paymentMethod66 = models.payment.Payment.generateMethod("");
        payment59.setPaymentMethod(paymentMethod66);
        models.payment.Payment.PaymentStatus paymentStatus68 = models.payment.Payment.PaymentStatus.PENDING;
        models.payment.Payment.PaymentType paymentType69 = null;
        models.payment.Payment payment70 = new models.payment.Payment(uUID50, booking51, (double) (byte) 0, paymentMethod66, paymentStatus68, paymentType69);
        models.payment.Payment.PaymentStatus paymentStatus71 = payment70.getStatus();
        boolean boolean72 = payment70.processPayment();
        models.payment.PaymentMethod paymentMethod73 = payment70.getMethod();
        java.util.UUID uUID74 = null;
        models.booking.Booking booking75 = null;
        models.payment.PaymentMethod paymentMethod77 = null;
        models.payment.Payment.PaymentStatus paymentStatus78 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType79 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment80 = new models.payment.Payment(uUID74, booking75, 100.0d, paymentMethod77, paymentStatus78, paymentType79);
        models.payment.Payment payment81 = new models.payment.Payment((double) 100, booking49, paymentMethod73, paymentType79);
        java.util.UUID uUID82 = null;
        models.booking.Booking booking83 = null;
        models.payment.PaymentMethod paymentMethod85 = null;
        models.payment.Payment.PaymentStatus paymentStatus86 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType87 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment88 = new models.payment.Payment(uUID82, booking83, 100.0d, paymentMethod85, paymentStatus86, paymentType87);
        models.payment.Payment payment89 = new models.payment.Payment((double) 100.0f, booking47, paymentMethod73, paymentType87);
        models.payment.Payment payment90 = new models.payment.Payment((double) 10, booking1, paymentMethod29, paymentType87);
        org.junit.Assert.assertTrue("'" + paymentStatus13 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus13.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType14 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType14.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType16 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType16.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID17);
        org.junit.Assert.assertTrue("'" + paymentType18 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType18.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod22);
        org.junit.Assert.assertTrue("'" + paymentStatus24 + "' != '" + models.payment.Payment.PaymentStatus.PENDING + "'", paymentStatus24.equals(models.payment.Payment.PaymentStatus.PENDING));
        org.junit.Assert.assertTrue("'" + paymentStatus27 + "' != '" + models.payment.Payment.PaymentStatus.PENDING + "'", paymentStatus27.equals(models.payment.Payment.PaymentStatus.PENDING));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod29);
        org.junit.Assert.assertTrue("'" + paymentStatus34 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus34.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType35 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType35.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentStatus42 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus42.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType43 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType43.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentStatus57 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus57.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType58 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType58.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType60 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType60.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID61);
        org.junit.Assert.assertTrue("'" + paymentType62 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType62.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod66);
        org.junit.Assert.assertTrue("'" + paymentStatus68 + "' != '" + models.payment.Payment.PaymentStatus.PENDING + "'", paymentStatus68.equals(models.payment.Payment.PaymentStatus.PENDING));
        org.junit.Assert.assertTrue("'" + paymentStatus71 + "' != '" + models.payment.Payment.PaymentStatus.PENDING + "'", paymentStatus71.equals(models.payment.Payment.PaymentStatus.PENDING));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod73);
        org.junit.Assert.assertTrue("'" + paymentStatus78 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus78.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType79 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType79.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentStatus86 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus86.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType87 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType87.equals(models.payment.Payment.PaymentType.FINAL));
    }

    @Test
    public void test193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test193");
        models.booking.Booking booking1 = null;
        models.payment.PaymentMethod paymentMethod2 = null;
        java.util.UUID uUID3 = null;
        models.booking.Booking booking4 = null;
        models.payment.PaymentMethod paymentMethod6 = null;
        models.payment.Payment.PaymentStatus paymentStatus7 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType8 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment9 = new models.payment.Payment(uUID3, booking4, 100.0d, paymentMethod6, paymentStatus7, paymentType8);
        models.payment.Payment.PaymentType paymentType10 = payment9.getPaymentType();
        java.util.UUID uUID11 = payment9.getBookingID();
        models.payment.Payment.PaymentType paymentType12 = models.payment.Payment.PaymentType.FINAL;
        payment9.setPaymentType(paymentType12);
        models.payment.PaymentMethod paymentMethod14 = payment9.getMethod();
        models.payment.Payment.PaymentType paymentType15 = payment9.getPaymentType();
        java.util.UUID uUID16 = null;
        models.booking.Booking booking17 = null;
        models.payment.PaymentMethod paymentMethod19 = null;
        models.payment.Payment.PaymentStatus paymentStatus20 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType21 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment22 = new models.payment.Payment(uUID16, booking17, 100.0d, paymentMethod19, paymentStatus20, paymentType21);
        java.util.UUID uUID23 = null;
        models.booking.Booking booking24 = null;
        java.util.UUID uUID26 = null;
        models.booking.Booking booking27 = null;
        models.payment.PaymentMethod paymentMethod29 = null;
        models.payment.Payment.PaymentStatus paymentStatus30 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType31 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment32 = new models.payment.Payment(uUID26, booking27, 100.0d, paymentMethod29, paymentStatus30, paymentType31);
        models.payment.Payment.PaymentType paymentType33 = payment32.getPaymentType();
        java.util.UUID uUID34 = payment32.getBookingID();
        models.payment.Payment.PaymentType paymentType35 = models.payment.Payment.PaymentType.FINAL;
        payment32.setPaymentType(paymentType35);
        java.util.UUID uUID37 = payment32.getPaymentID();
        models.payment.PaymentMethod paymentMethod39 = models.payment.Payment.generateMethod("");
        payment32.setPaymentMethod(paymentMethod39);
        models.payment.Payment.PaymentStatus paymentStatus41 = models.payment.Payment.PaymentStatus.PENDING;
        models.payment.Payment.PaymentType paymentType42 = null;
        models.payment.Payment payment43 = new models.payment.Payment(uUID23, booking24, (double) (byte) 0, paymentMethod39, paymentStatus41, paymentType42);
        payment22.setPaymentMethod(paymentMethod39);
        payment9.setPaymentMethod(paymentMethod39);
        models.booking.Booking booking46 = payment9.getBooking();
        models.payment.Payment.PaymentType paymentType47 = payment9.getPaymentType();
        java.util.UUID uUID48 = null;
        models.booking.Booking booking49 = null;
        models.payment.PaymentMethod paymentMethod51 = null;
        models.payment.Payment.PaymentStatus paymentStatus52 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType53 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment54 = new models.payment.Payment(uUID48, booking49, 100.0d, paymentMethod51, paymentStatus52, paymentType53);
        models.payment.Payment.PaymentType paymentType55 = models.payment.Payment.PaymentType.DEPOSIT;
        payment54.setPaymentType(paymentType55);
        payment9.setPaymentType(paymentType55);
        models.payment.Payment.PaymentType paymentType58 = payment9.getPaymentType();
        models.payment.Payment payment59 = new models.payment.Payment((double) '4', booking1, paymentMethod2, paymentType58);
        org.junit.Assert.assertTrue("'" + paymentStatus7 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus7.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType8 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType8.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType10 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType10.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID11);
        org.junit.Assert.assertTrue("'" + paymentType12 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType12.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(paymentMethod14);
        org.junit.Assert.assertTrue("'" + paymentType15 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType15.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentStatus20 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus20.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType21 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType21.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentStatus30 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus30.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType31 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType31.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType33 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType33.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID34);
        org.junit.Assert.assertTrue("'" + paymentType35 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType35.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod39);
        org.junit.Assert.assertTrue("'" + paymentStatus41 + "' != '" + models.payment.Payment.PaymentStatus.PENDING + "'", paymentStatus41.equals(models.payment.Payment.PaymentStatus.PENDING));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(booking46);
        org.junit.Assert.assertTrue("'" + paymentType47 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType47.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentStatus52 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus52.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType53 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType53.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType55 + "' != '" + models.payment.Payment.PaymentType.DEPOSIT + "'", paymentType55.equals(models.payment.Payment.PaymentType.DEPOSIT));
        org.junit.Assert.assertTrue("'" + paymentType58 + "' != '" + models.payment.Payment.PaymentType.DEPOSIT + "'", paymentType58.equals(models.payment.Payment.PaymentType.DEPOSIT));
    }

    @Test
    public void test194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test194");
        java.util.UUID uUID0 = null;
        models.booking.Booking booking1 = null;
        models.booking.Booking booking4 = null;
        java.util.UUID uUID5 = null;
        models.booking.Booking booking6 = null;
        models.payment.PaymentMethod paymentMethod8 = null;
        models.payment.Payment.PaymentStatus paymentStatus9 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType10 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment11 = new models.payment.Payment(uUID5, booking6, 100.0d, paymentMethod8, paymentStatus9, paymentType10);
        models.payment.Payment.PaymentType paymentType12 = payment11.getPaymentType();
        java.util.UUID uUID13 = payment11.getBookingID();
        models.payment.Payment.PaymentType paymentType14 = models.payment.Payment.PaymentType.FINAL;
        payment11.setPaymentType(paymentType14);
        java.util.UUID uUID16 = payment11.getPaymentID();
        models.payment.PaymentMethod paymentMethod18 = models.payment.Payment.generateMethod("");
        payment11.setPaymentMethod(paymentMethod18);
        java.util.UUID uUID20 = null;
        models.booking.Booking booking21 = null;
        models.payment.PaymentMethod paymentMethod23 = null;
        models.payment.Payment.PaymentStatus paymentStatus24 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType25 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment26 = new models.payment.Payment(uUID20, booking21, 100.0d, paymentMethod23, paymentStatus24, paymentType25);
        models.payment.Payment.PaymentType paymentType27 = payment26.getPaymentType();
        models.payment.Payment.PaymentType paymentType28 = payment26.getPaymentType();
        models.payment.Payment payment29 = new models.payment.Payment((double) 10, booking4, paymentMethod18, paymentType28);
        java.util.UUID uUID30 = null;
        models.booking.Booking booking31 = null;
        models.payment.PaymentMethod paymentMethod34 = models.payment.Payment.generateMethod("");
        java.util.UUID uUID35 = null;
        models.booking.Booking booking36 = null;
        models.payment.PaymentMethod paymentMethod38 = null;
        models.payment.Payment.PaymentStatus paymentStatus39 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType40 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment41 = new models.payment.Payment(uUID35, booking36, 100.0d, paymentMethod38, paymentStatus39, paymentType40);
        models.payment.Payment.PaymentStatus paymentStatus42 = payment41.getStatus();
        java.util.UUID uUID43 = null;
        models.booking.Booking booking44 = null;
        models.payment.PaymentMethod paymentMethod46 = null;
        models.payment.Payment.PaymentStatus paymentStatus47 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType48 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment49 = new models.payment.Payment(uUID43, booking44, 100.0d, paymentMethod46, paymentStatus47, paymentType48);
        models.payment.Payment.PaymentType paymentType50 = payment49.getPaymentType();
        java.util.UUID uUID51 = payment49.getBookingID();
        models.payment.Payment.PaymentType paymentType52 = models.payment.Payment.PaymentType.FINAL;
        payment49.setPaymentType(paymentType52);
        models.payment.PaymentMethod paymentMethod54 = payment49.getMethod();
        models.payment.Payment.PaymentType paymentType55 = payment49.getPaymentType();
        models.payment.Payment payment56 = new models.payment.Payment(uUID30, booking31, (double) 1L, paymentMethod34, paymentStatus42, paymentType55);
        java.util.UUID uUID57 = null;
        models.booking.Booking booking58 = null;
        models.payment.PaymentMethod paymentMethod60 = null;
        models.payment.Payment.PaymentStatus paymentStatus61 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType62 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment63 = new models.payment.Payment(uUID57, booking58, (-1.0d), paymentMethod60, paymentStatus61, paymentType62);
        models.payment.Payment payment64 = new models.payment.Payment(uUID0, booking1, (double) (byte) 0, paymentMethod18, paymentStatus42, paymentType62);
        models.payment.Payment.PaymentType paymentType65 = models.payment.Payment.PaymentType.REFUND;
        payment64.setPaymentType(paymentType65);
        models.payment.Payment.PaymentType paymentType67 = payment64.getPaymentType();
        java.util.UUID uUID68 = payment64.getPaymentID();
        org.junit.Assert.assertTrue("'" + paymentStatus9 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus9.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType10 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType10.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType12 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType12.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID13);
        org.junit.Assert.assertTrue("'" + paymentType14 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType14.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod18);
        org.junit.Assert.assertTrue("'" + paymentStatus24 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus24.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType25 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType25.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType27 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType27.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType28 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType28.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod34);
        org.junit.Assert.assertTrue("'" + paymentStatus39 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus39.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType40 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType40.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentStatus42 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus42.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentStatus47 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus47.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType48 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType48.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType50 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType50.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID51);
        org.junit.Assert.assertTrue("'" + paymentType52 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType52.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(paymentMethod54);
        org.junit.Assert.assertTrue("'" + paymentType55 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType55.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentStatus61 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus61.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType62 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType62.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType65 + "' != '" + models.payment.Payment.PaymentType.REFUND + "'", paymentType65.equals(models.payment.Payment.PaymentType.REFUND));
        org.junit.Assert.assertTrue("'" + paymentType67 + "' != '" + models.payment.Payment.PaymentType.REFUND + "'", paymentType67.equals(models.payment.Payment.PaymentType.REFUND));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID68);
    }

    @Test
    public void test195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test195");
        java.util.UUID uUID0 = null;
        models.booking.Booking booking1 = null;
        models.payment.PaymentMethod paymentMethod3 = null;
        models.payment.Payment.PaymentStatus paymentStatus4 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType5 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment6 = new models.payment.Payment(uUID0, booking1, 100.0d, paymentMethod3, paymentStatus4, paymentType5);
        models.payment.Payment.PaymentType paymentType7 = models.payment.Payment.PaymentType.DEPOSIT;
        payment6.setPaymentType(paymentType7);
        models.payment.Payment.PaymentType paymentType9 = payment6.getPaymentType();
        java.util.UUID uUID10 = payment6.getBookingID();
        org.junit.Assert.assertTrue("'" + paymentStatus4 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus4.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType5 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType5.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType7 + "' != '" + models.payment.Payment.PaymentType.DEPOSIT + "'", paymentType7.equals(models.payment.Payment.PaymentType.DEPOSIT));
        org.junit.Assert.assertTrue("'" + paymentType9 + "' != '" + models.payment.Payment.PaymentType.DEPOSIT + "'", paymentType9.equals(models.payment.Payment.PaymentType.DEPOSIT));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID10);
    }

    @Test
    public void test196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test196");
        java.util.UUID uUID0 = null;
        models.booking.Booking booking1 = null;
        models.payment.PaymentMethod paymentMethod3 = null;
        models.payment.Payment.PaymentStatus paymentStatus4 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType5 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment6 = new models.payment.Payment(uUID0, booking1, 100.0d, paymentMethod3, paymentStatus4, paymentType5);
        models.payment.Payment.PaymentType paymentType7 = payment6.getPaymentType();
        java.util.UUID uUID8 = payment6.getPaymentID();
        double double9 = payment6.getAmount();
        org.junit.Assert.assertTrue("'" + paymentStatus4 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus4.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType5 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType5.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType7 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType7.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 100.0d + "'", double9 == 100.0d);
    }

    @Test
    public void test197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test197");
        java.util.UUID uUID0 = null;
        models.booking.Booking booking1 = null;
        models.payment.PaymentMethod paymentMethod3 = null;
        models.payment.Payment.PaymentStatus paymentStatus4 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType5 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment6 = new models.payment.Payment(uUID0, booking1, 100.0d, paymentMethod3, paymentStatus4, paymentType5);
        models.payment.Payment.PaymentType paymentType7 = payment6.getPaymentType();
        java.util.UUID uUID8 = payment6.getBookingID();
        models.payment.Payment.PaymentType paymentType9 = models.payment.Payment.PaymentType.FINAL;
        payment6.setPaymentType(paymentType9);
        models.payment.PaymentMethod paymentMethod11 = payment6.getMethod();
        java.util.UUID uUID12 = payment6.getBookingID();
        models.booking.Booking booking13 = payment6.getBooking();
        java.util.UUID uUID14 = null;
        models.booking.Booking booking15 = null;
        models.payment.PaymentMethod paymentMethod17 = null;
        models.payment.Payment.PaymentStatus paymentStatus18 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType19 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment20 = new models.payment.Payment(uUID14, booking15, 100.0d, paymentMethod17, paymentStatus18, paymentType19);
        models.payment.Payment.PaymentType paymentType21 = payment20.getPaymentType();
        java.util.UUID uUID22 = payment20.getBookingID();
        java.util.UUID uUID23 = payment20.getPaymentID();
        java.util.UUID uUID24 = null;
        models.booking.Booking booking25 = null;
        java.util.UUID uUID27 = null;
        models.booking.Booking booking28 = null;
        java.util.UUID uUID30 = null;
        models.booking.Booking booking31 = null;
        models.payment.PaymentMethod paymentMethod33 = null;
        models.payment.Payment.PaymentStatus paymentStatus34 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType35 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment36 = new models.payment.Payment(uUID30, booking31, 100.0d, paymentMethod33, paymentStatus34, paymentType35);
        models.payment.Payment.PaymentType paymentType37 = payment36.getPaymentType();
        java.util.UUID uUID38 = payment36.getBookingID();
        models.payment.Payment.PaymentType paymentType39 = models.payment.Payment.PaymentType.FINAL;
        payment36.setPaymentType(paymentType39);
        java.util.UUID uUID41 = payment36.getPaymentID();
        models.payment.PaymentMethod paymentMethod43 = models.payment.Payment.generateMethod("");
        payment36.setPaymentMethod(paymentMethod43);
        models.payment.Payment.PaymentStatus paymentStatus45 = models.payment.Payment.PaymentStatus.PENDING;
        models.payment.Payment.PaymentType paymentType46 = null;
        models.payment.Payment payment47 = new models.payment.Payment(uUID27, booking28, (double) (byte) 0, paymentMethod43, paymentStatus45, paymentType46);
        models.payment.Payment.PaymentStatus paymentStatus48 = models.payment.Payment.PaymentStatus.PENDING;
        models.payment.Payment.PaymentType paymentType49 = models.payment.Payment.PaymentType.DEPOSIT;
        models.payment.Payment payment50 = new models.payment.Payment(uUID24, booking25, (double) (byte) 100, paymentMethod43, paymentStatus48, paymentType49);
        models.booking.Booking booking51 = payment50.getBooking();
        double double52 = payment50.getAmount();
        java.util.UUID uUID53 = payment50.getBookingID();
        models.payment.PaymentMethod paymentMethod54 = payment50.getMethod();
        payment20.setPaymentMethod(paymentMethod54);
        payment6.setPaymentMethod(paymentMethod54);
        models.payment.Payment.PaymentStatus paymentStatus57 = payment6.getStatus();
        java.util.UUID uUID58 = null;
        models.booking.Booking booking59 = null;
        java.util.UUID uUID61 = null;
        models.booking.Booking booking62 = null;
        java.util.UUID uUID64 = null;
        models.booking.Booking booking65 = null;
        models.payment.PaymentMethod paymentMethod67 = null;
        models.payment.Payment.PaymentStatus paymentStatus68 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType69 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment70 = new models.payment.Payment(uUID64, booking65, 100.0d, paymentMethod67, paymentStatus68, paymentType69);
        models.payment.Payment.PaymentType paymentType71 = payment70.getPaymentType();
        java.util.UUID uUID72 = payment70.getBookingID();
        models.payment.Payment.PaymentType paymentType73 = models.payment.Payment.PaymentType.FINAL;
        payment70.setPaymentType(paymentType73);
        java.util.UUID uUID75 = payment70.getPaymentID();
        models.payment.PaymentMethod paymentMethod77 = models.payment.Payment.generateMethod("");
        payment70.setPaymentMethod(paymentMethod77);
        models.payment.Payment.PaymentStatus paymentStatus79 = models.payment.Payment.PaymentStatus.PENDING;
        models.payment.Payment.PaymentType paymentType80 = null;
        models.payment.Payment payment81 = new models.payment.Payment(uUID61, booking62, (double) (byte) 0, paymentMethod77, paymentStatus79, paymentType80);
        models.payment.Payment.PaymentStatus paymentStatus82 = models.payment.Payment.PaymentStatus.PENDING;
        models.payment.Payment.PaymentType paymentType83 = models.payment.Payment.PaymentType.DEPOSIT;
        models.payment.Payment payment84 = new models.payment.Payment(uUID58, booking59, (double) (byte) 100, paymentMethod77, paymentStatus82, paymentType83);
        models.booking.Booking booking85 = payment84.getBooking();
        double double86 = payment84.getAmount();
        double double87 = payment84.getAmount();
        models.payment.Payment.PaymentType paymentType88 = payment84.getPaymentType();
        payment6.setPaymentType(paymentType88);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean90 = payment6.processPayment();
            org.junit.Assert.fail("Expected exception of type models.ParkingSystemException; message: Cannot process payment of a payment that is not pending.");
        } catch (models.ParkingSystemException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + paymentStatus4 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus4.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType5 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType5.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType7 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType7.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID8);
        org.junit.Assert.assertTrue("'" + paymentType9 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType9.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(paymentMethod11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(booking13);
        org.junit.Assert.assertTrue("'" + paymentStatus18 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus18.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType19 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType19.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType21 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType21.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID23);
        org.junit.Assert.assertTrue("'" + paymentStatus34 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus34.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType35 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType35.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType37 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType37.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID38);
        org.junit.Assert.assertTrue("'" + paymentType39 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType39.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod43);
        org.junit.Assert.assertTrue("'" + paymentStatus45 + "' != '" + models.payment.Payment.PaymentStatus.PENDING + "'", paymentStatus45.equals(models.payment.Payment.PaymentStatus.PENDING));
        org.junit.Assert.assertTrue("'" + paymentStatus48 + "' != '" + models.payment.Payment.PaymentStatus.PENDING + "'", paymentStatus48.equals(models.payment.Payment.PaymentStatus.PENDING));
        org.junit.Assert.assertTrue("'" + paymentType49 + "' != '" + models.payment.Payment.PaymentType.DEPOSIT + "'", paymentType49.equals(models.payment.Payment.PaymentType.DEPOSIT));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(booking51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 100.0d + "'", double52 == 100.0d);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod54);
        org.junit.Assert.assertTrue("'" + paymentStatus57 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus57.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentStatus68 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus68.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType69 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType69.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType71 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType71.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID72);
        org.junit.Assert.assertTrue("'" + paymentType73 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType73.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod77);
        org.junit.Assert.assertTrue("'" + paymentStatus79 + "' != '" + models.payment.Payment.PaymentStatus.PENDING + "'", paymentStatus79.equals(models.payment.Payment.PaymentStatus.PENDING));
        org.junit.Assert.assertTrue("'" + paymentStatus82 + "' != '" + models.payment.Payment.PaymentStatus.PENDING + "'", paymentStatus82.equals(models.payment.Payment.PaymentStatus.PENDING));
        org.junit.Assert.assertTrue("'" + paymentType83 + "' != '" + models.payment.Payment.PaymentType.DEPOSIT + "'", paymentType83.equals(models.payment.Payment.PaymentType.DEPOSIT));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(booking85);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 100.0d + "'", double86 == 100.0d);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 100.0d + "'", double87 == 100.0d);
        org.junit.Assert.assertTrue("'" + paymentType88 + "' != '" + models.payment.Payment.PaymentType.DEPOSIT + "'", paymentType88.equals(models.payment.Payment.PaymentType.DEPOSIT));
    }

    @Test
    public void test198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test198");
        java.util.UUID uUID0 = null;
        models.booking.Booking booking1 = null;
        java.util.UUID uUID3 = null;
        models.booking.Booking booking4 = null;
        models.payment.PaymentMethod paymentMethod6 = null;
        models.payment.Payment.PaymentStatus paymentStatus7 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType8 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment9 = new models.payment.Payment(uUID3, booking4, 100.0d, paymentMethod6, paymentStatus7, paymentType8);
        java.util.UUID uUID10 = null;
        models.booking.Booking booking11 = null;
        java.util.UUID uUID13 = null;
        models.booking.Booking booking14 = null;
        models.payment.PaymentMethod paymentMethod16 = null;
        models.payment.Payment.PaymentStatus paymentStatus17 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType18 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment19 = new models.payment.Payment(uUID13, booking14, 100.0d, paymentMethod16, paymentStatus17, paymentType18);
        models.payment.Payment.PaymentType paymentType20 = payment19.getPaymentType();
        java.util.UUID uUID21 = payment19.getBookingID();
        models.payment.Payment.PaymentType paymentType22 = models.payment.Payment.PaymentType.FINAL;
        payment19.setPaymentType(paymentType22);
        java.util.UUID uUID24 = payment19.getPaymentID();
        models.payment.PaymentMethod paymentMethod26 = models.payment.Payment.generateMethod("");
        payment19.setPaymentMethod(paymentMethod26);
        models.payment.Payment.PaymentStatus paymentStatus28 = models.payment.Payment.PaymentStatus.PENDING;
        models.payment.Payment.PaymentType paymentType29 = null;
        models.payment.Payment payment30 = new models.payment.Payment(uUID10, booking11, (double) (byte) 0, paymentMethod26, paymentStatus28, paymentType29);
        payment9.setPaymentMethod(paymentMethod26);
        java.util.UUID uUID32 = null;
        models.booking.Booking booking33 = null;
        java.util.UUID uUID35 = null;
        models.booking.Booking booking36 = null;
        models.payment.PaymentMethod paymentMethod38 = null;
        models.payment.Payment.PaymentStatus paymentStatus39 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType40 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment41 = new models.payment.Payment(uUID35, booking36, 100.0d, paymentMethod38, paymentStatus39, paymentType40);
        models.payment.Payment.PaymentType paymentType42 = payment41.getPaymentType();
        java.util.UUID uUID43 = payment41.getBookingID();
        models.payment.Payment.PaymentType paymentType44 = models.payment.Payment.PaymentType.FINAL;
        payment41.setPaymentType(paymentType44);
        java.util.UUID uUID46 = payment41.getPaymentID();
        models.payment.PaymentMethod paymentMethod48 = models.payment.Payment.generateMethod("");
        payment41.setPaymentMethod(paymentMethod48);
        models.payment.Payment.PaymentStatus paymentStatus50 = models.payment.Payment.PaymentStatus.PENDING;
        models.payment.Payment.PaymentType paymentType51 = null;
        models.payment.Payment payment52 = new models.payment.Payment(uUID32, booking33, (double) (byte) 0, paymentMethod48, paymentStatus50, paymentType51);
        models.payment.Payment.PaymentStatus paymentStatus53 = payment52.getStatus();
        java.util.UUID uUID54 = null;
        models.booking.Booking booking55 = null;
        models.payment.PaymentMethod paymentMethod57 = null;
        models.payment.Payment.PaymentStatus paymentStatus58 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType59 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment60 = new models.payment.Payment(uUID54, booking55, 100.0d, paymentMethod57, paymentStatus58, paymentType59);
        models.payment.Payment.PaymentType paymentType61 = payment60.getPaymentType();
        java.util.UUID uUID62 = payment60.getBookingID();
        models.payment.Payment.PaymentType paymentType63 = models.payment.Payment.PaymentType.FINAL;
        payment60.setPaymentType(paymentType63);
        models.payment.Payment payment65 = new models.payment.Payment(uUID0, booking1, (double) 'a', paymentMethod26, paymentStatus53, paymentType63);
        double double66 = payment65.getAmount();
        double double67 = payment65.getAmount();
        java.util.UUID uUID68 = payment65.getBookingID();
        models.payment.PaymentMethod paymentMethod69 = payment65.getMethod();
        models.booking.Booking booking70 = payment65.getBooking();
        org.junit.Assert.assertTrue("'" + paymentStatus7 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus7.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType8 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType8.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentStatus17 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus17.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType18 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType18.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType20 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType20.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID21);
        org.junit.Assert.assertTrue("'" + paymentType22 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType22.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod26);
        org.junit.Assert.assertTrue("'" + paymentStatus28 + "' != '" + models.payment.Payment.PaymentStatus.PENDING + "'", paymentStatus28.equals(models.payment.Payment.PaymentStatus.PENDING));
        org.junit.Assert.assertTrue("'" + paymentStatus39 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus39.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType40 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType40.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType42 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType42.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID43);
        org.junit.Assert.assertTrue("'" + paymentType44 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType44.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod48);
        org.junit.Assert.assertTrue("'" + paymentStatus50 + "' != '" + models.payment.Payment.PaymentStatus.PENDING + "'", paymentStatus50.equals(models.payment.Payment.PaymentStatus.PENDING));
        org.junit.Assert.assertTrue("'" + paymentStatus53 + "' != '" + models.payment.Payment.PaymentStatus.PENDING + "'", paymentStatus53.equals(models.payment.Payment.PaymentStatus.PENDING));
        org.junit.Assert.assertTrue("'" + paymentStatus58 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus58.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType59 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType59.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType61 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType61.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID62);
        org.junit.Assert.assertTrue("'" + paymentType63 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType63.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 97.0d + "'", double66 == 97.0d);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 97.0d + "'", double67 == 97.0d);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(booking70);
    }

    @Test
    public void test199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test199");
        models.booking.Booking booking1 = null;
        models.booking.Booking booking3 = null;
        java.util.UUID uUID4 = null;
        models.booking.Booking booking5 = null;
        models.payment.PaymentMethod paymentMethod7 = null;
        models.payment.Payment.PaymentStatus paymentStatus8 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType9 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment10 = new models.payment.Payment(uUID4, booking5, 100.0d, paymentMethod7, paymentStatus8, paymentType9);
        models.payment.Payment.PaymentType paymentType11 = payment10.getPaymentType();
        java.util.UUID uUID12 = payment10.getBookingID();
        models.payment.Payment.PaymentType paymentType13 = models.payment.Payment.PaymentType.FINAL;
        payment10.setPaymentType(paymentType13);
        java.util.UUID uUID15 = payment10.getPaymentID();
        models.payment.PaymentMethod paymentMethod17 = models.payment.Payment.generateMethod("");
        payment10.setPaymentMethod(paymentMethod17);
        java.util.UUID uUID19 = null;
        models.booking.Booking booking20 = null;
        models.payment.PaymentMethod paymentMethod22 = null;
        models.payment.Payment.PaymentStatus paymentStatus23 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType24 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment25 = new models.payment.Payment(uUID19, booking20, 100.0d, paymentMethod22, paymentStatus23, paymentType24);
        models.payment.Payment.PaymentType paymentType26 = payment25.getPaymentType();
        models.payment.Payment.PaymentType paymentType27 = payment25.getPaymentType();
        models.payment.Payment payment28 = new models.payment.Payment((double) 10, booking3, paymentMethod17, paymentType27);
        java.util.UUID uUID29 = null;
        models.booking.Booking booking30 = null;
        models.payment.PaymentMethod paymentMethod32 = null;
        models.payment.Payment.PaymentStatus paymentStatus33 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType34 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment35 = new models.payment.Payment(uUID29, booking30, 100.0d, paymentMethod32, paymentStatus33, paymentType34);
        models.payment.Payment payment36 = new models.payment.Payment((double) '4', booking1, paymentMethod17, paymentType34);
        java.util.UUID uUID37 = payment36.getBookingID();
        java.util.UUID uUID38 = payment36.getPaymentID();
        models.payment.Payment.PaymentStatus paymentStatus39 = payment36.getStatus();
        models.payment.PaymentMethod paymentMethod40 = payment36.getMethod();
        java.util.UUID uUID41 = payment36.getBookingID();
        org.junit.Assert.assertTrue("'" + paymentStatus8 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus8.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType9 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType9.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType11 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType11.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID12);
        org.junit.Assert.assertTrue("'" + paymentType13 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType13.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod17);
        org.junit.Assert.assertTrue("'" + paymentStatus23 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus23.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType24 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType24.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType26 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType26.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType27 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType27.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentStatus33 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus33.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType34 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType34.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(uUID38);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(uUID38.toString(), "6e68156f-7c03-40df-8343-2c9585bd10a7");
        org.junit.Assert.assertTrue("'" + paymentStatus39 + "' != '" + models.payment.Payment.PaymentStatus.PENDING + "'", paymentStatus39.equals(models.payment.Payment.PaymentStatus.PENDING));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID41);
    }

    @Test
    public void test200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test200");
        models.booking.Booking booking1 = null;
        java.util.UUID uUID2 = null;
        models.booking.Booking booking3 = null;
        models.payment.PaymentMethod paymentMethod5 = null;
        models.payment.Payment.PaymentStatus paymentStatus6 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType7 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment8 = new models.payment.Payment(uUID2, booking3, 100.0d, paymentMethod5, paymentStatus6, paymentType7);
        models.payment.Payment.PaymentType paymentType9 = payment8.getPaymentType();
        java.util.UUID uUID10 = payment8.getBookingID();
        models.payment.Payment.PaymentType paymentType11 = models.payment.Payment.PaymentType.FINAL;
        payment8.setPaymentType(paymentType11);
        java.util.UUID uUID13 = payment8.getPaymentID();
        models.payment.PaymentMethod paymentMethod15 = models.payment.Payment.generateMethod("");
        payment8.setPaymentMethod(paymentMethod15);
        java.util.UUID uUID17 = null;
        models.booking.Booking booking18 = null;
        models.payment.PaymentMethod paymentMethod20 = null;
        models.payment.Payment.PaymentStatus paymentStatus21 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType22 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment23 = new models.payment.Payment(uUID17, booking18, (-1.0d), paymentMethod20, paymentStatus21, paymentType22);
        models.payment.Payment payment24 = new models.payment.Payment(0.0d, booking1, paymentMethod15, paymentType22);
        java.util.UUID uUID25 = payment24.getPaymentID();
        models.booking.Booking booking26 = null;
        java.util.UUID uUID28 = null;
        models.booking.Booking booking29 = null;
        models.payment.PaymentMethod paymentMethod31 = null;
        models.payment.Payment.PaymentStatus paymentStatus32 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType33 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment34 = new models.payment.Payment(uUID28, booking29, 100.0d, paymentMethod31, paymentStatus32, paymentType33);
        models.payment.Payment.PaymentType paymentType35 = payment34.getPaymentType();
        java.util.UUID uUID36 = payment34.getBookingID();
        java.util.UUID uUID37 = payment34.getPaymentID();
        java.util.UUID uUID38 = null;
        models.booking.Booking booking39 = null;
        java.util.UUID uUID41 = null;
        models.booking.Booking booking42 = null;
        java.util.UUID uUID44 = null;
        models.booking.Booking booking45 = null;
        models.payment.PaymentMethod paymentMethod47 = null;
        models.payment.Payment.PaymentStatus paymentStatus48 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType49 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment50 = new models.payment.Payment(uUID44, booking45, 100.0d, paymentMethod47, paymentStatus48, paymentType49);
        models.payment.Payment.PaymentType paymentType51 = payment50.getPaymentType();
        java.util.UUID uUID52 = payment50.getBookingID();
        models.payment.Payment.PaymentType paymentType53 = models.payment.Payment.PaymentType.FINAL;
        payment50.setPaymentType(paymentType53);
        java.util.UUID uUID55 = payment50.getPaymentID();
        models.payment.PaymentMethod paymentMethod57 = models.payment.Payment.generateMethod("");
        payment50.setPaymentMethod(paymentMethod57);
        models.payment.Payment.PaymentStatus paymentStatus59 = models.payment.Payment.PaymentStatus.PENDING;
        models.payment.Payment.PaymentType paymentType60 = null;
        models.payment.Payment payment61 = new models.payment.Payment(uUID41, booking42, (double) (byte) 0, paymentMethod57, paymentStatus59, paymentType60);
        models.payment.Payment.PaymentStatus paymentStatus62 = models.payment.Payment.PaymentStatus.PENDING;
        models.payment.Payment.PaymentType paymentType63 = models.payment.Payment.PaymentType.DEPOSIT;
        models.payment.Payment payment64 = new models.payment.Payment(uUID38, booking39, (double) (byte) 100, paymentMethod57, paymentStatus62, paymentType63);
        models.booking.Booking booking65 = payment64.getBooking();
        double double66 = payment64.getAmount();
        java.util.UUID uUID67 = payment64.getBookingID();
        models.payment.PaymentMethod paymentMethod68 = payment64.getMethod();
        payment34.setPaymentMethod(paymentMethod68);
        java.util.UUID uUID70 = null;
        models.booking.Booking booking71 = null;
        models.payment.PaymentMethod paymentMethod73 = null;
        models.payment.Payment.PaymentStatus paymentStatus74 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType75 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment76 = new models.payment.Payment(uUID70, booking71, 100.0d, paymentMethod73, paymentStatus74, paymentType75);
        models.payment.Payment.PaymentType paymentType77 = payment76.getPaymentType();
        java.util.UUID uUID78 = payment76.getBookingID();
        models.payment.Payment.PaymentType paymentType79 = models.payment.Payment.PaymentType.FINAL;
        payment76.setPaymentType(paymentType79);
        java.util.UUID uUID81 = payment76.getPaymentID();
        models.payment.PaymentMethod paymentMethod83 = models.payment.Payment.generateMethod("");
        payment76.setPaymentMethod(paymentMethod83);
        models.payment.Payment.PaymentStatus paymentStatus85 = payment76.getStatus();
        models.payment.Payment.PaymentType paymentType86 = null;
        models.payment.Payment payment87 = new models.payment.Payment(uUID25, booking26, (double) (byte) 10, paymentMethod68, paymentStatus85, paymentType86);
        org.junit.Assert.assertTrue("'" + paymentStatus6 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus6.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType7 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType7.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType9 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType9.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID10);
        org.junit.Assert.assertTrue("'" + paymentType11 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType11.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod15);
        org.junit.Assert.assertTrue("'" + paymentStatus21 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus21.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType22 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType22.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(uUID25);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(uUID25.toString(), "c49955b5-c293-4859-af73-17cefef02e6d");
        org.junit.Assert.assertTrue("'" + paymentStatus32 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus32.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType33 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType33.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType35 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType35.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID37);
        org.junit.Assert.assertTrue("'" + paymentStatus48 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus48.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType49 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType49.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType51 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType51.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID52);
        org.junit.Assert.assertTrue("'" + paymentType53 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType53.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod57);
        org.junit.Assert.assertTrue("'" + paymentStatus59 + "' != '" + models.payment.Payment.PaymentStatus.PENDING + "'", paymentStatus59.equals(models.payment.Payment.PaymentStatus.PENDING));
        org.junit.Assert.assertTrue("'" + paymentStatus62 + "' != '" + models.payment.Payment.PaymentStatus.PENDING + "'", paymentStatus62.equals(models.payment.Payment.PaymentStatus.PENDING));
        org.junit.Assert.assertTrue("'" + paymentType63 + "' != '" + models.payment.Payment.PaymentType.DEPOSIT + "'", paymentType63.equals(models.payment.Payment.PaymentType.DEPOSIT));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(booking65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 100.0d + "'", double66 == 100.0d);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod68);
        org.junit.Assert.assertTrue("'" + paymentStatus74 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus74.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType75 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType75.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType77 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType77.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID78);
        org.junit.Assert.assertTrue("'" + paymentType79 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType79.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod83);
        org.junit.Assert.assertTrue("'" + paymentStatus85 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus85.equals(models.payment.Payment.PaymentStatus.FAILED));
    }

    @Test
    public void test201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test201");
        models.booking.Booking booking1 = null;
        models.booking.Booking booking3 = null;
        java.util.UUID uUID4 = null;
        models.booking.Booking booking5 = null;
        java.util.UUID uUID7 = null;
        models.booking.Booking booking8 = null;
        models.payment.PaymentMethod paymentMethod10 = null;
        models.payment.Payment.PaymentStatus paymentStatus11 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType12 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment13 = new models.payment.Payment(uUID7, booking8, 100.0d, paymentMethod10, paymentStatus11, paymentType12);
        models.payment.Payment.PaymentType paymentType14 = payment13.getPaymentType();
        java.util.UUID uUID15 = payment13.getBookingID();
        models.payment.Payment.PaymentType paymentType16 = models.payment.Payment.PaymentType.FINAL;
        payment13.setPaymentType(paymentType16);
        java.util.UUID uUID18 = payment13.getPaymentID();
        models.payment.PaymentMethod paymentMethod20 = models.payment.Payment.generateMethod("");
        payment13.setPaymentMethod(paymentMethod20);
        models.payment.Payment.PaymentStatus paymentStatus22 = models.payment.Payment.PaymentStatus.PENDING;
        models.payment.Payment.PaymentType paymentType23 = null;
        models.payment.Payment payment24 = new models.payment.Payment(uUID4, booking5, (double) (byte) 0, paymentMethod20, paymentStatus22, paymentType23);
        models.payment.Payment.PaymentStatus paymentStatus25 = payment24.getStatus();
        boolean boolean26 = payment24.processPayment();
        models.payment.PaymentMethod paymentMethod27 = payment24.getMethod();
        java.util.UUID uUID28 = null;
        models.booking.Booking booking29 = null;
        models.payment.PaymentMethod paymentMethod31 = null;
        models.payment.Payment.PaymentStatus paymentStatus32 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType33 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment34 = new models.payment.Payment(uUID28, booking29, 100.0d, paymentMethod31, paymentStatus32, paymentType33);
        models.payment.Payment payment35 = new models.payment.Payment((double) 100, booking3, paymentMethod27, paymentType33);
        java.util.UUID uUID36 = null;
        models.booking.Booking booking37 = null;
        models.payment.PaymentMethod paymentMethod39 = null;
        models.payment.Payment.PaymentStatus paymentStatus40 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType41 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment42 = new models.payment.Payment(uUID36, booking37, 100.0d, paymentMethod39, paymentStatus40, paymentType41);
        models.payment.Payment payment43 = new models.payment.Payment((double) 100.0f, booking1, paymentMethod27, paymentType41);
        models.booking.Booking booking45 = null;
        models.booking.Booking booking47 = null;
        java.util.UUID uUID48 = null;
        models.booking.Booking booking49 = null;
        java.util.UUID uUID51 = null;
        models.booking.Booking booking52 = null;
        models.payment.PaymentMethod paymentMethod54 = null;
        models.payment.Payment.PaymentStatus paymentStatus55 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType56 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment57 = new models.payment.Payment(uUID51, booking52, 100.0d, paymentMethod54, paymentStatus55, paymentType56);
        models.payment.Payment.PaymentType paymentType58 = payment57.getPaymentType();
        java.util.UUID uUID59 = payment57.getBookingID();
        models.payment.Payment.PaymentType paymentType60 = models.payment.Payment.PaymentType.FINAL;
        payment57.setPaymentType(paymentType60);
        java.util.UUID uUID62 = payment57.getPaymentID();
        models.payment.PaymentMethod paymentMethod64 = models.payment.Payment.generateMethod("");
        payment57.setPaymentMethod(paymentMethod64);
        models.payment.Payment.PaymentStatus paymentStatus66 = models.payment.Payment.PaymentStatus.PENDING;
        models.payment.Payment.PaymentType paymentType67 = null;
        models.payment.Payment payment68 = new models.payment.Payment(uUID48, booking49, (double) (byte) 0, paymentMethod64, paymentStatus66, paymentType67);
        models.payment.Payment.PaymentStatus paymentStatus69 = payment68.getStatus();
        boolean boolean70 = payment68.processPayment();
        models.payment.PaymentMethod paymentMethod71 = payment68.getMethod();
        java.util.UUID uUID72 = null;
        models.booking.Booking booking73 = null;
        models.payment.PaymentMethod paymentMethod75 = null;
        models.payment.Payment.PaymentStatus paymentStatus76 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType77 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment78 = new models.payment.Payment(uUID72, booking73, 100.0d, paymentMethod75, paymentStatus76, paymentType77);
        models.payment.Payment payment79 = new models.payment.Payment((double) 100, booking47, paymentMethod71, paymentType77);
        java.util.UUID uUID80 = null;
        models.booking.Booking booking81 = null;
        models.payment.PaymentMethod paymentMethod83 = null;
        models.payment.Payment.PaymentStatus paymentStatus84 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType85 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment86 = new models.payment.Payment(uUID80, booking81, 100.0d, paymentMethod83, paymentStatus84, paymentType85);
        models.payment.Payment payment87 = new models.payment.Payment((double) 100.0f, booking45, paymentMethod71, paymentType85);
        payment43.setPaymentMethod(paymentMethod71);
        org.junit.Assert.assertTrue("'" + paymentStatus11 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus11.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType12 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType12.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType14 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType14.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID15);
        org.junit.Assert.assertTrue("'" + paymentType16 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType16.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod20);
        org.junit.Assert.assertTrue("'" + paymentStatus22 + "' != '" + models.payment.Payment.PaymentStatus.PENDING + "'", paymentStatus22.equals(models.payment.Payment.PaymentStatus.PENDING));
        org.junit.Assert.assertTrue("'" + paymentStatus25 + "' != '" + models.payment.Payment.PaymentStatus.PENDING + "'", paymentStatus25.equals(models.payment.Payment.PaymentStatus.PENDING));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod27);
        org.junit.Assert.assertTrue("'" + paymentStatus32 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus32.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType33 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType33.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentStatus40 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus40.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType41 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType41.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentStatus55 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus55.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType56 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType56.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType58 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType58.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID59);
        org.junit.Assert.assertTrue("'" + paymentType60 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType60.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod64);
        org.junit.Assert.assertTrue("'" + paymentStatus66 + "' != '" + models.payment.Payment.PaymentStatus.PENDING + "'", paymentStatus66.equals(models.payment.Payment.PaymentStatus.PENDING));
        org.junit.Assert.assertTrue("'" + paymentStatus69 + "' != '" + models.payment.Payment.PaymentStatus.PENDING + "'", paymentStatus69.equals(models.payment.Payment.PaymentStatus.PENDING));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod71);
        org.junit.Assert.assertTrue("'" + paymentStatus76 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus76.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType77 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType77.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentStatus84 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus84.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType85 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType85.equals(models.payment.Payment.PaymentType.FINAL));
    }

    @Test
    public void test202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test202");
        models.booking.Booking booking1 = null;
        models.booking.Booking booking3 = null;
        models.payment.PaymentMethod paymentMethod5 = models.payment.Payment.generateMethod("");
        models.payment.Payment.PaymentType paymentType6 = null;
        models.payment.Payment payment7 = new models.payment.Payment(1.0d, booking3, paymentMethod5, paymentType6);
        models.payment.Payment.PaymentType paymentType8 = null;
        models.payment.Payment payment9 = new models.payment.Payment(97.0d, booking1, paymentMethod5, paymentType8);
        double double10 = payment9.getAmount();
        models.payment.Payment.PaymentType paymentType11 = payment9.getPaymentType();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 97.0d + "'", double10 == 97.0d);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(paymentType11);
    }

    @Test
    public void test203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test203");
        models.booking.Booking booking1 = null;
        models.booking.Booking booking3 = null;
        java.util.UUID uUID4 = null;
        models.booking.Booking booking5 = null;
        models.payment.PaymentMethod paymentMethod7 = null;
        models.payment.Payment.PaymentStatus paymentStatus8 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType9 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment10 = new models.payment.Payment(uUID4, booking5, 100.0d, paymentMethod7, paymentStatus8, paymentType9);
        models.payment.Payment.PaymentType paymentType11 = payment10.getPaymentType();
        java.util.UUID uUID12 = payment10.getBookingID();
        models.payment.Payment.PaymentType paymentType13 = models.payment.Payment.PaymentType.FINAL;
        payment10.setPaymentType(paymentType13);
        java.util.UUID uUID15 = payment10.getPaymentID();
        models.payment.PaymentMethod paymentMethod17 = models.payment.Payment.generateMethod("");
        payment10.setPaymentMethod(paymentMethod17);
        java.util.UUID uUID19 = null;
        models.booking.Booking booking20 = null;
        models.payment.PaymentMethod paymentMethod22 = null;
        models.payment.Payment.PaymentStatus paymentStatus23 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType24 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment25 = new models.payment.Payment(uUID19, booking20, 100.0d, paymentMethod22, paymentStatus23, paymentType24);
        models.payment.Payment.PaymentType paymentType26 = payment25.getPaymentType();
        models.payment.Payment.PaymentType paymentType27 = payment25.getPaymentType();
        models.payment.Payment payment28 = new models.payment.Payment((double) 10, booking3, paymentMethod17, paymentType27);
        java.util.UUID uUID29 = null;
        models.booking.Booking booking30 = null;
        models.payment.PaymentMethod paymentMethod32 = null;
        models.payment.Payment.PaymentStatus paymentStatus33 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType34 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment35 = new models.payment.Payment(uUID29, booking30, 100.0d, paymentMethod32, paymentStatus33, paymentType34);
        models.payment.Payment.PaymentType paymentType36 = payment35.getPaymentType();
        java.util.UUID uUID37 = payment35.getBookingID();
        models.payment.Payment.PaymentType paymentType38 = models.payment.Payment.PaymentType.FINAL;
        payment35.setPaymentType(paymentType38);
        models.payment.PaymentMethod paymentMethod40 = payment35.getMethod();
        models.payment.Payment.PaymentType paymentType41 = payment35.getPaymentType();
        models.payment.Payment payment42 = new models.payment.Payment((double) 0, booking1, paymentMethod17, paymentType41);
        java.util.UUID uUID43 = payment42.getBookingID();
        boolean boolean44 = payment42.processPayment();
        models.payment.PaymentMethod paymentMethod45 = payment42.getMethod();
        org.junit.Assert.assertTrue("'" + paymentStatus8 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus8.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType9 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType9.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType11 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType11.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID12);
        org.junit.Assert.assertTrue("'" + paymentType13 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType13.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod17);
        org.junit.Assert.assertTrue("'" + paymentStatus23 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus23.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType24 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType24.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType26 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType26.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType27 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType27.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentStatus33 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus33.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType34 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType34.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType36 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType36.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID37);
        org.junit.Assert.assertTrue("'" + paymentType38 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType38.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(paymentMethod40);
        org.junit.Assert.assertTrue("'" + paymentType41 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType41.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod45);
    }

    @Test
    public void test204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test204");
        models.booking.Booking booking1 = null;
        java.util.UUID uUID2 = null;
        models.booking.Booking booking3 = null;
        java.util.UUID uUID5 = null;
        models.booking.Booking booking6 = null;
        models.payment.PaymentMethod paymentMethod8 = null;
        models.payment.Payment.PaymentStatus paymentStatus9 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType10 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment11 = new models.payment.Payment(uUID5, booking6, 100.0d, paymentMethod8, paymentStatus9, paymentType10);
        models.payment.Payment.PaymentType paymentType12 = payment11.getPaymentType();
        java.util.UUID uUID13 = payment11.getBookingID();
        models.payment.Payment.PaymentType paymentType14 = models.payment.Payment.PaymentType.FINAL;
        payment11.setPaymentType(paymentType14);
        java.util.UUID uUID16 = payment11.getPaymentID();
        models.payment.PaymentMethod paymentMethod18 = models.payment.Payment.generateMethod("");
        payment11.setPaymentMethod(paymentMethod18);
        java.util.UUID uUID20 = null;
        models.booking.Booking booking21 = null;
        models.payment.PaymentMethod paymentMethod23 = null;
        models.payment.Payment.PaymentStatus paymentStatus24 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType25 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment26 = new models.payment.Payment(uUID20, booking21, 100.0d, paymentMethod23, paymentStatus24, paymentType25);
        models.payment.Payment.PaymentType paymentType27 = payment26.getPaymentType();
        java.util.UUID uUID28 = payment26.getBookingID();
        models.payment.Payment.PaymentType paymentType29 = models.payment.Payment.PaymentType.FINAL;
        payment26.setPaymentType(paymentType29);
        models.payment.PaymentMethod paymentMethod31 = payment26.getMethod();
        models.payment.Payment.PaymentType paymentType32 = payment26.getPaymentType();
        models.payment.Payment.PaymentStatus paymentStatus33 = payment26.getStatus();
        models.payment.Payment.PaymentType paymentType34 = models.payment.Payment.PaymentType.REFUND;
        models.payment.Payment payment35 = new models.payment.Payment(uUID2, booking3, (double) '#', paymentMethod18, paymentStatus33, paymentType34);
        java.util.UUID uUID36 = null;
        models.booking.Booking booking37 = null;
        java.util.UUID uUID39 = null;
        models.booking.Booking booking40 = null;
        java.util.UUID uUID42 = null;
        models.booking.Booking booking43 = null;
        models.payment.PaymentMethod paymentMethod45 = null;
        models.payment.Payment.PaymentStatus paymentStatus46 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType47 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment48 = new models.payment.Payment(uUID42, booking43, 100.0d, paymentMethod45, paymentStatus46, paymentType47);
        models.payment.Payment.PaymentType paymentType49 = payment48.getPaymentType();
        java.util.UUID uUID50 = payment48.getBookingID();
        models.payment.Payment.PaymentType paymentType51 = models.payment.Payment.PaymentType.FINAL;
        payment48.setPaymentType(paymentType51);
        java.util.UUID uUID53 = payment48.getPaymentID();
        models.payment.PaymentMethod paymentMethod55 = models.payment.Payment.generateMethod("");
        payment48.setPaymentMethod(paymentMethod55);
        models.payment.Payment.PaymentStatus paymentStatus57 = models.payment.Payment.PaymentStatus.PENDING;
        models.payment.Payment.PaymentType paymentType58 = null;
        models.payment.Payment payment59 = new models.payment.Payment(uUID39, booking40, (double) (byte) 0, paymentMethod55, paymentStatus57, paymentType58);
        models.payment.Payment.PaymentStatus paymentStatus60 = models.payment.Payment.PaymentStatus.PENDING;
        models.payment.Payment.PaymentType paymentType61 = models.payment.Payment.PaymentType.DEPOSIT;
        models.payment.Payment payment62 = new models.payment.Payment(uUID36, booking37, (double) (byte) 100, paymentMethod55, paymentStatus60, paymentType61);
        models.payment.Payment payment63 = new models.payment.Payment((double) 10L, booking1, paymentMethod18, paymentType61);
        models.payment.Payment.PaymentType paymentType64 = payment63.getPaymentType();
        models.payment.PaymentMethod paymentMethod65 = payment63.getMethod();
        double double66 = payment63.getAmount();
        models.booking.Booking booking68 = null;
        models.payment.PaymentMethod paymentMethod70 = models.payment.Payment.generateMethod("");
        models.payment.Payment.PaymentType paymentType71 = null;
        models.payment.Payment payment72 = new models.payment.Payment(1.0d, booking68, paymentMethod70, paymentType71);
        payment63.setPaymentMethod(paymentMethod70);
        org.junit.Assert.assertTrue("'" + paymentStatus9 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus9.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType10 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType10.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType12 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType12.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID13);
        org.junit.Assert.assertTrue("'" + paymentType14 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType14.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod18);
        org.junit.Assert.assertTrue("'" + paymentStatus24 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus24.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType25 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType25.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType27 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType27.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID28);
        org.junit.Assert.assertTrue("'" + paymentType29 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType29.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(paymentMethod31);
        org.junit.Assert.assertTrue("'" + paymentType32 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType32.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentStatus33 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus33.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType34 + "' != '" + models.payment.Payment.PaymentType.REFUND + "'", paymentType34.equals(models.payment.Payment.PaymentType.REFUND));
        org.junit.Assert.assertTrue("'" + paymentStatus46 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus46.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType47 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType47.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType49 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType49.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID50);
        org.junit.Assert.assertTrue("'" + paymentType51 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType51.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod55);
        org.junit.Assert.assertTrue("'" + paymentStatus57 + "' != '" + models.payment.Payment.PaymentStatus.PENDING + "'", paymentStatus57.equals(models.payment.Payment.PaymentStatus.PENDING));
        org.junit.Assert.assertTrue("'" + paymentStatus60 + "' != '" + models.payment.Payment.PaymentStatus.PENDING + "'", paymentStatus60.equals(models.payment.Payment.PaymentStatus.PENDING));
        org.junit.Assert.assertTrue("'" + paymentType61 + "' != '" + models.payment.Payment.PaymentType.DEPOSIT + "'", paymentType61.equals(models.payment.Payment.PaymentType.DEPOSIT));
        org.junit.Assert.assertTrue("'" + paymentType64 + "' != '" + models.payment.Payment.PaymentType.DEPOSIT + "'", paymentType64.equals(models.payment.Payment.PaymentType.DEPOSIT));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 10.0d + "'", double66 == 10.0d);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod70);
    }

    @Test
    public void test205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test205");
        java.util.UUID uUID0 = null;
        models.booking.Booking booking1 = null;
        java.util.UUID uUID3 = null;
        models.booking.Booking booking4 = null;
        models.payment.PaymentMethod paymentMethod6 = null;
        models.payment.Payment.PaymentStatus paymentStatus7 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType8 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment9 = new models.payment.Payment(uUID3, booking4, 100.0d, paymentMethod6, paymentStatus7, paymentType8);
        java.util.UUID uUID10 = null;
        models.booking.Booking booking11 = null;
        java.util.UUID uUID13 = null;
        models.booking.Booking booking14 = null;
        models.payment.PaymentMethod paymentMethod16 = null;
        models.payment.Payment.PaymentStatus paymentStatus17 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType18 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment19 = new models.payment.Payment(uUID13, booking14, 100.0d, paymentMethod16, paymentStatus17, paymentType18);
        models.payment.Payment.PaymentType paymentType20 = payment19.getPaymentType();
        java.util.UUID uUID21 = payment19.getBookingID();
        models.payment.Payment.PaymentType paymentType22 = models.payment.Payment.PaymentType.FINAL;
        payment19.setPaymentType(paymentType22);
        java.util.UUID uUID24 = payment19.getPaymentID();
        models.payment.PaymentMethod paymentMethod26 = models.payment.Payment.generateMethod("");
        payment19.setPaymentMethod(paymentMethod26);
        models.payment.Payment.PaymentStatus paymentStatus28 = models.payment.Payment.PaymentStatus.PENDING;
        models.payment.Payment.PaymentType paymentType29 = null;
        models.payment.Payment payment30 = new models.payment.Payment(uUID10, booking11, (double) (byte) 0, paymentMethod26, paymentStatus28, paymentType29);
        payment9.setPaymentMethod(paymentMethod26);
        java.util.UUID uUID32 = null;
        models.booking.Booking booking33 = null;
        java.util.UUID uUID35 = null;
        models.booking.Booking booking36 = null;
        models.payment.PaymentMethod paymentMethod38 = null;
        models.payment.Payment.PaymentStatus paymentStatus39 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType40 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment41 = new models.payment.Payment(uUID35, booking36, 100.0d, paymentMethod38, paymentStatus39, paymentType40);
        models.payment.Payment.PaymentType paymentType42 = payment41.getPaymentType();
        java.util.UUID uUID43 = payment41.getBookingID();
        models.payment.Payment.PaymentType paymentType44 = models.payment.Payment.PaymentType.FINAL;
        payment41.setPaymentType(paymentType44);
        java.util.UUID uUID46 = payment41.getPaymentID();
        models.payment.PaymentMethod paymentMethod48 = models.payment.Payment.generateMethod("");
        payment41.setPaymentMethod(paymentMethod48);
        models.payment.Payment.PaymentStatus paymentStatus50 = models.payment.Payment.PaymentStatus.PENDING;
        models.payment.Payment.PaymentType paymentType51 = null;
        models.payment.Payment payment52 = new models.payment.Payment(uUID32, booking33, (double) (byte) 0, paymentMethod48, paymentStatus50, paymentType51);
        models.payment.Payment.PaymentStatus paymentStatus53 = payment52.getStatus();
        java.util.UUID uUID54 = null;
        models.booking.Booking booking55 = null;
        models.payment.PaymentMethod paymentMethod57 = null;
        models.payment.Payment.PaymentStatus paymentStatus58 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType59 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment60 = new models.payment.Payment(uUID54, booking55, 100.0d, paymentMethod57, paymentStatus58, paymentType59);
        models.payment.Payment.PaymentType paymentType61 = payment60.getPaymentType();
        java.util.UUID uUID62 = payment60.getBookingID();
        models.payment.Payment.PaymentType paymentType63 = models.payment.Payment.PaymentType.FINAL;
        payment60.setPaymentType(paymentType63);
        models.payment.Payment payment65 = new models.payment.Payment(uUID0, booking1, (double) 'a', paymentMethod26, paymentStatus53, paymentType63);
        double double66 = payment65.getAmount();
        double double67 = payment65.getAmount();
        java.util.UUID uUID68 = payment65.getBookingID();
        models.payment.Payment.PaymentStatus paymentStatus69 = payment65.getStatus();
        org.junit.Assert.assertTrue("'" + paymentStatus7 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus7.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType8 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType8.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentStatus17 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus17.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType18 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType18.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType20 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType20.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID21);
        org.junit.Assert.assertTrue("'" + paymentType22 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType22.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod26);
        org.junit.Assert.assertTrue("'" + paymentStatus28 + "' != '" + models.payment.Payment.PaymentStatus.PENDING + "'", paymentStatus28.equals(models.payment.Payment.PaymentStatus.PENDING));
        org.junit.Assert.assertTrue("'" + paymentStatus39 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus39.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType40 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType40.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType42 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType42.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID43);
        org.junit.Assert.assertTrue("'" + paymentType44 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType44.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod48);
        org.junit.Assert.assertTrue("'" + paymentStatus50 + "' != '" + models.payment.Payment.PaymentStatus.PENDING + "'", paymentStatus50.equals(models.payment.Payment.PaymentStatus.PENDING));
        org.junit.Assert.assertTrue("'" + paymentStatus53 + "' != '" + models.payment.Payment.PaymentStatus.PENDING + "'", paymentStatus53.equals(models.payment.Payment.PaymentStatus.PENDING));
        org.junit.Assert.assertTrue("'" + paymentStatus58 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus58.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType59 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType59.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType61 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType61.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID62);
        org.junit.Assert.assertTrue("'" + paymentType63 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType63.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 97.0d + "'", double66 == 97.0d);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 97.0d + "'", double67 == 97.0d);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID68);
        org.junit.Assert.assertTrue("'" + paymentStatus69 + "' != '" + models.payment.Payment.PaymentStatus.PENDING + "'", paymentStatus69.equals(models.payment.Payment.PaymentStatus.PENDING));
    }

    @Test
    public void test206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test206");
        models.booking.Booking booking1 = null;
        models.booking.Booking booking3 = null;
        java.util.UUID uUID4 = null;
        models.booking.Booking booking5 = null;
        models.payment.PaymentMethod paymentMethod7 = null;
        models.payment.Payment.PaymentStatus paymentStatus8 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType9 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment10 = new models.payment.Payment(uUID4, booking5, 100.0d, paymentMethod7, paymentStatus8, paymentType9);
        models.payment.Payment.PaymentType paymentType11 = payment10.getPaymentType();
        java.util.UUID uUID12 = payment10.getBookingID();
        models.payment.Payment.PaymentType paymentType13 = models.payment.Payment.PaymentType.FINAL;
        payment10.setPaymentType(paymentType13);
        java.util.UUID uUID15 = payment10.getPaymentID();
        models.payment.PaymentMethod paymentMethod17 = models.payment.Payment.generateMethod("");
        payment10.setPaymentMethod(paymentMethod17);
        java.util.UUID uUID19 = null;
        models.booking.Booking booking20 = null;
        models.payment.PaymentMethod paymentMethod22 = null;
        models.payment.Payment.PaymentStatus paymentStatus23 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType24 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment25 = new models.payment.Payment(uUID19, booking20, 100.0d, paymentMethod22, paymentStatus23, paymentType24);
        models.payment.Payment.PaymentType paymentType26 = payment25.getPaymentType();
        models.payment.Payment.PaymentType paymentType27 = payment25.getPaymentType();
        models.payment.Payment payment28 = new models.payment.Payment((double) 10, booking3, paymentMethod17, paymentType27);
        java.util.UUID uUID29 = null;
        models.booking.Booking booking30 = null;
        models.payment.PaymentMethod paymentMethod32 = null;
        models.payment.Payment.PaymentStatus paymentStatus33 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType34 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment35 = new models.payment.Payment(uUID29, booking30, 100.0d, paymentMethod32, paymentStatus33, paymentType34);
        models.payment.Payment.PaymentType paymentType36 = payment35.getPaymentType();
        java.util.UUID uUID37 = payment35.getBookingID();
        models.payment.Payment.PaymentType paymentType38 = models.payment.Payment.PaymentType.FINAL;
        payment35.setPaymentType(paymentType38);
        models.payment.PaymentMethod paymentMethod40 = payment35.getMethod();
        models.payment.Payment.PaymentType paymentType41 = payment35.getPaymentType();
        models.payment.Payment payment42 = new models.payment.Payment((double) (short) -1, booking1, paymentMethod17, paymentType41);
        java.util.UUID uUID43 = null;
        models.booking.Booking booking44 = null;
        java.util.UUID uUID46 = null;
        models.booking.Booking booking47 = null;
        java.util.UUID uUID49 = null;
        models.booking.Booking booking50 = null;
        models.payment.PaymentMethod paymentMethod52 = null;
        models.payment.Payment.PaymentStatus paymentStatus53 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType54 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment55 = new models.payment.Payment(uUID49, booking50, 100.0d, paymentMethod52, paymentStatus53, paymentType54);
        models.payment.Payment.PaymentType paymentType56 = payment55.getPaymentType();
        java.util.UUID uUID57 = payment55.getBookingID();
        models.payment.Payment.PaymentType paymentType58 = models.payment.Payment.PaymentType.FINAL;
        payment55.setPaymentType(paymentType58);
        java.util.UUID uUID60 = payment55.getPaymentID();
        models.payment.PaymentMethod paymentMethod62 = models.payment.Payment.generateMethod("");
        payment55.setPaymentMethod(paymentMethod62);
        models.payment.Payment.PaymentStatus paymentStatus64 = models.payment.Payment.PaymentStatus.PENDING;
        models.payment.Payment.PaymentType paymentType65 = null;
        models.payment.Payment payment66 = new models.payment.Payment(uUID46, booking47, (double) (byte) 0, paymentMethod62, paymentStatus64, paymentType65);
        models.payment.Payment.PaymentStatus paymentStatus67 = models.payment.Payment.PaymentStatus.PENDING;
        models.payment.Payment.PaymentType paymentType68 = models.payment.Payment.PaymentType.DEPOSIT;
        models.payment.Payment payment69 = new models.payment.Payment(uUID43, booking44, (double) (byte) 100, paymentMethod62, paymentStatus67, paymentType68);
        models.booking.Booking booking70 = payment69.getBooking();
        double double71 = payment69.getAmount();
        java.util.UUID uUID72 = payment69.getBookingID();
        models.payment.Payment.PaymentType paymentType73 = payment69.getPaymentType();
        payment42.setPaymentType(paymentType73);
        boolean boolean75 = payment42.processPayment();
        models.payment.Payment.PaymentStatus paymentStatus76 = payment42.getStatus();
        org.junit.Assert.assertTrue("'" + paymentStatus8 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus8.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType9 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType9.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType11 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType11.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID12);
        org.junit.Assert.assertTrue("'" + paymentType13 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType13.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod17);
        org.junit.Assert.assertTrue("'" + paymentStatus23 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus23.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType24 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType24.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType26 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType26.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType27 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType27.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentStatus33 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus33.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType34 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType34.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType36 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType36.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID37);
        org.junit.Assert.assertTrue("'" + paymentType38 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType38.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(paymentMethod40);
        org.junit.Assert.assertTrue("'" + paymentType41 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType41.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentStatus53 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus53.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType54 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType54.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType56 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType56.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID57);
        org.junit.Assert.assertTrue("'" + paymentType58 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType58.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod62);
        org.junit.Assert.assertTrue("'" + paymentStatus64 + "' != '" + models.payment.Payment.PaymentStatus.PENDING + "'", paymentStatus64.equals(models.payment.Payment.PaymentStatus.PENDING));
        org.junit.Assert.assertTrue("'" + paymentStatus67 + "' != '" + models.payment.Payment.PaymentStatus.PENDING + "'", paymentStatus67.equals(models.payment.Payment.PaymentStatus.PENDING));
        org.junit.Assert.assertTrue("'" + paymentType68 + "' != '" + models.payment.Payment.PaymentType.DEPOSIT + "'", paymentType68.equals(models.payment.Payment.PaymentType.DEPOSIT));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(booking70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 100.0d + "'", double71 == 100.0d);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID72);
        org.junit.Assert.assertTrue("'" + paymentType73 + "' != '" + models.payment.Payment.PaymentType.DEPOSIT + "'", paymentType73.equals(models.payment.Payment.PaymentType.DEPOSIT));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + paymentStatus76 + "' != '" + models.payment.Payment.PaymentStatus.PAID + "'", paymentStatus76.equals(models.payment.Payment.PaymentStatus.PAID));
    }

    @Test
    public void test207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test207");
        java.util.UUID uUID0 = null;
        models.booking.Booking booking1 = null;
        models.payment.PaymentMethod paymentMethod3 = null;
        models.payment.Payment.PaymentStatus paymentStatus4 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType5 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment6 = new models.payment.Payment(uUID0, booking1, 100.0d, paymentMethod3, paymentStatus4, paymentType5);
        models.payment.Payment.PaymentType paymentType7 = payment6.getPaymentType();
        java.util.UUID uUID8 = payment6.getBookingID();
        java.util.UUID uUID9 = payment6.getPaymentID();
        double double10 = payment6.getAmount();
        double double11 = payment6.getAmount();
        java.util.UUID uUID12 = payment6.getPaymentID();
        org.junit.Assert.assertTrue("'" + paymentStatus4 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus4.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType5 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType5.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType7 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType7.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 100.0d + "'", double10 == 100.0d);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID12);
    }

    @Test
    public void test208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test208");
        java.util.UUID uUID0 = null;
        models.booking.Booking booking1 = null;
        java.util.UUID uUID3 = null;
        models.booking.Booking booking4 = null;
        java.util.UUID uUID6 = null;
        models.booking.Booking booking7 = null;
        models.payment.PaymentMethod paymentMethod9 = null;
        models.payment.Payment.PaymentStatus paymentStatus10 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType11 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment12 = new models.payment.Payment(uUID6, booking7, 100.0d, paymentMethod9, paymentStatus10, paymentType11);
        models.payment.Payment.PaymentType paymentType13 = payment12.getPaymentType();
        java.util.UUID uUID14 = payment12.getBookingID();
        models.payment.Payment.PaymentType paymentType15 = models.payment.Payment.PaymentType.FINAL;
        payment12.setPaymentType(paymentType15);
        java.util.UUID uUID17 = payment12.getPaymentID();
        models.payment.PaymentMethod paymentMethod19 = models.payment.Payment.generateMethod("");
        payment12.setPaymentMethod(paymentMethod19);
        models.payment.Payment.PaymentStatus paymentStatus21 = models.payment.Payment.PaymentStatus.PENDING;
        models.payment.Payment.PaymentType paymentType22 = null;
        models.payment.Payment payment23 = new models.payment.Payment(uUID3, booking4, (double) (byte) 0, paymentMethod19, paymentStatus21, paymentType22);
        boolean boolean24 = payment23.processPayment();
        models.payment.PaymentMethod paymentMethod25 = payment23.getMethod();
        java.util.UUID uUID26 = null;
        models.booking.Booking booking27 = null;
        java.util.UUID uUID29 = null;
        models.booking.Booking booking30 = null;
        models.payment.PaymentMethod paymentMethod32 = null;
        models.payment.Payment.PaymentStatus paymentStatus33 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType34 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment35 = new models.payment.Payment(uUID29, booking30, 100.0d, paymentMethod32, paymentStatus33, paymentType34);
        models.payment.Payment.PaymentType paymentType36 = payment35.getPaymentType();
        java.util.UUID uUID37 = payment35.getBookingID();
        models.payment.Payment.PaymentType paymentType38 = models.payment.Payment.PaymentType.FINAL;
        payment35.setPaymentType(paymentType38);
        java.util.UUID uUID40 = payment35.getPaymentID();
        models.payment.PaymentMethod paymentMethod42 = models.payment.Payment.generateMethod("");
        payment35.setPaymentMethod(paymentMethod42);
        java.util.UUID uUID44 = null;
        models.booking.Booking booking45 = null;
        models.payment.PaymentMethod paymentMethod47 = null;
        models.payment.Payment.PaymentStatus paymentStatus48 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType49 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment50 = new models.payment.Payment(uUID44, booking45, 100.0d, paymentMethod47, paymentStatus48, paymentType49);
        models.payment.Payment.PaymentType paymentType51 = payment50.getPaymentType();
        java.util.UUID uUID52 = payment50.getBookingID();
        models.payment.Payment.PaymentType paymentType53 = models.payment.Payment.PaymentType.FINAL;
        payment50.setPaymentType(paymentType53);
        models.payment.PaymentMethod paymentMethod55 = payment50.getMethod();
        models.payment.Payment.PaymentType paymentType56 = payment50.getPaymentType();
        models.payment.Payment.PaymentStatus paymentStatus57 = payment50.getStatus();
        models.payment.Payment.PaymentType paymentType58 = models.payment.Payment.PaymentType.REFUND;
        models.payment.Payment payment59 = new models.payment.Payment(uUID26, booking27, (double) '#', paymentMethod42, paymentStatus57, paymentType58);
        java.util.UUID uUID60 = null;
        models.booking.Booking booking61 = null;
        models.payment.PaymentMethod paymentMethod63 = null;
        models.payment.Payment.PaymentStatus paymentStatus64 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType65 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment66 = new models.payment.Payment(uUID60, booking61, 100.0d, paymentMethod63, paymentStatus64, paymentType65);
        models.payment.Payment.PaymentStatus paymentStatus67 = payment66.getStatus();
        models.payment.PaymentMethod paymentMethod68 = payment66.getMethod();
        models.payment.Payment.PaymentType paymentType69 = payment66.getPaymentType();
        models.payment.Payment payment70 = new models.payment.Payment(uUID0, booking1, (double) (byte) 10, paymentMethod25, paymentStatus57, paymentType69);
        java.lang.Class<?> wildcardClass71 = paymentMethod25.getClass();
        org.junit.Assert.assertTrue("'" + paymentStatus10 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus10.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType11 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType11.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType13 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType13.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID14);
        org.junit.Assert.assertTrue("'" + paymentType15 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType15.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod19);
        org.junit.Assert.assertTrue("'" + paymentStatus21 + "' != '" + models.payment.Payment.PaymentStatus.PENDING + "'", paymentStatus21.equals(models.payment.Payment.PaymentStatus.PENDING));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod25);
        org.junit.Assert.assertTrue("'" + paymentStatus33 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus33.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType34 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType34.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType36 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType36.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID37);
        org.junit.Assert.assertTrue("'" + paymentType38 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType38.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod42);
        org.junit.Assert.assertTrue("'" + paymentStatus48 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus48.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType49 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType49.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType51 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType51.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID52);
        org.junit.Assert.assertTrue("'" + paymentType53 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType53.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(paymentMethod55);
        org.junit.Assert.assertTrue("'" + paymentType56 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType56.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentStatus57 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus57.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType58 + "' != '" + models.payment.Payment.PaymentType.REFUND + "'", paymentType58.equals(models.payment.Payment.PaymentType.REFUND));
        org.junit.Assert.assertTrue("'" + paymentStatus64 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus64.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType65 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType65.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentStatus67 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus67.equals(models.payment.Payment.PaymentStatus.FAILED));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(paymentMethod68);
        org.junit.Assert.assertTrue("'" + paymentType69 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType69.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass71);
    }

    @Test
    public void test209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test209");
        models.booking.Booking booking1 = null;
        models.booking.Booking booking3 = null;
        java.util.UUID uUID4 = null;
        models.booking.Booking booking5 = null;
        models.payment.PaymentMethod paymentMethod7 = null;
        models.payment.Payment.PaymentStatus paymentStatus8 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType9 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment10 = new models.payment.Payment(uUID4, booking5, 100.0d, paymentMethod7, paymentStatus8, paymentType9);
        models.payment.Payment.PaymentType paymentType11 = payment10.getPaymentType();
        java.util.UUID uUID12 = payment10.getBookingID();
        models.payment.Payment.PaymentType paymentType13 = models.payment.Payment.PaymentType.FINAL;
        payment10.setPaymentType(paymentType13);
        java.util.UUID uUID15 = payment10.getPaymentID();
        models.payment.PaymentMethod paymentMethod17 = models.payment.Payment.generateMethod("");
        payment10.setPaymentMethod(paymentMethod17);
        java.util.UUID uUID19 = null;
        models.booking.Booking booking20 = null;
        models.payment.PaymentMethod paymentMethod22 = null;
        models.payment.Payment.PaymentStatus paymentStatus23 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType24 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment25 = new models.payment.Payment(uUID19, booking20, 100.0d, paymentMethod22, paymentStatus23, paymentType24);
        models.payment.Payment.PaymentType paymentType26 = payment25.getPaymentType();
        models.payment.Payment.PaymentType paymentType27 = payment25.getPaymentType();
        models.payment.Payment payment28 = new models.payment.Payment((double) 10, booking3, paymentMethod17, paymentType27);
        models.payment.Payment.PaymentType paymentType29 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment30 = new models.payment.Payment((double) 0.0f, booking1, paymentMethod17, paymentType29);
        boolean boolean31 = payment30.processPayment();
        java.util.UUID uUID32 = null;
        models.booking.Booking booking33 = null;
        java.util.UUID uUID35 = null;
        models.booking.Booking booking36 = null;
        models.payment.PaymentMethod paymentMethod38 = null;
        models.payment.Payment.PaymentStatus paymentStatus39 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType40 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment41 = new models.payment.Payment(uUID35, booking36, 100.0d, paymentMethod38, paymentStatus39, paymentType40);
        models.payment.Payment.PaymentType paymentType42 = payment41.getPaymentType();
        java.util.UUID uUID43 = payment41.getBookingID();
        models.payment.Payment.PaymentType paymentType44 = models.payment.Payment.PaymentType.FINAL;
        payment41.setPaymentType(paymentType44);
        java.util.UUID uUID46 = payment41.getPaymentID();
        models.payment.PaymentMethod paymentMethod48 = models.payment.Payment.generateMethod("");
        payment41.setPaymentMethod(paymentMethod48);
        java.util.UUID uUID50 = null;
        models.booking.Booking booking51 = null;
        models.payment.PaymentMethod paymentMethod53 = null;
        models.payment.Payment.PaymentStatus paymentStatus54 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType55 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment56 = new models.payment.Payment(uUID50, booking51, 100.0d, paymentMethod53, paymentStatus54, paymentType55);
        models.payment.Payment.PaymentType paymentType57 = payment56.getPaymentType();
        java.util.UUID uUID58 = payment56.getBookingID();
        models.payment.Payment.PaymentType paymentType59 = models.payment.Payment.PaymentType.FINAL;
        payment56.setPaymentType(paymentType59);
        models.payment.PaymentMethod paymentMethod61 = payment56.getMethod();
        models.payment.Payment.PaymentType paymentType62 = payment56.getPaymentType();
        models.payment.Payment.PaymentStatus paymentStatus63 = payment56.getStatus();
        models.payment.Payment.PaymentType paymentType64 = models.payment.Payment.PaymentType.REFUND;
        models.payment.Payment payment65 = new models.payment.Payment(uUID32, booking33, (double) '#', paymentMethod48, paymentStatus63, paymentType64);
        java.util.UUID uUID66 = payment65.getBookingID();
        models.payment.Payment.PaymentType paymentType67 = payment65.getPaymentType();
        payment30.setPaymentType(paymentType67);
        org.junit.Assert.assertTrue("'" + paymentStatus8 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus8.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType9 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType9.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType11 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType11.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID12);
        org.junit.Assert.assertTrue("'" + paymentType13 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType13.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod17);
        org.junit.Assert.assertTrue("'" + paymentStatus23 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus23.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType24 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType24.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType26 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType26.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType27 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType27.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType29 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType29.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + paymentStatus39 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus39.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType40 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType40.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType42 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType42.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID43);
        org.junit.Assert.assertTrue("'" + paymentType44 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType44.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod48);
        org.junit.Assert.assertTrue("'" + paymentStatus54 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus54.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType55 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType55.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType57 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType57.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID58);
        org.junit.Assert.assertTrue("'" + paymentType59 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType59.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(paymentMethod61);
        org.junit.Assert.assertTrue("'" + paymentType62 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType62.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentStatus63 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus63.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType64 + "' != '" + models.payment.Payment.PaymentType.REFUND + "'", paymentType64.equals(models.payment.Payment.PaymentType.REFUND));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID66);
        org.junit.Assert.assertTrue("'" + paymentType67 + "' != '" + models.payment.Payment.PaymentType.REFUND + "'", paymentType67.equals(models.payment.Payment.PaymentType.REFUND));
    }

    @Test
    public void test210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test210");
        java.util.UUID uUID0 = null;
        models.booking.Booking booking1 = null;
        java.util.UUID uUID3 = null;
        models.booking.Booking booking4 = null;
        models.payment.PaymentMethod paymentMethod6 = null;
        models.payment.Payment.PaymentStatus paymentStatus7 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType8 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment9 = new models.payment.Payment(uUID3, booking4, 100.0d, paymentMethod6, paymentStatus7, paymentType8);
        java.util.UUID uUID10 = null;
        models.booking.Booking booking11 = null;
        java.util.UUID uUID13 = null;
        models.booking.Booking booking14 = null;
        models.payment.PaymentMethod paymentMethod16 = null;
        models.payment.Payment.PaymentStatus paymentStatus17 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType18 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment19 = new models.payment.Payment(uUID13, booking14, 100.0d, paymentMethod16, paymentStatus17, paymentType18);
        models.payment.Payment.PaymentType paymentType20 = payment19.getPaymentType();
        java.util.UUID uUID21 = payment19.getBookingID();
        models.payment.Payment.PaymentType paymentType22 = models.payment.Payment.PaymentType.FINAL;
        payment19.setPaymentType(paymentType22);
        java.util.UUID uUID24 = payment19.getPaymentID();
        models.payment.PaymentMethod paymentMethod26 = models.payment.Payment.generateMethod("");
        payment19.setPaymentMethod(paymentMethod26);
        models.payment.Payment.PaymentStatus paymentStatus28 = models.payment.Payment.PaymentStatus.PENDING;
        models.payment.Payment.PaymentType paymentType29 = null;
        models.payment.Payment payment30 = new models.payment.Payment(uUID10, booking11, (double) (byte) 0, paymentMethod26, paymentStatus28, paymentType29);
        payment9.setPaymentMethod(paymentMethod26);
        java.util.UUID uUID32 = null;
        models.booking.Booking booking33 = null;
        java.util.UUID uUID35 = null;
        models.booking.Booking booking36 = null;
        models.payment.PaymentMethod paymentMethod38 = null;
        models.payment.Payment.PaymentStatus paymentStatus39 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType40 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment41 = new models.payment.Payment(uUID35, booking36, 100.0d, paymentMethod38, paymentStatus39, paymentType40);
        models.payment.Payment.PaymentType paymentType42 = payment41.getPaymentType();
        java.util.UUID uUID43 = payment41.getBookingID();
        models.payment.Payment.PaymentType paymentType44 = models.payment.Payment.PaymentType.FINAL;
        payment41.setPaymentType(paymentType44);
        java.util.UUID uUID46 = payment41.getPaymentID();
        models.payment.PaymentMethod paymentMethod48 = models.payment.Payment.generateMethod("");
        payment41.setPaymentMethod(paymentMethod48);
        models.payment.Payment.PaymentStatus paymentStatus50 = models.payment.Payment.PaymentStatus.PENDING;
        models.payment.Payment.PaymentType paymentType51 = null;
        models.payment.Payment payment52 = new models.payment.Payment(uUID32, booking33, (double) (byte) 0, paymentMethod48, paymentStatus50, paymentType51);
        models.payment.Payment.PaymentStatus paymentStatus53 = payment52.getStatus();
        java.util.UUID uUID54 = null;
        models.booking.Booking booking55 = null;
        models.payment.PaymentMethod paymentMethod57 = null;
        models.payment.Payment.PaymentStatus paymentStatus58 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType59 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment60 = new models.payment.Payment(uUID54, booking55, 100.0d, paymentMethod57, paymentStatus58, paymentType59);
        models.payment.Payment.PaymentType paymentType61 = payment60.getPaymentType();
        java.util.UUID uUID62 = payment60.getBookingID();
        models.payment.Payment.PaymentType paymentType63 = models.payment.Payment.PaymentType.FINAL;
        payment60.setPaymentType(paymentType63);
        models.payment.Payment payment65 = new models.payment.Payment(uUID0, booking1, (double) 'a', paymentMethod26, paymentStatus53, paymentType63);
        java.util.UUID uUID66 = payment65.getBookingID();
        models.payment.Payment.PaymentType paymentType67 = payment65.getPaymentType();
        models.booking.Booking booking69 = null;
        models.payment.PaymentMethod paymentMethod71 = models.payment.Payment.generateMethod("hi!");
        java.util.UUID uUID72 = null;
        models.booking.Booking booking73 = null;
        models.payment.PaymentMethod paymentMethod75 = null;
        models.payment.Payment.PaymentStatus paymentStatus76 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType77 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment78 = new models.payment.Payment(uUID72, booking73, 100.0d, paymentMethod75, paymentStatus76, paymentType77);
        models.payment.Payment.PaymentType paymentType79 = payment78.getPaymentType();
        models.payment.Payment payment80 = new models.payment.Payment(0.0d, booking69, paymentMethod71, paymentType79);
        payment65.setPaymentType(paymentType79);
        double double82 = payment65.getAmount();
        org.junit.Assert.assertTrue("'" + paymentStatus7 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus7.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType8 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType8.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentStatus17 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus17.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType18 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType18.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType20 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType20.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID21);
        org.junit.Assert.assertTrue("'" + paymentType22 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType22.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod26);
        org.junit.Assert.assertTrue("'" + paymentStatus28 + "' != '" + models.payment.Payment.PaymentStatus.PENDING + "'", paymentStatus28.equals(models.payment.Payment.PaymentStatus.PENDING));
        org.junit.Assert.assertTrue("'" + paymentStatus39 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus39.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType40 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType40.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType42 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType42.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID43);
        org.junit.Assert.assertTrue("'" + paymentType44 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType44.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod48);
        org.junit.Assert.assertTrue("'" + paymentStatus50 + "' != '" + models.payment.Payment.PaymentStatus.PENDING + "'", paymentStatus50.equals(models.payment.Payment.PaymentStatus.PENDING));
        org.junit.Assert.assertTrue("'" + paymentStatus53 + "' != '" + models.payment.Payment.PaymentStatus.PENDING + "'", paymentStatus53.equals(models.payment.Payment.PaymentStatus.PENDING));
        org.junit.Assert.assertTrue("'" + paymentStatus58 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus58.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType59 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType59.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType61 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType61.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID62);
        org.junit.Assert.assertTrue("'" + paymentType63 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType63.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID66);
        org.junit.Assert.assertTrue("'" + paymentType67 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType67.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod71);
        org.junit.Assert.assertTrue("'" + paymentStatus76 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus76.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType77 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType77.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType79 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType79.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 97.0d + "'", double82 == 97.0d);
    }

    @Test
    public void test211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test211");
        java.util.UUID uUID0 = null;
        models.booking.Booking booking1 = null;
        models.payment.PaymentMethod paymentMethod3 = null;
        models.payment.Payment.PaymentStatus paymentStatus4 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType5 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment6 = new models.payment.Payment(uUID0, booking1, 100.0d, paymentMethod3, paymentStatus4, paymentType5);
        models.payment.Payment.PaymentStatus paymentStatus7 = payment6.getStatus();
        double double8 = payment6.getAmount();
        java.util.UUID uUID9 = payment6.getBookingID();
        models.booking.Booking booking11 = null;
        java.util.UUID uUID12 = null;
        models.booking.Booking booking13 = null;
        models.payment.PaymentMethod paymentMethod15 = null;
        models.payment.Payment.PaymentStatus paymentStatus16 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType17 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment18 = new models.payment.Payment(uUID12, booking13, 100.0d, paymentMethod15, paymentStatus16, paymentType17);
        models.payment.Payment.PaymentType paymentType19 = payment18.getPaymentType();
        java.util.UUID uUID20 = payment18.getBookingID();
        models.payment.Payment.PaymentType paymentType21 = models.payment.Payment.PaymentType.FINAL;
        payment18.setPaymentType(paymentType21);
        java.util.UUID uUID23 = payment18.getPaymentID();
        double double24 = payment18.getAmount();
        java.util.UUID uUID25 = null;
        models.booking.Booking booking26 = null;
        models.payment.PaymentMethod paymentMethod28 = null;
        models.payment.Payment.PaymentStatus paymentStatus29 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType30 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment31 = new models.payment.Payment(uUID25, booking26, 100.0d, paymentMethod28, paymentStatus29, paymentType30);
        payment18.setPaymentType(paymentType30);
        models.booking.Booking booking34 = null;
        models.booking.Booking booking36 = null;
        java.util.UUID uUID37 = null;
        models.booking.Booking booking38 = null;
        models.payment.PaymentMethod paymentMethod40 = null;
        models.payment.Payment.PaymentStatus paymentStatus41 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType42 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment43 = new models.payment.Payment(uUID37, booking38, 100.0d, paymentMethod40, paymentStatus41, paymentType42);
        models.payment.Payment.PaymentType paymentType44 = payment43.getPaymentType();
        java.util.UUID uUID45 = payment43.getBookingID();
        models.payment.Payment.PaymentType paymentType46 = models.payment.Payment.PaymentType.FINAL;
        payment43.setPaymentType(paymentType46);
        java.util.UUID uUID48 = payment43.getPaymentID();
        models.payment.PaymentMethod paymentMethod50 = models.payment.Payment.generateMethod("");
        payment43.setPaymentMethod(paymentMethod50);
        java.util.UUID uUID52 = null;
        models.booking.Booking booking53 = null;
        models.payment.PaymentMethod paymentMethod55 = null;
        models.payment.Payment.PaymentStatus paymentStatus56 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType57 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment58 = new models.payment.Payment(uUID52, booking53, 100.0d, paymentMethod55, paymentStatus56, paymentType57);
        models.payment.Payment.PaymentType paymentType59 = payment58.getPaymentType();
        models.payment.Payment.PaymentType paymentType60 = payment58.getPaymentType();
        models.payment.Payment payment61 = new models.payment.Payment((double) 10, booking36, paymentMethod50, paymentType60);
        java.util.UUID uUID62 = null;
        models.booking.Booking booking63 = null;
        models.payment.PaymentMethod paymentMethod65 = null;
        models.payment.Payment.PaymentStatus paymentStatus66 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType67 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment68 = new models.payment.Payment(uUID62, booking63, 100.0d, paymentMethod65, paymentStatus66, paymentType67);
        models.payment.Payment.PaymentType paymentType69 = payment68.getPaymentType();
        java.util.UUID uUID70 = payment68.getBookingID();
        models.payment.Payment.PaymentType paymentType71 = models.payment.Payment.PaymentType.FINAL;
        payment68.setPaymentType(paymentType71);
        models.payment.PaymentMethod paymentMethod73 = payment68.getMethod();
        models.payment.Payment.PaymentType paymentType74 = payment68.getPaymentType();
        models.payment.Payment payment75 = new models.payment.Payment((double) 0, booking34, paymentMethod50, paymentType74);
        payment18.setPaymentMethod(paymentMethod50);
        java.util.UUID uUID77 = null;
        models.booking.Booking booking78 = null;
        models.payment.PaymentMethod paymentMethod80 = null;
        models.payment.Payment.PaymentStatus paymentStatus81 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType82 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment83 = new models.payment.Payment(uUID77, booking78, 100.0d, paymentMethod80, paymentStatus81, paymentType82);
        models.payment.Payment.PaymentType paymentType84 = models.payment.Payment.PaymentType.DEPOSIT;
        payment83.setPaymentType(paymentType84);
        models.payment.Payment.PaymentType paymentType86 = payment83.getPaymentType();
        models.payment.Payment payment87 = new models.payment.Payment((double) '4', booking11, paymentMethod50, paymentType86);
        payment6.setPaymentType(paymentType86);
        org.junit.Assert.assertTrue("'" + paymentStatus4 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus4.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType5 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType5.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentStatus7 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus7.equals(models.payment.Payment.PaymentStatus.FAILED));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 100.0d + "'", double8 == 100.0d);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID9);
        org.junit.Assert.assertTrue("'" + paymentStatus16 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus16.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType17 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType17.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType19 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType19.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID20);
        org.junit.Assert.assertTrue("'" + paymentType21 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType21.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 100.0d + "'", double24 == 100.0d);
        org.junit.Assert.assertTrue("'" + paymentStatus29 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus29.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType30 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType30.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentStatus41 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus41.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType42 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType42.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType44 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType44.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID45);
        org.junit.Assert.assertTrue("'" + paymentType46 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType46.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod50);
        org.junit.Assert.assertTrue("'" + paymentStatus56 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus56.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType57 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType57.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType59 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType59.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType60 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType60.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentStatus66 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus66.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType67 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType67.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType69 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType69.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID70);
        org.junit.Assert.assertTrue("'" + paymentType71 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType71.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(paymentMethod73);
        org.junit.Assert.assertTrue("'" + paymentType74 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType74.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentStatus81 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus81.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType82 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType82.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType84 + "' != '" + models.payment.Payment.PaymentType.DEPOSIT + "'", paymentType84.equals(models.payment.Payment.PaymentType.DEPOSIT));
        org.junit.Assert.assertTrue("'" + paymentType86 + "' != '" + models.payment.Payment.PaymentType.DEPOSIT + "'", paymentType86.equals(models.payment.Payment.PaymentType.DEPOSIT));
    }

    @Test
    public void test212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test212");
        models.booking.Booking booking1 = null;
        models.booking.Booking booking3 = null;
        java.util.UUID uUID4 = null;
        models.booking.Booking booking5 = null;
        models.payment.PaymentMethod paymentMethod7 = null;
        models.payment.Payment.PaymentStatus paymentStatus8 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType9 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment10 = new models.payment.Payment(uUID4, booking5, 100.0d, paymentMethod7, paymentStatus8, paymentType9);
        models.payment.Payment.PaymentType paymentType11 = payment10.getPaymentType();
        java.util.UUID uUID12 = payment10.getBookingID();
        models.payment.Payment.PaymentType paymentType13 = models.payment.Payment.PaymentType.FINAL;
        payment10.setPaymentType(paymentType13);
        java.util.UUID uUID15 = payment10.getPaymentID();
        models.payment.PaymentMethod paymentMethod17 = models.payment.Payment.generateMethod("");
        payment10.setPaymentMethod(paymentMethod17);
        java.util.UUID uUID19 = null;
        models.booking.Booking booking20 = null;
        models.payment.PaymentMethod paymentMethod22 = null;
        models.payment.Payment.PaymentStatus paymentStatus23 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType24 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment25 = new models.payment.Payment(uUID19, booking20, 100.0d, paymentMethod22, paymentStatus23, paymentType24);
        models.payment.Payment.PaymentType paymentType26 = payment25.getPaymentType();
        models.payment.Payment.PaymentType paymentType27 = payment25.getPaymentType();
        models.payment.Payment payment28 = new models.payment.Payment((double) 10, booking3, paymentMethod17, paymentType27);
        java.util.UUID uUID29 = null;
        models.booking.Booking booking30 = null;
        models.payment.PaymentMethod paymentMethod32 = null;
        models.payment.Payment.PaymentStatus paymentStatus33 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType34 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment35 = new models.payment.Payment(uUID29, booking30, 100.0d, paymentMethod32, paymentStatus33, paymentType34);
        models.payment.Payment payment36 = new models.payment.Payment((double) '4', booking1, paymentMethod17, paymentType34);
        models.booking.Booking booking37 = payment36.getBooking();
        double double38 = payment36.getAmount();
        org.junit.Assert.assertTrue("'" + paymentStatus8 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus8.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType9 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType9.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType11 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType11.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID12);
        org.junit.Assert.assertTrue("'" + paymentType13 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType13.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod17);
        org.junit.Assert.assertTrue("'" + paymentStatus23 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus23.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType24 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType24.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType26 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType26.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType27 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType27.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentStatus33 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus33.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType34 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType34.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(booking37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 52.0d + "'", double38 == 52.0d);
    }

    @Test
    public void test213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test213");
        java.util.UUID uUID0 = null;
        models.booking.Booking booking1 = null;
        models.payment.PaymentMethod paymentMethod3 = null;
        models.payment.Payment.PaymentStatus paymentStatus4 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType5 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment6 = new models.payment.Payment(uUID0, booking1, 100.0d, paymentMethod3, paymentStatus4, paymentType5);
        models.payment.Payment.PaymentType paymentType7 = payment6.getPaymentType();
        java.util.UUID uUID8 = payment6.getBookingID();
        models.payment.Payment.PaymentType paymentType9 = models.payment.Payment.PaymentType.FINAL;
        payment6.setPaymentType(paymentType9);
        models.payment.PaymentMethod paymentMethod11 = payment6.getMethod();
        models.payment.Payment.PaymentType paymentType12 = payment6.getPaymentType();
        java.util.UUID uUID13 = null;
        models.booking.Booking booking14 = null;
        models.payment.PaymentMethod paymentMethod16 = null;
        models.payment.Payment.PaymentStatus paymentStatus17 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType18 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment19 = new models.payment.Payment(uUID13, booking14, 100.0d, paymentMethod16, paymentStatus17, paymentType18);
        java.util.UUID uUID20 = null;
        models.booking.Booking booking21 = null;
        java.util.UUID uUID23 = null;
        models.booking.Booking booking24 = null;
        models.payment.PaymentMethod paymentMethod26 = null;
        models.payment.Payment.PaymentStatus paymentStatus27 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType28 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment29 = new models.payment.Payment(uUID23, booking24, 100.0d, paymentMethod26, paymentStatus27, paymentType28);
        models.payment.Payment.PaymentType paymentType30 = payment29.getPaymentType();
        java.util.UUID uUID31 = payment29.getBookingID();
        models.payment.Payment.PaymentType paymentType32 = models.payment.Payment.PaymentType.FINAL;
        payment29.setPaymentType(paymentType32);
        java.util.UUID uUID34 = payment29.getPaymentID();
        models.payment.PaymentMethod paymentMethod36 = models.payment.Payment.generateMethod("");
        payment29.setPaymentMethod(paymentMethod36);
        models.payment.Payment.PaymentStatus paymentStatus38 = models.payment.Payment.PaymentStatus.PENDING;
        models.payment.Payment.PaymentType paymentType39 = null;
        models.payment.Payment payment40 = new models.payment.Payment(uUID20, booking21, (double) (byte) 0, paymentMethod36, paymentStatus38, paymentType39);
        payment19.setPaymentMethod(paymentMethod36);
        payment6.setPaymentMethod(paymentMethod36);
        models.booking.Booking booking43 = payment6.getBooking();
        models.payment.Payment.PaymentType paymentType44 = payment6.getPaymentType();
        java.util.UUID uUID45 = null;
        models.booking.Booking booking46 = null;
        models.payment.PaymentMethod paymentMethod48 = null;
        models.payment.Payment.PaymentStatus paymentStatus49 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType50 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment51 = new models.payment.Payment(uUID45, booking46, 100.0d, paymentMethod48, paymentStatus49, paymentType50);
        models.payment.Payment.PaymentType paymentType52 = models.payment.Payment.PaymentType.DEPOSIT;
        payment51.setPaymentType(paymentType52);
        payment6.setPaymentType(paymentType52);
        java.lang.Class<?> wildcardClass55 = payment6.getClass();
        org.junit.Assert.assertTrue("'" + paymentStatus4 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus4.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType5 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType5.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType7 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType7.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID8);
        org.junit.Assert.assertTrue("'" + paymentType9 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType9.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(paymentMethod11);
        org.junit.Assert.assertTrue("'" + paymentType12 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType12.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentStatus17 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus17.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType18 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType18.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentStatus27 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus27.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType28 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType28.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType30 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType30.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID31);
        org.junit.Assert.assertTrue("'" + paymentType32 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType32.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod36);
        org.junit.Assert.assertTrue("'" + paymentStatus38 + "' != '" + models.payment.Payment.PaymentStatus.PENDING + "'", paymentStatus38.equals(models.payment.Payment.PaymentStatus.PENDING));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(booking43);
        org.junit.Assert.assertTrue("'" + paymentType44 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType44.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentStatus49 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus49.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType50 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType50.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType52 + "' != '" + models.payment.Payment.PaymentType.DEPOSIT + "'", paymentType52.equals(models.payment.Payment.PaymentType.DEPOSIT));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass55);
    }

    @Test
    public void test214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test214");
        java.util.UUID uUID0 = null;
        models.booking.Booking booking1 = null;
        models.payment.PaymentMethod paymentMethod3 = null;
        models.payment.Payment.PaymentStatus paymentStatus4 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType5 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment6 = new models.payment.Payment(uUID0, booking1, 100.0d, paymentMethod3, paymentStatus4, paymentType5);
        models.payment.Payment.PaymentStatus paymentStatus7 = payment6.getStatus();
        double double8 = payment6.getAmount();
        java.util.UUID uUID9 = payment6.getPaymentID();
        double double10 = payment6.getAmount();
        org.junit.Assert.assertTrue("'" + paymentStatus4 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus4.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType5 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType5.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentStatus7 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus7.equals(models.payment.Payment.PaymentStatus.FAILED));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 100.0d + "'", double8 == 100.0d);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 100.0d + "'", double10 == 100.0d);
    }

    @Test
    public void test215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test215");
        java.util.UUID uUID0 = null;
        models.booking.Booking booking1 = null;
        models.booking.Booking booking4 = null;
        models.booking.Booking booking6 = null;
        java.util.UUID uUID7 = null;
        models.booking.Booking booking8 = null;
        models.payment.PaymentMethod paymentMethod10 = null;
        models.payment.Payment.PaymentStatus paymentStatus11 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType12 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment13 = new models.payment.Payment(uUID7, booking8, 100.0d, paymentMethod10, paymentStatus11, paymentType12);
        models.payment.Payment.PaymentType paymentType14 = payment13.getPaymentType();
        java.util.UUID uUID15 = payment13.getBookingID();
        models.payment.Payment.PaymentType paymentType16 = models.payment.Payment.PaymentType.FINAL;
        payment13.setPaymentType(paymentType16);
        java.util.UUID uUID18 = payment13.getPaymentID();
        models.payment.PaymentMethod paymentMethod20 = models.payment.Payment.generateMethod("");
        payment13.setPaymentMethod(paymentMethod20);
        java.util.UUID uUID22 = null;
        models.booking.Booking booking23 = null;
        models.payment.PaymentMethod paymentMethod25 = null;
        models.payment.Payment.PaymentStatus paymentStatus26 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType27 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment28 = new models.payment.Payment(uUID22, booking23, 100.0d, paymentMethod25, paymentStatus26, paymentType27);
        models.payment.Payment.PaymentType paymentType29 = payment28.getPaymentType();
        models.payment.Payment.PaymentType paymentType30 = payment28.getPaymentType();
        models.payment.Payment payment31 = new models.payment.Payment((double) 10, booking6, paymentMethod20, paymentType30);
        models.payment.Payment.PaymentType paymentType32 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment33 = new models.payment.Payment((double) 0.0f, booking4, paymentMethod20, paymentType32);
        java.util.UUID uUID34 = null;
        models.booking.Booking booking35 = null;
        models.payment.PaymentMethod paymentMethod37 = null;
        models.payment.Payment.PaymentStatus paymentStatus38 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType39 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment40 = new models.payment.Payment(uUID34, booking35, (-1.0d), paymentMethod37, paymentStatus38, paymentType39);
        java.util.UUID uUID41 = null;
        models.booking.Booking booking42 = null;
        models.payment.PaymentMethod paymentMethod44 = null;
        models.payment.Payment.PaymentStatus paymentStatus45 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType46 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment47 = new models.payment.Payment(uUID41, booking42, 100.0d, paymentMethod44, paymentStatus45, paymentType46);
        models.payment.Payment.PaymentType paymentType48 = payment47.getPaymentType();
        java.util.UUID uUID49 = payment47.getBookingID();
        models.payment.Payment.PaymentType paymentType50 = models.payment.Payment.PaymentType.FINAL;
        payment47.setPaymentType(paymentType50);
        models.payment.PaymentMethod paymentMethod52 = payment47.getMethod();
        java.util.UUID uUID53 = null;
        models.booking.Booking booking54 = null;
        models.payment.PaymentMethod paymentMethod56 = null;
        models.payment.Payment.PaymentStatus paymentStatus57 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType58 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment59 = new models.payment.Payment(uUID53, booking54, 100.0d, paymentMethod56, paymentStatus57, paymentType58);
        models.payment.Payment.PaymentType paymentType60 = payment59.getPaymentType();
        java.util.UUID uUID61 = payment59.getBookingID();
        models.payment.Payment.PaymentType paymentType62 = models.payment.Payment.PaymentType.FINAL;
        payment59.setPaymentType(paymentType62);
        payment47.setPaymentType(paymentType62);
        models.payment.Payment payment65 = new models.payment.Payment(uUID0, booking1, (double) (byte) 10, paymentMethod20, paymentStatus38, paymentType62);
        models.booking.Booking booking66 = payment65.getBooking();
        org.junit.Assert.assertTrue("'" + paymentStatus11 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus11.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType12 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType12.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType14 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType14.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID15);
        org.junit.Assert.assertTrue("'" + paymentType16 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType16.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod20);
        org.junit.Assert.assertTrue("'" + paymentStatus26 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus26.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType27 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType27.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType29 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType29.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType30 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType30.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType32 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType32.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentStatus38 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus38.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType39 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType39.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentStatus45 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus45.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType46 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType46.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType48 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType48.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID49);
        org.junit.Assert.assertTrue("'" + paymentType50 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType50.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(paymentMethod52);
        org.junit.Assert.assertTrue("'" + paymentStatus57 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus57.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType58 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType58.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType60 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType60.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID61);
        org.junit.Assert.assertTrue("'" + paymentType62 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType62.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(booking66);
    }

    @Test
    public void test216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test216");
        java.util.UUID uUID0 = null;
        models.booking.Booking booking1 = null;
        models.payment.PaymentMethod paymentMethod3 = null;
        models.payment.Payment.PaymentStatus paymentStatus4 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType5 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment6 = new models.payment.Payment(uUID0, booking1, 100.0d, paymentMethod3, paymentStatus4, paymentType5);
        models.payment.Payment.PaymentType paymentType7 = payment6.getPaymentType();
        java.util.UUID uUID8 = payment6.getBookingID();
        models.payment.Payment.PaymentType paymentType9 = models.payment.Payment.PaymentType.FINAL;
        payment6.setPaymentType(paymentType9);
        models.payment.PaymentMethod paymentMethod11 = payment6.getMethod();
        models.payment.Payment.PaymentType paymentType12 = payment6.getPaymentType();
        java.util.UUID uUID13 = null;
        models.booking.Booking booking14 = null;
        models.payment.PaymentMethod paymentMethod16 = null;
        models.payment.Payment.PaymentStatus paymentStatus17 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType18 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment19 = new models.payment.Payment(uUID13, booking14, 100.0d, paymentMethod16, paymentStatus17, paymentType18);
        java.util.UUID uUID20 = null;
        models.booking.Booking booking21 = null;
        java.util.UUID uUID23 = null;
        models.booking.Booking booking24 = null;
        models.payment.PaymentMethod paymentMethod26 = null;
        models.payment.Payment.PaymentStatus paymentStatus27 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType28 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment29 = new models.payment.Payment(uUID23, booking24, 100.0d, paymentMethod26, paymentStatus27, paymentType28);
        models.payment.Payment.PaymentType paymentType30 = payment29.getPaymentType();
        java.util.UUID uUID31 = payment29.getBookingID();
        models.payment.Payment.PaymentType paymentType32 = models.payment.Payment.PaymentType.FINAL;
        payment29.setPaymentType(paymentType32);
        java.util.UUID uUID34 = payment29.getPaymentID();
        models.payment.PaymentMethod paymentMethod36 = models.payment.Payment.generateMethod("");
        payment29.setPaymentMethod(paymentMethod36);
        models.payment.Payment.PaymentStatus paymentStatus38 = models.payment.Payment.PaymentStatus.PENDING;
        models.payment.Payment.PaymentType paymentType39 = null;
        models.payment.Payment payment40 = new models.payment.Payment(uUID20, booking21, (double) (byte) 0, paymentMethod36, paymentStatus38, paymentType39);
        payment19.setPaymentMethod(paymentMethod36);
        payment6.setPaymentMethod(paymentMethod36);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean43 = payment6.processPayment();
            org.junit.Assert.fail("Expected exception of type models.ParkingSystemException; message: Cannot process payment of a payment that is not pending.");
        } catch (models.ParkingSystemException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + paymentStatus4 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus4.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType5 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType5.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType7 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType7.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID8);
        org.junit.Assert.assertTrue("'" + paymentType9 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType9.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(paymentMethod11);
        org.junit.Assert.assertTrue("'" + paymentType12 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType12.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentStatus17 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus17.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType18 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType18.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentStatus27 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus27.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType28 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType28.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType30 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType30.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID31);
        org.junit.Assert.assertTrue("'" + paymentType32 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType32.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod36);
        org.junit.Assert.assertTrue("'" + paymentStatus38 + "' != '" + models.payment.Payment.PaymentStatus.PENDING + "'", paymentStatus38.equals(models.payment.Payment.PaymentStatus.PENDING));
    }

    @Test
    public void test217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test217");
        java.util.UUID uUID0 = null;
        models.booking.Booking booking1 = null;
        models.payment.PaymentMethod paymentMethod3 = null;
        models.payment.Payment.PaymentStatus paymentStatus4 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType5 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment6 = new models.payment.Payment(uUID0, booking1, 100.0d, paymentMethod3, paymentStatus4, paymentType5);
        models.payment.Payment.PaymentType paymentType7 = models.payment.Payment.PaymentType.DEPOSIT;
        payment6.setPaymentType(paymentType7);
        java.util.UUID uUID9 = payment6.getBookingID();
        java.util.UUID uUID10 = null;
        models.booking.Booking booking11 = null;
        java.util.UUID uUID13 = null;
        models.booking.Booking booking14 = null;
        models.payment.PaymentMethod paymentMethod16 = null;
        models.payment.Payment.PaymentStatus paymentStatus17 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType18 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment19 = new models.payment.Payment(uUID13, booking14, 100.0d, paymentMethod16, paymentStatus17, paymentType18);
        models.payment.Payment.PaymentType paymentType20 = payment19.getPaymentType();
        java.util.UUID uUID21 = payment19.getBookingID();
        models.payment.Payment.PaymentType paymentType22 = models.payment.Payment.PaymentType.FINAL;
        payment19.setPaymentType(paymentType22);
        java.util.UUID uUID24 = payment19.getPaymentID();
        models.payment.PaymentMethod paymentMethod26 = models.payment.Payment.generateMethod("");
        payment19.setPaymentMethod(paymentMethod26);
        models.payment.Payment.PaymentStatus paymentStatus28 = models.payment.Payment.PaymentStatus.PENDING;
        models.payment.Payment.PaymentType paymentType29 = null;
        models.payment.Payment payment30 = new models.payment.Payment(uUID10, booking11, (double) (byte) 0, paymentMethod26, paymentStatus28, paymentType29);
        payment6.setPaymentMethod(paymentMethod26);
        models.payment.Payment.PaymentType paymentType32 = payment6.getPaymentType();
        java.lang.Class<?> wildcardClass33 = payment6.getClass();
        org.junit.Assert.assertTrue("'" + paymentStatus4 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus4.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType5 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType5.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType7 + "' != '" + models.payment.Payment.PaymentType.DEPOSIT + "'", paymentType7.equals(models.payment.Payment.PaymentType.DEPOSIT));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID9);
        org.junit.Assert.assertTrue("'" + paymentStatus17 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus17.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType18 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType18.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType20 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType20.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID21);
        org.junit.Assert.assertTrue("'" + paymentType22 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType22.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod26);
        org.junit.Assert.assertTrue("'" + paymentStatus28 + "' != '" + models.payment.Payment.PaymentStatus.PENDING + "'", paymentStatus28.equals(models.payment.Payment.PaymentStatus.PENDING));
        org.junit.Assert.assertTrue("'" + paymentType32 + "' != '" + models.payment.Payment.PaymentType.DEPOSIT + "'", paymentType32.equals(models.payment.Payment.PaymentType.DEPOSIT));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass33);
    }

    @Test
    public void test218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test218");
        models.booking.Booking booking1 = null;
        models.booking.Booking booking3 = null;
        java.util.UUID uUID4 = null;
        models.booking.Booking booking5 = null;
        models.payment.PaymentMethod paymentMethod7 = null;
        models.payment.Payment.PaymentStatus paymentStatus8 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType9 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment10 = new models.payment.Payment(uUID4, booking5, 100.0d, paymentMethod7, paymentStatus8, paymentType9);
        models.payment.Payment.PaymentType paymentType11 = payment10.getPaymentType();
        java.util.UUID uUID12 = payment10.getBookingID();
        models.payment.Payment.PaymentType paymentType13 = models.payment.Payment.PaymentType.FINAL;
        payment10.setPaymentType(paymentType13);
        java.util.UUID uUID15 = payment10.getPaymentID();
        models.payment.PaymentMethod paymentMethod17 = models.payment.Payment.generateMethod("");
        payment10.setPaymentMethod(paymentMethod17);
        java.util.UUID uUID19 = null;
        models.booking.Booking booking20 = null;
        models.payment.PaymentMethod paymentMethod22 = null;
        models.payment.Payment.PaymentStatus paymentStatus23 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType24 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment25 = new models.payment.Payment(uUID19, booking20, 100.0d, paymentMethod22, paymentStatus23, paymentType24);
        models.payment.Payment.PaymentType paymentType26 = payment25.getPaymentType();
        models.payment.Payment.PaymentType paymentType27 = payment25.getPaymentType();
        models.payment.Payment payment28 = new models.payment.Payment((double) 10, booking3, paymentMethod17, paymentType27);
        models.payment.Payment.PaymentType paymentType29 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment30 = new models.payment.Payment((double) 0.0f, booking1, paymentMethod17, paymentType29);
        boolean boolean31 = payment30.processPayment();
        java.util.UUID uUID32 = null;
        models.booking.Booking booking33 = null;
        models.payment.PaymentMethod paymentMethod36 = models.payment.Payment.generateMethod("");
        java.util.UUID uUID37 = null;
        models.booking.Booking booking38 = null;
        models.payment.PaymentMethod paymentMethod40 = null;
        models.payment.Payment.PaymentStatus paymentStatus41 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType42 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment43 = new models.payment.Payment(uUID37, booking38, 100.0d, paymentMethod40, paymentStatus41, paymentType42);
        models.payment.Payment.PaymentStatus paymentStatus44 = payment43.getStatus();
        java.util.UUID uUID45 = null;
        models.booking.Booking booking46 = null;
        models.payment.PaymentMethod paymentMethod48 = null;
        models.payment.Payment.PaymentStatus paymentStatus49 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType50 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment51 = new models.payment.Payment(uUID45, booking46, 100.0d, paymentMethod48, paymentStatus49, paymentType50);
        models.payment.Payment.PaymentType paymentType52 = payment51.getPaymentType();
        java.util.UUID uUID53 = payment51.getBookingID();
        models.payment.Payment.PaymentType paymentType54 = models.payment.Payment.PaymentType.FINAL;
        payment51.setPaymentType(paymentType54);
        models.payment.PaymentMethod paymentMethod56 = payment51.getMethod();
        models.payment.Payment.PaymentType paymentType57 = payment51.getPaymentType();
        models.payment.Payment payment58 = new models.payment.Payment(uUID32, booking33, (double) 1L, paymentMethod36, paymentStatus44, paymentType57);
        payment30.setPaymentType(paymentType57);
        java.util.UUID uUID60 = payment30.getBookingID();
        org.junit.Assert.assertTrue("'" + paymentStatus8 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus8.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType9 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType9.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType11 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType11.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID12);
        org.junit.Assert.assertTrue("'" + paymentType13 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType13.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod17);
        org.junit.Assert.assertTrue("'" + paymentStatus23 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus23.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType24 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType24.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType26 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType26.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType27 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType27.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType29 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType29.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod36);
        org.junit.Assert.assertTrue("'" + paymentStatus41 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus41.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType42 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType42.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentStatus44 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus44.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentStatus49 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus49.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType50 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType50.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType52 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType52.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID53);
        org.junit.Assert.assertTrue("'" + paymentType54 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType54.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(paymentMethod56);
        org.junit.Assert.assertTrue("'" + paymentType57 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType57.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID60);
    }

    @Test
    public void test219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test219");
        java.util.UUID uUID0 = null;
        models.booking.Booking booking1 = null;
        models.payment.PaymentMethod paymentMethod3 = null;
        models.payment.Payment.PaymentStatus paymentStatus4 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType5 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment6 = new models.payment.Payment(uUID0, booking1, 100.0d, paymentMethod3, paymentStatus4, paymentType5);
        models.payment.Payment.PaymentType paymentType7 = payment6.getPaymentType();
        java.util.UUID uUID8 = payment6.getBookingID();
        models.payment.Payment.PaymentType paymentType9 = models.payment.Payment.PaymentType.FINAL;
        payment6.setPaymentType(paymentType9);
        java.util.UUID uUID11 = payment6.getPaymentID();
        models.payment.Payment.PaymentStatus paymentStatus12 = payment6.getStatus();
        org.junit.Assert.assertTrue("'" + paymentStatus4 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus4.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType5 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType5.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType7 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType7.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID8);
        org.junit.Assert.assertTrue("'" + paymentType9 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType9.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID11);
        org.junit.Assert.assertTrue("'" + paymentStatus12 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus12.equals(models.payment.Payment.PaymentStatus.FAILED));
    }

    @Test
    public void test220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test220");
        models.booking.Booking booking1 = null;
        models.booking.Booking booking3 = null;
        java.util.UUID uUID4 = null;
        models.booking.Booking booking5 = null;
        models.payment.PaymentMethod paymentMethod7 = null;
        models.payment.Payment.PaymentStatus paymentStatus8 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType9 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment10 = new models.payment.Payment(uUID4, booking5, 100.0d, paymentMethod7, paymentStatus8, paymentType9);
        models.payment.Payment.PaymentType paymentType11 = payment10.getPaymentType();
        java.util.UUID uUID12 = payment10.getBookingID();
        models.payment.Payment.PaymentType paymentType13 = models.payment.Payment.PaymentType.FINAL;
        payment10.setPaymentType(paymentType13);
        java.util.UUID uUID15 = payment10.getPaymentID();
        models.payment.PaymentMethod paymentMethod17 = models.payment.Payment.generateMethod("");
        payment10.setPaymentMethod(paymentMethod17);
        java.util.UUID uUID19 = null;
        models.booking.Booking booking20 = null;
        models.payment.PaymentMethod paymentMethod22 = null;
        models.payment.Payment.PaymentStatus paymentStatus23 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType24 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment25 = new models.payment.Payment(uUID19, booking20, 100.0d, paymentMethod22, paymentStatus23, paymentType24);
        models.payment.Payment.PaymentType paymentType26 = payment25.getPaymentType();
        models.payment.Payment.PaymentType paymentType27 = payment25.getPaymentType();
        models.payment.Payment payment28 = new models.payment.Payment((double) 10, booking3, paymentMethod17, paymentType27);
        java.util.UUID uUID29 = null;
        models.booking.Booking booking30 = null;
        models.payment.PaymentMethod paymentMethod32 = null;
        models.payment.Payment.PaymentStatus paymentStatus33 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType34 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment35 = new models.payment.Payment(uUID29, booking30, 100.0d, paymentMethod32, paymentStatus33, paymentType34);
        models.payment.Payment payment36 = new models.payment.Payment((double) '4', booking1, paymentMethod17, paymentType34);
        models.payment.Payment.PaymentType paymentType37 = null;
        payment36.setPaymentType(paymentType37);
        org.junit.Assert.assertTrue("'" + paymentStatus8 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus8.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType9 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType9.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType11 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType11.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID12);
        org.junit.Assert.assertTrue("'" + paymentType13 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType13.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod17);
        org.junit.Assert.assertTrue("'" + paymentStatus23 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus23.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType24 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType24.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType26 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType26.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType27 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType27.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentStatus33 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus33.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType34 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType34.equals(models.payment.Payment.PaymentType.FINAL));
    }

    @Test
    public void test221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test221");
        java.util.UUID uUID0 = null;
        models.booking.Booking booking1 = null;
        models.payment.PaymentMethod paymentMethod3 = null;
        models.payment.Payment.PaymentStatus paymentStatus4 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType5 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment6 = new models.payment.Payment(uUID0, booking1, 100.0d, paymentMethod3, paymentStatus4, paymentType5);
        models.payment.Payment.PaymentType paymentType7 = payment6.getPaymentType();
        java.util.UUID uUID8 = payment6.getBookingID();
        models.payment.PaymentMethod paymentMethod9 = payment6.getMethod();
        models.payment.Payment.PaymentType paymentType10 = payment6.getPaymentType();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean11 = payment6.processPayment();
            org.junit.Assert.fail("Expected exception of type models.ParkingSystemException; message: Cannot process payment of a payment that is not pending.");
        } catch (models.ParkingSystemException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + paymentStatus4 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus4.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType5 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType5.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType7 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType7.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(paymentMethod9);
        org.junit.Assert.assertTrue("'" + paymentType10 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType10.equals(models.payment.Payment.PaymentType.FINAL));
    }

    @Test
    public void test222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test222");
        java.util.UUID uUID0 = null;
        models.booking.Booking booking1 = null;
        java.util.UUID uUID3 = null;
        models.booking.Booking booking4 = null;
        models.payment.PaymentMethod paymentMethod6 = null;
        models.payment.Payment.PaymentStatus paymentStatus7 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType8 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment9 = new models.payment.Payment(uUID3, booking4, 100.0d, paymentMethod6, paymentStatus7, paymentType8);
        models.payment.Payment.PaymentType paymentType10 = payment9.getPaymentType();
        java.util.UUID uUID11 = payment9.getBookingID();
        models.payment.Payment.PaymentType paymentType12 = models.payment.Payment.PaymentType.FINAL;
        payment9.setPaymentType(paymentType12);
        java.util.UUID uUID14 = payment9.getPaymentID();
        models.payment.PaymentMethod paymentMethod16 = models.payment.Payment.generateMethod("");
        payment9.setPaymentMethod(paymentMethod16);
        models.payment.Payment.PaymentStatus paymentStatus18 = models.payment.Payment.PaymentStatus.PENDING;
        models.payment.Payment.PaymentType paymentType19 = null;
        models.payment.Payment payment20 = new models.payment.Payment(uUID0, booking1, (double) (byte) 0, paymentMethod16, paymentStatus18, paymentType19);
        models.payment.Payment.PaymentType paymentType21 = payment20.getPaymentType();
        java.util.UUID uUID22 = null;
        models.booking.Booking booking23 = null;
        java.util.UUID uUID25 = null;
        models.booking.Booking booking26 = null;
        models.payment.PaymentMethod paymentMethod29 = models.payment.Payment.generateMethod("");
        java.util.UUID uUID30 = null;
        models.booking.Booking booking31 = null;
        models.payment.PaymentMethod paymentMethod33 = null;
        models.payment.Payment.PaymentStatus paymentStatus34 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType35 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment36 = new models.payment.Payment(uUID30, booking31, 100.0d, paymentMethod33, paymentStatus34, paymentType35);
        models.payment.Payment.PaymentStatus paymentStatus37 = payment36.getStatus();
        java.util.UUID uUID38 = null;
        models.booking.Booking booking39 = null;
        models.payment.PaymentMethod paymentMethod41 = null;
        models.payment.Payment.PaymentStatus paymentStatus42 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType43 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment44 = new models.payment.Payment(uUID38, booking39, 100.0d, paymentMethod41, paymentStatus42, paymentType43);
        models.payment.Payment.PaymentType paymentType45 = payment44.getPaymentType();
        java.util.UUID uUID46 = payment44.getBookingID();
        models.payment.Payment.PaymentType paymentType47 = models.payment.Payment.PaymentType.FINAL;
        payment44.setPaymentType(paymentType47);
        models.payment.PaymentMethod paymentMethod49 = payment44.getMethod();
        models.payment.Payment.PaymentType paymentType50 = payment44.getPaymentType();
        models.payment.Payment payment51 = new models.payment.Payment(uUID25, booking26, (double) 1L, paymentMethod29, paymentStatus37, paymentType50);
        java.util.UUID uUID52 = null;
        models.booking.Booking booking53 = null;
        models.payment.PaymentMethod paymentMethod55 = null;
        models.payment.Payment.PaymentStatus paymentStatus56 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType57 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment58 = new models.payment.Payment(uUID52, booking53, 100.0d, paymentMethod55, paymentStatus56, paymentType57);
        models.payment.Payment.PaymentStatus paymentStatus59 = payment58.getStatus();
        models.booking.Booking booking61 = null;
        java.util.UUID uUID62 = null;
        models.booking.Booking booking63 = null;
        models.payment.PaymentMethod paymentMethod65 = null;
        models.payment.Payment.PaymentStatus paymentStatus66 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType67 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment68 = new models.payment.Payment(uUID62, booking63, 100.0d, paymentMethod65, paymentStatus66, paymentType67);
        models.payment.Payment.PaymentType paymentType69 = payment68.getPaymentType();
        java.util.UUID uUID70 = payment68.getBookingID();
        models.payment.Payment.PaymentType paymentType71 = models.payment.Payment.PaymentType.FINAL;
        payment68.setPaymentType(paymentType71);
        java.util.UUID uUID73 = payment68.getPaymentID();
        models.payment.PaymentMethod paymentMethod75 = models.payment.Payment.generateMethod("");
        payment68.setPaymentMethod(paymentMethod75);
        java.util.UUID uUID77 = null;
        models.booking.Booking booking78 = null;
        models.payment.PaymentMethod paymentMethod80 = null;
        models.payment.Payment.PaymentStatus paymentStatus81 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType82 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment83 = new models.payment.Payment(uUID77, booking78, 100.0d, paymentMethod80, paymentStatus81, paymentType82);
        models.payment.Payment.PaymentType paymentType84 = payment83.getPaymentType();
        models.payment.Payment.PaymentType paymentType85 = payment83.getPaymentType();
        models.payment.Payment payment86 = new models.payment.Payment((double) 10, booking61, paymentMethod75, paymentType85);
        models.payment.Payment payment87 = new models.payment.Payment(uUID22, booking23, (double) (-1), paymentMethod29, paymentStatus59, paymentType85);
        payment20.setPaymentMethod(paymentMethod29);
        java.util.UUID uUID89 = payment20.getPaymentID();
        org.junit.Assert.assertTrue("'" + paymentStatus7 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus7.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType8 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType8.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType10 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType10.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID11);
        org.junit.Assert.assertTrue("'" + paymentType12 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType12.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod16);
        org.junit.Assert.assertTrue("'" + paymentStatus18 + "' != '" + models.payment.Payment.PaymentStatus.PENDING + "'", paymentStatus18.equals(models.payment.Payment.PaymentStatus.PENDING));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(paymentType21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod29);
        org.junit.Assert.assertTrue("'" + paymentStatus34 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus34.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType35 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType35.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentStatus37 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus37.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentStatus42 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus42.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType43 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType43.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType45 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType45.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID46);
        org.junit.Assert.assertTrue("'" + paymentType47 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType47.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(paymentMethod49);
        org.junit.Assert.assertTrue("'" + paymentType50 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType50.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentStatus56 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus56.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType57 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType57.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentStatus59 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus59.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentStatus66 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus66.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType67 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType67.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType69 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType69.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID70);
        org.junit.Assert.assertTrue("'" + paymentType71 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType71.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod75);
        org.junit.Assert.assertTrue("'" + paymentStatus81 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus81.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType82 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType82.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType84 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType84.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType85 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType85.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID89);
    }

    @Test
    public void test223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test223");
        java.util.UUID uUID0 = null;
        models.booking.Booking booking1 = null;
        models.payment.PaymentMethod paymentMethod3 = null;
        models.payment.Payment.PaymentStatus paymentStatus4 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType5 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment6 = new models.payment.Payment(uUID0, booking1, (-1.0d), paymentMethod3, paymentStatus4, paymentType5);
        models.booking.Booking booking7 = payment6.getBooking();
        java.util.UUID uUID8 = payment6.getBookingID();
        models.payment.PaymentMethod paymentMethod9 = payment6.getMethod();
        models.payment.Payment.PaymentStatus paymentStatus10 = payment6.getStatus();
        org.junit.Assert.assertTrue("'" + paymentStatus4 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus4.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType5 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType5.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(booking7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(paymentMethod9);
        org.junit.Assert.assertTrue("'" + paymentStatus10 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus10.equals(models.payment.Payment.PaymentStatus.FAILED));
    }

    @Test
    public void test224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test224");
        java.util.UUID uUID0 = null;
        models.booking.Booking booking1 = null;
        models.payment.PaymentMethod paymentMethod3 = null;
        models.payment.Payment.PaymentStatus paymentStatus4 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType5 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment6 = new models.payment.Payment(uUID0, booking1, 100.0d, paymentMethod3, paymentStatus4, paymentType5);
        double double7 = payment6.getAmount();
        java.util.UUID uUID8 = payment6.getPaymentID();
        java.util.UUID uUID9 = null;
        models.booking.Booking booking10 = null;
        models.payment.PaymentMethod paymentMethod12 = null;
        models.payment.Payment.PaymentStatus paymentStatus13 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType14 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment15 = new models.payment.Payment(uUID9, booking10, 100.0d, paymentMethod12, paymentStatus13, paymentType14);
        models.payment.Payment.PaymentType paymentType16 = payment15.getPaymentType();
        java.util.UUID uUID17 = payment15.getBookingID();
        java.util.UUID uUID18 = payment15.getPaymentID();
        java.util.UUID uUID19 = null;
        models.booking.Booking booking20 = null;
        models.payment.PaymentMethod paymentMethod22 = null;
        models.payment.Payment.PaymentStatus paymentStatus23 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType24 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment25 = new models.payment.Payment(uUID19, booking20, 100.0d, paymentMethod22, paymentStatus23, paymentType24);
        models.payment.Payment.PaymentType paymentType26 = models.payment.Payment.PaymentType.DEPOSIT;
        payment25.setPaymentType(paymentType26);
        java.util.UUID uUID28 = null;
        models.booking.Booking booking29 = null;
        java.util.UUID uUID31 = null;
        models.booking.Booking booking32 = null;
        models.payment.PaymentMethod paymentMethod35 = models.payment.Payment.generateMethod("");
        java.util.UUID uUID36 = null;
        models.booking.Booking booking37 = null;
        models.payment.PaymentMethod paymentMethod39 = null;
        models.payment.Payment.PaymentStatus paymentStatus40 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType41 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment42 = new models.payment.Payment(uUID36, booking37, 100.0d, paymentMethod39, paymentStatus40, paymentType41);
        models.payment.Payment.PaymentStatus paymentStatus43 = payment42.getStatus();
        java.util.UUID uUID44 = null;
        models.booking.Booking booking45 = null;
        models.payment.PaymentMethod paymentMethod47 = null;
        models.payment.Payment.PaymentStatus paymentStatus48 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType49 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment50 = new models.payment.Payment(uUID44, booking45, 100.0d, paymentMethod47, paymentStatus48, paymentType49);
        models.payment.Payment.PaymentType paymentType51 = payment50.getPaymentType();
        java.util.UUID uUID52 = payment50.getBookingID();
        models.payment.Payment.PaymentType paymentType53 = models.payment.Payment.PaymentType.FINAL;
        payment50.setPaymentType(paymentType53);
        models.payment.PaymentMethod paymentMethod55 = payment50.getMethod();
        models.payment.Payment.PaymentType paymentType56 = payment50.getPaymentType();
        models.payment.Payment payment57 = new models.payment.Payment(uUID31, booking32, (double) 1L, paymentMethod35, paymentStatus43, paymentType56);
        java.util.UUID uUID58 = null;
        models.booking.Booking booking59 = null;
        models.payment.PaymentMethod paymentMethod61 = null;
        models.payment.Payment.PaymentStatus paymentStatus62 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType63 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment64 = new models.payment.Payment(uUID58, booking59, 100.0d, paymentMethod61, paymentStatus62, paymentType63);
        models.payment.Payment.PaymentStatus paymentStatus65 = payment64.getStatus();
        models.booking.Booking booking67 = null;
        java.util.UUID uUID68 = null;
        models.booking.Booking booking69 = null;
        models.payment.PaymentMethod paymentMethod71 = null;
        models.payment.Payment.PaymentStatus paymentStatus72 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType73 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment74 = new models.payment.Payment(uUID68, booking69, 100.0d, paymentMethod71, paymentStatus72, paymentType73);
        models.payment.Payment.PaymentType paymentType75 = payment74.getPaymentType();
        java.util.UUID uUID76 = payment74.getBookingID();
        models.payment.Payment.PaymentType paymentType77 = models.payment.Payment.PaymentType.FINAL;
        payment74.setPaymentType(paymentType77);
        java.util.UUID uUID79 = payment74.getPaymentID();
        models.payment.PaymentMethod paymentMethod81 = models.payment.Payment.generateMethod("");
        payment74.setPaymentMethod(paymentMethod81);
        java.util.UUID uUID83 = null;
        models.booking.Booking booking84 = null;
        models.payment.PaymentMethod paymentMethod86 = null;
        models.payment.Payment.PaymentStatus paymentStatus87 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType88 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment89 = new models.payment.Payment(uUID83, booking84, 100.0d, paymentMethod86, paymentStatus87, paymentType88);
        models.payment.Payment.PaymentType paymentType90 = payment89.getPaymentType();
        models.payment.Payment.PaymentType paymentType91 = payment89.getPaymentType();
        models.payment.Payment payment92 = new models.payment.Payment((double) 10, booking67, paymentMethod81, paymentType91);
        models.payment.Payment payment93 = new models.payment.Payment(uUID28, booking29, (double) (-1), paymentMethod35, paymentStatus65, paymentType91);
        payment25.setPaymentMethod(paymentMethod35);
        payment15.setPaymentMethod(paymentMethod35);
        payment6.setPaymentMethod(paymentMethod35);
        org.junit.Assert.assertTrue("'" + paymentStatus4 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus4.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType5 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType5.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 100.0d + "'", double7 == 100.0d);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID8);
        org.junit.Assert.assertTrue("'" + paymentStatus13 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus13.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType14 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType14.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType16 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType16.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID18);
        org.junit.Assert.assertTrue("'" + paymentStatus23 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus23.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType24 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType24.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType26 + "' != '" + models.payment.Payment.PaymentType.DEPOSIT + "'", paymentType26.equals(models.payment.Payment.PaymentType.DEPOSIT));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod35);
        org.junit.Assert.assertTrue("'" + paymentStatus40 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus40.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType41 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType41.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentStatus43 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus43.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentStatus48 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus48.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType49 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType49.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType51 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType51.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID52);
        org.junit.Assert.assertTrue("'" + paymentType53 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType53.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(paymentMethod55);
        org.junit.Assert.assertTrue("'" + paymentType56 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType56.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentStatus62 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus62.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType63 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType63.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentStatus65 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus65.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentStatus72 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus72.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType73 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType73.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType75 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType75.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID76);
        org.junit.Assert.assertTrue("'" + paymentType77 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType77.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod81);
        org.junit.Assert.assertTrue("'" + paymentStatus87 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus87.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType88 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType88.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType90 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType90.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType91 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType91.equals(models.payment.Payment.PaymentType.FINAL));
    }

    @Test
    public void test225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test225");
        java.util.UUID uUID0 = null;
        models.booking.Booking booking1 = null;
        models.payment.PaymentMethod paymentMethod3 = null;
        models.payment.Payment.PaymentStatus paymentStatus4 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType5 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment6 = new models.payment.Payment(uUID0, booking1, 100.0d, paymentMethod3, paymentStatus4, paymentType5);
        models.payment.Payment.PaymentType paymentType7 = payment6.getPaymentType();
        java.util.UUID uUID8 = payment6.getBookingID();
        models.payment.Payment.PaymentType paymentType9 = models.payment.Payment.PaymentType.FINAL;
        payment6.setPaymentType(paymentType9);
        models.payment.PaymentMethod paymentMethod11 = payment6.getMethod();
        models.payment.Payment.PaymentType paymentType12 = payment6.getPaymentType();
        models.payment.Payment.PaymentStatus paymentStatus13 = payment6.getStatus();
        double double14 = payment6.getAmount();
        org.junit.Assert.assertTrue("'" + paymentStatus4 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus4.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType5 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType5.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType7 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType7.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID8);
        org.junit.Assert.assertTrue("'" + paymentType9 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType9.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(paymentMethod11);
        org.junit.Assert.assertTrue("'" + paymentType12 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType12.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentStatus13 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus13.equals(models.payment.Payment.PaymentStatus.FAILED));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 100.0d + "'", double14 == 100.0d);
    }

    @Test
    public void test226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test226");
        java.util.UUID uUID0 = null;
        models.booking.Booking booking1 = null;
        models.payment.PaymentMethod paymentMethod3 = null;
        models.payment.Payment.PaymentStatus paymentStatus4 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType5 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment6 = new models.payment.Payment(uUID0, booking1, 100.0d, paymentMethod3, paymentStatus4, paymentType5);
        models.payment.Payment.PaymentType paymentType7 = payment6.getPaymentType();
        java.util.UUID uUID8 = payment6.getBookingID();
        models.payment.Payment.PaymentType paymentType9 = models.payment.Payment.PaymentType.FINAL;
        payment6.setPaymentType(paymentType9);
        java.util.UUID uUID11 = payment6.getPaymentID();
        double double12 = payment6.getAmount();
        java.util.UUID uUID13 = null;
        models.booking.Booking booking14 = null;
        models.payment.PaymentMethod paymentMethod16 = null;
        models.payment.Payment.PaymentStatus paymentStatus17 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType18 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment19 = new models.payment.Payment(uUID13, booking14, 100.0d, paymentMethod16, paymentStatus17, paymentType18);
        payment6.setPaymentType(paymentType18);
        models.booking.Booking booking22 = null;
        models.booking.Booking booking24 = null;
        java.util.UUID uUID25 = null;
        models.booking.Booking booking26 = null;
        models.payment.PaymentMethod paymentMethod28 = null;
        models.payment.Payment.PaymentStatus paymentStatus29 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType30 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment31 = new models.payment.Payment(uUID25, booking26, 100.0d, paymentMethod28, paymentStatus29, paymentType30);
        models.payment.Payment.PaymentType paymentType32 = payment31.getPaymentType();
        java.util.UUID uUID33 = payment31.getBookingID();
        models.payment.Payment.PaymentType paymentType34 = models.payment.Payment.PaymentType.FINAL;
        payment31.setPaymentType(paymentType34);
        java.util.UUID uUID36 = payment31.getPaymentID();
        models.payment.PaymentMethod paymentMethod38 = models.payment.Payment.generateMethod("");
        payment31.setPaymentMethod(paymentMethod38);
        java.util.UUID uUID40 = null;
        models.booking.Booking booking41 = null;
        models.payment.PaymentMethod paymentMethod43 = null;
        models.payment.Payment.PaymentStatus paymentStatus44 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType45 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment46 = new models.payment.Payment(uUID40, booking41, 100.0d, paymentMethod43, paymentStatus44, paymentType45);
        models.payment.Payment.PaymentType paymentType47 = payment46.getPaymentType();
        models.payment.Payment.PaymentType paymentType48 = payment46.getPaymentType();
        models.payment.Payment payment49 = new models.payment.Payment((double) 10, booking24, paymentMethod38, paymentType48);
        java.util.UUID uUID50 = null;
        models.booking.Booking booking51 = null;
        models.payment.PaymentMethod paymentMethod53 = null;
        models.payment.Payment.PaymentStatus paymentStatus54 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType55 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment56 = new models.payment.Payment(uUID50, booking51, 100.0d, paymentMethod53, paymentStatus54, paymentType55);
        models.payment.Payment.PaymentType paymentType57 = payment56.getPaymentType();
        java.util.UUID uUID58 = payment56.getBookingID();
        models.payment.Payment.PaymentType paymentType59 = models.payment.Payment.PaymentType.FINAL;
        payment56.setPaymentType(paymentType59);
        models.payment.PaymentMethod paymentMethod61 = payment56.getMethod();
        models.payment.Payment.PaymentType paymentType62 = payment56.getPaymentType();
        models.payment.Payment payment63 = new models.payment.Payment((double) 0, booking22, paymentMethod38, paymentType62);
        payment6.setPaymentMethod(paymentMethod38);
        java.util.UUID uUID65 = payment6.getPaymentID();
        org.junit.Assert.assertTrue("'" + paymentStatus4 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus4.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType5 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType5.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType7 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType7.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID8);
        org.junit.Assert.assertTrue("'" + paymentType9 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType9.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 100.0d + "'", double12 == 100.0d);
        org.junit.Assert.assertTrue("'" + paymentStatus17 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus17.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType18 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType18.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentStatus29 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus29.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType30 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType30.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType32 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType32.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID33);
        org.junit.Assert.assertTrue("'" + paymentType34 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType34.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod38);
        org.junit.Assert.assertTrue("'" + paymentStatus44 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus44.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType45 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType45.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType47 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType47.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType48 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType48.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentStatus54 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus54.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType55 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType55.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType57 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType57.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID58);
        org.junit.Assert.assertTrue("'" + paymentType59 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType59.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(paymentMethod61);
        org.junit.Assert.assertTrue("'" + paymentType62 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType62.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID65);
    }

    @Test
    public void test227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test227");
        java.util.UUID uUID0 = null;
        models.booking.Booking booking1 = null;
        models.payment.PaymentMethod paymentMethod3 = null;
        models.payment.Payment.PaymentStatus paymentStatus4 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType5 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment6 = new models.payment.Payment(uUID0, booking1, 100.0d, paymentMethod3, paymentStatus4, paymentType5);
        models.payment.Payment.PaymentType paymentType7 = models.payment.Payment.PaymentType.DEPOSIT;
        payment6.setPaymentType(paymentType7);
        java.util.UUID uUID9 = null;
        models.booking.Booking booking10 = null;
        java.util.UUID uUID12 = null;
        models.booking.Booking booking13 = null;
        models.payment.PaymentMethod paymentMethod16 = models.payment.Payment.generateMethod("");
        java.util.UUID uUID17 = null;
        models.booking.Booking booking18 = null;
        models.payment.PaymentMethod paymentMethod20 = null;
        models.payment.Payment.PaymentStatus paymentStatus21 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType22 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment23 = new models.payment.Payment(uUID17, booking18, 100.0d, paymentMethod20, paymentStatus21, paymentType22);
        models.payment.Payment.PaymentStatus paymentStatus24 = payment23.getStatus();
        java.util.UUID uUID25 = null;
        models.booking.Booking booking26 = null;
        models.payment.PaymentMethod paymentMethod28 = null;
        models.payment.Payment.PaymentStatus paymentStatus29 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType30 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment31 = new models.payment.Payment(uUID25, booking26, 100.0d, paymentMethod28, paymentStatus29, paymentType30);
        models.payment.Payment.PaymentType paymentType32 = payment31.getPaymentType();
        java.util.UUID uUID33 = payment31.getBookingID();
        models.payment.Payment.PaymentType paymentType34 = models.payment.Payment.PaymentType.FINAL;
        payment31.setPaymentType(paymentType34);
        models.payment.PaymentMethod paymentMethod36 = payment31.getMethod();
        models.payment.Payment.PaymentType paymentType37 = payment31.getPaymentType();
        models.payment.Payment payment38 = new models.payment.Payment(uUID12, booking13, (double) 1L, paymentMethod16, paymentStatus24, paymentType37);
        java.util.UUID uUID39 = null;
        models.booking.Booking booking40 = null;
        models.payment.PaymentMethod paymentMethod42 = null;
        models.payment.Payment.PaymentStatus paymentStatus43 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType44 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment45 = new models.payment.Payment(uUID39, booking40, 100.0d, paymentMethod42, paymentStatus43, paymentType44);
        models.payment.Payment.PaymentStatus paymentStatus46 = payment45.getStatus();
        models.booking.Booking booking48 = null;
        java.util.UUID uUID49 = null;
        models.booking.Booking booking50 = null;
        models.payment.PaymentMethod paymentMethod52 = null;
        models.payment.Payment.PaymentStatus paymentStatus53 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType54 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment55 = new models.payment.Payment(uUID49, booking50, 100.0d, paymentMethod52, paymentStatus53, paymentType54);
        models.payment.Payment.PaymentType paymentType56 = payment55.getPaymentType();
        java.util.UUID uUID57 = payment55.getBookingID();
        models.payment.Payment.PaymentType paymentType58 = models.payment.Payment.PaymentType.FINAL;
        payment55.setPaymentType(paymentType58);
        java.util.UUID uUID60 = payment55.getPaymentID();
        models.payment.PaymentMethod paymentMethod62 = models.payment.Payment.generateMethod("");
        payment55.setPaymentMethod(paymentMethod62);
        java.util.UUID uUID64 = null;
        models.booking.Booking booking65 = null;
        models.payment.PaymentMethod paymentMethod67 = null;
        models.payment.Payment.PaymentStatus paymentStatus68 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType69 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment70 = new models.payment.Payment(uUID64, booking65, 100.0d, paymentMethod67, paymentStatus68, paymentType69);
        models.payment.Payment.PaymentType paymentType71 = payment70.getPaymentType();
        models.payment.Payment.PaymentType paymentType72 = payment70.getPaymentType();
        models.payment.Payment payment73 = new models.payment.Payment((double) 10, booking48, paymentMethod62, paymentType72);
        models.payment.Payment payment74 = new models.payment.Payment(uUID9, booking10, (double) (-1), paymentMethod16, paymentStatus46, paymentType72);
        payment6.setPaymentMethod(paymentMethod16);
        double double76 = payment6.getAmount();
        org.junit.Assert.assertTrue("'" + paymentStatus4 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus4.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType5 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType5.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType7 + "' != '" + models.payment.Payment.PaymentType.DEPOSIT + "'", paymentType7.equals(models.payment.Payment.PaymentType.DEPOSIT));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod16);
        org.junit.Assert.assertTrue("'" + paymentStatus21 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus21.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType22 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType22.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentStatus24 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus24.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentStatus29 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus29.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType30 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType30.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType32 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType32.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID33);
        org.junit.Assert.assertTrue("'" + paymentType34 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType34.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(paymentMethod36);
        org.junit.Assert.assertTrue("'" + paymentType37 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType37.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentStatus43 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus43.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType44 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType44.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentStatus46 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus46.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentStatus53 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus53.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType54 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType54.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType56 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType56.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID57);
        org.junit.Assert.assertTrue("'" + paymentType58 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType58.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod62);
        org.junit.Assert.assertTrue("'" + paymentStatus68 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus68.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType69 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType69.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType71 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType71.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType72 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType72.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 100.0d + "'", double76 == 100.0d);
    }

    @Test
    public void test228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test228");
        java.util.UUID uUID0 = null;
        models.booking.Booking booking1 = null;
        java.util.UUID uUID3 = null;
        models.booking.Booking booking4 = null;
        java.util.UUID uUID6 = null;
        models.booking.Booking booking7 = null;
        models.payment.PaymentMethod paymentMethod9 = null;
        models.payment.Payment.PaymentStatus paymentStatus10 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType11 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment12 = new models.payment.Payment(uUID6, booking7, 100.0d, paymentMethod9, paymentStatus10, paymentType11);
        models.payment.Payment.PaymentType paymentType13 = payment12.getPaymentType();
        java.util.UUID uUID14 = payment12.getBookingID();
        models.payment.Payment.PaymentType paymentType15 = models.payment.Payment.PaymentType.FINAL;
        payment12.setPaymentType(paymentType15);
        java.util.UUID uUID17 = payment12.getPaymentID();
        models.payment.PaymentMethod paymentMethod19 = models.payment.Payment.generateMethod("");
        payment12.setPaymentMethod(paymentMethod19);
        models.payment.Payment.PaymentStatus paymentStatus21 = models.payment.Payment.PaymentStatus.PENDING;
        models.payment.Payment.PaymentType paymentType22 = null;
        models.payment.Payment payment23 = new models.payment.Payment(uUID3, booking4, (double) (byte) 0, paymentMethod19, paymentStatus21, paymentType22);
        models.payment.Payment.PaymentStatus paymentStatus24 = models.payment.Payment.PaymentStatus.PENDING;
        models.payment.Payment.PaymentType paymentType25 = models.payment.Payment.PaymentType.DEPOSIT;
        models.payment.Payment payment26 = new models.payment.Payment(uUID0, booking1, (double) (byte) 100, paymentMethod19, paymentStatus24, paymentType25);
        models.booking.Booking booking27 = payment26.getBooking();
        models.payment.PaymentMethod paymentMethod28 = payment26.getMethod();
        java.util.UUID uUID29 = payment26.getPaymentID();
        org.junit.Assert.assertTrue("'" + paymentStatus10 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus10.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType11 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType11.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType13 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType13.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID14);
        org.junit.Assert.assertTrue("'" + paymentType15 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType15.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod19);
        org.junit.Assert.assertTrue("'" + paymentStatus21 + "' != '" + models.payment.Payment.PaymentStatus.PENDING + "'", paymentStatus21.equals(models.payment.Payment.PaymentStatus.PENDING));
        org.junit.Assert.assertTrue("'" + paymentStatus24 + "' != '" + models.payment.Payment.PaymentStatus.PENDING + "'", paymentStatus24.equals(models.payment.Payment.PaymentStatus.PENDING));
        org.junit.Assert.assertTrue("'" + paymentType25 + "' != '" + models.payment.Payment.PaymentType.DEPOSIT + "'", paymentType25.equals(models.payment.Payment.PaymentType.DEPOSIT));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(booking27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID29);
    }

    @Test
    public void test229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test229");
        java.util.UUID uUID0 = null;
        models.booking.Booking booking1 = null;
        models.payment.PaymentMethod paymentMethod3 = null;
        models.payment.Payment.PaymentStatus paymentStatus4 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType5 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment6 = new models.payment.Payment(uUID0, booking1, 100.0d, paymentMethod3, paymentStatus4, paymentType5);
        double double7 = payment6.getAmount();
        models.booking.Booking booking8 = payment6.getBooking();
        models.booking.Booking booking9 = payment6.getBooking();
        java.util.UUID uUID10 = payment6.getBookingID();
        models.booking.Booking booking11 = payment6.getBooking();
        models.booking.Booking booking12 = payment6.getBooking();
        org.junit.Assert.assertTrue("'" + paymentStatus4 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus4.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType5 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType5.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 100.0d + "'", double7 == 100.0d);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(booking8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(booking9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(booking11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(booking12);
    }

    @Test
    public void test230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test230");
        java.util.UUID uUID0 = null;
        models.booking.Booking booking1 = null;
        java.util.UUID uUID3 = null;
        models.booking.Booking booking4 = null;
        java.util.UUID uUID6 = null;
        models.booking.Booking booking7 = null;
        models.payment.PaymentMethod paymentMethod9 = null;
        models.payment.Payment.PaymentStatus paymentStatus10 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType11 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment12 = new models.payment.Payment(uUID6, booking7, 100.0d, paymentMethod9, paymentStatus10, paymentType11);
        models.payment.Payment.PaymentType paymentType13 = payment12.getPaymentType();
        java.util.UUID uUID14 = payment12.getBookingID();
        models.payment.Payment.PaymentType paymentType15 = models.payment.Payment.PaymentType.FINAL;
        payment12.setPaymentType(paymentType15);
        java.util.UUID uUID17 = payment12.getPaymentID();
        models.payment.PaymentMethod paymentMethod19 = models.payment.Payment.generateMethod("");
        payment12.setPaymentMethod(paymentMethod19);
        models.payment.Payment.PaymentStatus paymentStatus21 = models.payment.Payment.PaymentStatus.PENDING;
        models.payment.Payment.PaymentType paymentType22 = null;
        models.payment.Payment payment23 = new models.payment.Payment(uUID3, booking4, (double) (byte) 0, paymentMethod19, paymentStatus21, paymentType22);
        models.payment.Payment.PaymentStatus paymentStatus24 = models.payment.Payment.PaymentStatus.PENDING;
        models.payment.Payment.PaymentType paymentType25 = models.payment.Payment.PaymentType.DEPOSIT;
        models.payment.Payment payment26 = new models.payment.Payment(uUID0, booking1, (double) (byte) 100, paymentMethod19, paymentStatus24, paymentType25);
        models.booking.Booking booking27 = payment26.getBooking();
        double double28 = payment26.getAmount();
        java.util.UUID uUID29 = payment26.getBookingID();
        java.util.UUID uUID30 = null;
        models.booking.Booking booking31 = null;
        java.util.UUID uUID33 = null;
        models.booking.Booking booking34 = null;
        models.payment.PaymentMethod paymentMethod36 = null;
        models.payment.Payment.PaymentStatus paymentStatus37 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType38 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment39 = new models.payment.Payment(uUID33, booking34, 100.0d, paymentMethod36, paymentStatus37, paymentType38);
        java.util.UUID uUID40 = null;
        models.booking.Booking booking41 = null;
        java.util.UUID uUID43 = null;
        models.booking.Booking booking44 = null;
        models.payment.PaymentMethod paymentMethod46 = null;
        models.payment.Payment.PaymentStatus paymentStatus47 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType48 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment49 = new models.payment.Payment(uUID43, booking44, 100.0d, paymentMethod46, paymentStatus47, paymentType48);
        models.payment.Payment.PaymentType paymentType50 = payment49.getPaymentType();
        java.util.UUID uUID51 = payment49.getBookingID();
        models.payment.Payment.PaymentType paymentType52 = models.payment.Payment.PaymentType.FINAL;
        payment49.setPaymentType(paymentType52);
        java.util.UUID uUID54 = payment49.getPaymentID();
        models.payment.PaymentMethod paymentMethod56 = models.payment.Payment.generateMethod("");
        payment49.setPaymentMethod(paymentMethod56);
        models.payment.Payment.PaymentStatus paymentStatus58 = models.payment.Payment.PaymentStatus.PENDING;
        models.payment.Payment.PaymentType paymentType59 = null;
        models.payment.Payment payment60 = new models.payment.Payment(uUID40, booking41, (double) (byte) 0, paymentMethod56, paymentStatus58, paymentType59);
        payment39.setPaymentMethod(paymentMethod56);
        java.util.UUID uUID62 = null;
        models.booking.Booking booking63 = null;
        java.util.UUID uUID65 = null;
        models.booking.Booking booking66 = null;
        models.payment.PaymentMethod paymentMethod68 = null;
        models.payment.Payment.PaymentStatus paymentStatus69 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType70 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment71 = new models.payment.Payment(uUID65, booking66, 100.0d, paymentMethod68, paymentStatus69, paymentType70);
        models.payment.Payment.PaymentType paymentType72 = payment71.getPaymentType();
        java.util.UUID uUID73 = payment71.getBookingID();
        models.payment.Payment.PaymentType paymentType74 = models.payment.Payment.PaymentType.FINAL;
        payment71.setPaymentType(paymentType74);
        java.util.UUID uUID76 = payment71.getPaymentID();
        models.payment.PaymentMethod paymentMethod78 = models.payment.Payment.generateMethod("");
        payment71.setPaymentMethod(paymentMethod78);
        models.payment.Payment.PaymentStatus paymentStatus80 = models.payment.Payment.PaymentStatus.PENDING;
        models.payment.Payment.PaymentType paymentType81 = null;
        models.payment.Payment payment82 = new models.payment.Payment(uUID62, booking63, (double) (byte) 0, paymentMethod78, paymentStatus80, paymentType81);
        models.payment.Payment.PaymentStatus paymentStatus83 = payment82.getStatus();
        java.util.UUID uUID84 = null;
        models.booking.Booking booking85 = null;
        models.payment.PaymentMethod paymentMethod87 = null;
        models.payment.Payment.PaymentStatus paymentStatus88 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType89 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment90 = new models.payment.Payment(uUID84, booking85, 100.0d, paymentMethod87, paymentStatus88, paymentType89);
        models.payment.Payment.PaymentType paymentType91 = payment90.getPaymentType();
        java.util.UUID uUID92 = payment90.getBookingID();
        models.payment.Payment.PaymentType paymentType93 = models.payment.Payment.PaymentType.FINAL;
        payment90.setPaymentType(paymentType93);
        models.payment.Payment payment95 = new models.payment.Payment(uUID30, booking31, (double) 'a', paymentMethod56, paymentStatus83, paymentType93);
        java.util.UUID uUID96 = payment95.getBookingID();
        models.payment.Payment.PaymentType paymentType97 = payment95.getPaymentType();
        payment26.setPaymentType(paymentType97);
        boolean boolean99 = payment26.processPayment();
        org.junit.Assert.assertTrue("'" + paymentStatus10 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus10.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType11 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType11.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType13 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType13.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID14);
        org.junit.Assert.assertTrue("'" + paymentType15 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType15.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod19);
        org.junit.Assert.assertTrue("'" + paymentStatus21 + "' != '" + models.payment.Payment.PaymentStatus.PENDING + "'", paymentStatus21.equals(models.payment.Payment.PaymentStatus.PENDING));
        org.junit.Assert.assertTrue("'" + paymentStatus24 + "' != '" + models.payment.Payment.PaymentStatus.PENDING + "'", paymentStatus24.equals(models.payment.Payment.PaymentStatus.PENDING));
        org.junit.Assert.assertTrue("'" + paymentType25 + "' != '" + models.payment.Payment.PaymentType.DEPOSIT + "'", paymentType25.equals(models.payment.Payment.PaymentType.DEPOSIT));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(booking27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 100.0d + "'", double28 == 100.0d);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID29);
        org.junit.Assert.assertTrue("'" + paymentStatus37 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus37.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType38 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType38.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentStatus47 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus47.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType48 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType48.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType50 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType50.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID51);
        org.junit.Assert.assertTrue("'" + paymentType52 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType52.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod56);
        org.junit.Assert.assertTrue("'" + paymentStatus58 + "' != '" + models.payment.Payment.PaymentStatus.PENDING + "'", paymentStatus58.equals(models.payment.Payment.PaymentStatus.PENDING));
        org.junit.Assert.assertTrue("'" + paymentStatus69 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus69.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType70 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType70.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType72 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType72.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID73);
        org.junit.Assert.assertTrue("'" + paymentType74 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType74.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod78);
        org.junit.Assert.assertTrue("'" + paymentStatus80 + "' != '" + models.payment.Payment.PaymentStatus.PENDING + "'", paymentStatus80.equals(models.payment.Payment.PaymentStatus.PENDING));
        org.junit.Assert.assertTrue("'" + paymentStatus83 + "' != '" + models.payment.Payment.PaymentStatus.PENDING + "'", paymentStatus83.equals(models.payment.Payment.PaymentStatus.PENDING));
        org.junit.Assert.assertTrue("'" + paymentStatus88 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus88.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType89 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType89.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType91 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType91.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID92);
        org.junit.Assert.assertTrue("'" + paymentType93 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType93.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID96);
        org.junit.Assert.assertTrue("'" + paymentType97 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType97.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + true + "'", boolean99 == true);
    }

    @Test
    public void test231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test231");
        models.booking.Booking booking1 = null;
        models.booking.Booking booking3 = null;
        java.util.UUID uUID4 = null;
        models.booking.Booking booking5 = null;
        models.payment.PaymentMethod paymentMethod7 = null;
        models.payment.Payment.PaymentStatus paymentStatus8 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType9 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment10 = new models.payment.Payment(uUID4, booking5, 100.0d, paymentMethod7, paymentStatus8, paymentType9);
        models.payment.Payment.PaymentType paymentType11 = payment10.getPaymentType();
        java.util.UUID uUID12 = payment10.getBookingID();
        models.payment.Payment.PaymentType paymentType13 = models.payment.Payment.PaymentType.FINAL;
        payment10.setPaymentType(paymentType13);
        java.util.UUID uUID15 = payment10.getPaymentID();
        models.payment.PaymentMethod paymentMethod17 = models.payment.Payment.generateMethod("");
        payment10.setPaymentMethod(paymentMethod17);
        java.util.UUID uUID19 = null;
        models.booking.Booking booking20 = null;
        models.payment.PaymentMethod paymentMethod22 = null;
        models.payment.Payment.PaymentStatus paymentStatus23 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType24 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment25 = new models.payment.Payment(uUID19, booking20, 100.0d, paymentMethod22, paymentStatus23, paymentType24);
        models.payment.Payment.PaymentType paymentType26 = payment25.getPaymentType();
        models.payment.Payment.PaymentType paymentType27 = payment25.getPaymentType();
        models.payment.Payment payment28 = new models.payment.Payment((double) 10, booking3, paymentMethod17, paymentType27);
        java.util.UUID uUID29 = null;
        models.booking.Booking booking30 = null;
        models.payment.PaymentMethod paymentMethod32 = null;
        models.payment.Payment.PaymentStatus paymentStatus33 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType34 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment35 = new models.payment.Payment(uUID29, booking30, 100.0d, paymentMethod32, paymentStatus33, paymentType34);
        models.payment.Payment.PaymentType paymentType36 = payment35.getPaymentType();
        java.util.UUID uUID37 = payment35.getBookingID();
        models.payment.Payment.PaymentType paymentType38 = models.payment.Payment.PaymentType.FINAL;
        payment35.setPaymentType(paymentType38);
        models.payment.PaymentMethod paymentMethod40 = payment35.getMethod();
        models.payment.Payment.PaymentType paymentType41 = payment35.getPaymentType();
        models.payment.Payment payment42 = new models.payment.Payment((double) 0, booking1, paymentMethod17, paymentType41);
        double double43 = payment42.getAmount();
        models.payment.Payment.PaymentType paymentType44 = payment42.getPaymentType();
        org.junit.Assert.assertTrue("'" + paymentStatus8 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus8.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType9 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType9.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType11 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType11.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID12);
        org.junit.Assert.assertTrue("'" + paymentType13 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType13.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod17);
        org.junit.Assert.assertTrue("'" + paymentStatus23 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus23.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType24 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType24.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType26 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType26.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType27 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType27.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentStatus33 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus33.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType34 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType34.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType36 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType36.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID37);
        org.junit.Assert.assertTrue("'" + paymentType38 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType38.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(paymentMethod40);
        org.junit.Assert.assertTrue("'" + paymentType41 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType41.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertTrue("'" + paymentType44 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType44.equals(models.payment.Payment.PaymentType.FINAL));
    }

    @Test
    public void test232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test232");
        java.util.UUID uUID0 = null;
        models.booking.Booking booking1 = null;
        java.util.UUID uUID3 = null;
        models.booking.Booking booking4 = null;
        models.payment.PaymentMethod paymentMethod6 = null;
        models.payment.Payment.PaymentStatus paymentStatus7 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType8 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment9 = new models.payment.Payment(uUID3, booking4, 100.0d, paymentMethod6, paymentStatus7, paymentType8);
        java.util.UUID uUID10 = null;
        models.booking.Booking booking11 = null;
        java.util.UUID uUID13 = null;
        models.booking.Booking booking14 = null;
        models.payment.PaymentMethod paymentMethod16 = null;
        models.payment.Payment.PaymentStatus paymentStatus17 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType18 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment19 = new models.payment.Payment(uUID13, booking14, 100.0d, paymentMethod16, paymentStatus17, paymentType18);
        models.payment.Payment.PaymentType paymentType20 = payment19.getPaymentType();
        java.util.UUID uUID21 = payment19.getBookingID();
        models.payment.Payment.PaymentType paymentType22 = models.payment.Payment.PaymentType.FINAL;
        payment19.setPaymentType(paymentType22);
        java.util.UUID uUID24 = payment19.getPaymentID();
        models.payment.PaymentMethod paymentMethod26 = models.payment.Payment.generateMethod("");
        payment19.setPaymentMethod(paymentMethod26);
        models.payment.Payment.PaymentStatus paymentStatus28 = models.payment.Payment.PaymentStatus.PENDING;
        models.payment.Payment.PaymentType paymentType29 = null;
        models.payment.Payment payment30 = new models.payment.Payment(uUID10, booking11, (double) (byte) 0, paymentMethod26, paymentStatus28, paymentType29);
        payment9.setPaymentMethod(paymentMethod26);
        java.util.UUID uUID32 = null;
        models.booking.Booking booking33 = null;
        java.util.UUID uUID35 = null;
        models.booking.Booking booking36 = null;
        models.payment.PaymentMethod paymentMethod38 = null;
        models.payment.Payment.PaymentStatus paymentStatus39 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType40 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment41 = new models.payment.Payment(uUID35, booking36, 100.0d, paymentMethod38, paymentStatus39, paymentType40);
        models.payment.Payment.PaymentType paymentType42 = payment41.getPaymentType();
        java.util.UUID uUID43 = payment41.getBookingID();
        models.payment.Payment.PaymentType paymentType44 = models.payment.Payment.PaymentType.FINAL;
        payment41.setPaymentType(paymentType44);
        java.util.UUID uUID46 = payment41.getPaymentID();
        models.payment.PaymentMethod paymentMethod48 = models.payment.Payment.generateMethod("");
        payment41.setPaymentMethod(paymentMethod48);
        models.payment.Payment.PaymentStatus paymentStatus50 = models.payment.Payment.PaymentStatus.PENDING;
        models.payment.Payment.PaymentType paymentType51 = null;
        models.payment.Payment payment52 = new models.payment.Payment(uUID32, booking33, (double) (byte) 0, paymentMethod48, paymentStatus50, paymentType51);
        models.payment.Payment.PaymentStatus paymentStatus53 = payment52.getStatus();
        java.util.UUID uUID54 = null;
        models.booking.Booking booking55 = null;
        models.payment.PaymentMethod paymentMethod57 = null;
        models.payment.Payment.PaymentStatus paymentStatus58 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType59 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment60 = new models.payment.Payment(uUID54, booking55, 100.0d, paymentMethod57, paymentStatus58, paymentType59);
        models.payment.Payment.PaymentType paymentType61 = payment60.getPaymentType();
        java.util.UUID uUID62 = payment60.getBookingID();
        models.payment.Payment.PaymentType paymentType63 = models.payment.Payment.PaymentType.FINAL;
        payment60.setPaymentType(paymentType63);
        models.payment.Payment payment65 = new models.payment.Payment(uUID0, booking1, (double) 'a', paymentMethod26, paymentStatus53, paymentType63);
        double double66 = payment65.getAmount();
        models.payment.Payment.PaymentType paymentType67 = null;
        payment65.setPaymentType(paymentType67);
        org.junit.Assert.assertTrue("'" + paymentStatus7 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus7.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType8 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType8.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentStatus17 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus17.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType18 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType18.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType20 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType20.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID21);
        org.junit.Assert.assertTrue("'" + paymentType22 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType22.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod26);
        org.junit.Assert.assertTrue("'" + paymentStatus28 + "' != '" + models.payment.Payment.PaymentStatus.PENDING + "'", paymentStatus28.equals(models.payment.Payment.PaymentStatus.PENDING));
        org.junit.Assert.assertTrue("'" + paymentStatus39 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus39.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType40 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType40.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType42 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType42.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID43);
        org.junit.Assert.assertTrue("'" + paymentType44 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType44.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod48);
        org.junit.Assert.assertTrue("'" + paymentStatus50 + "' != '" + models.payment.Payment.PaymentStatus.PENDING + "'", paymentStatus50.equals(models.payment.Payment.PaymentStatus.PENDING));
        org.junit.Assert.assertTrue("'" + paymentStatus53 + "' != '" + models.payment.Payment.PaymentStatus.PENDING + "'", paymentStatus53.equals(models.payment.Payment.PaymentStatus.PENDING));
        org.junit.Assert.assertTrue("'" + paymentStatus58 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus58.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType59 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType59.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType61 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType61.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID62);
        org.junit.Assert.assertTrue("'" + paymentType63 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType63.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 97.0d + "'", double66 == 97.0d);
    }

    @Test
    public void test233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test233");
        java.util.UUID uUID0 = null;
        models.booking.Booking booking1 = null;
        models.payment.PaymentMethod paymentMethod3 = null;
        models.payment.Payment.PaymentStatus paymentStatus4 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType5 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment6 = new models.payment.Payment(uUID0, booking1, 100.0d, paymentMethod3, paymentStatus4, paymentType5);
        models.payment.Payment.PaymentType paymentType7 = payment6.getPaymentType();
        java.util.UUID uUID8 = payment6.getBookingID();
        models.payment.Payment.PaymentType paymentType9 = models.payment.Payment.PaymentType.FINAL;
        payment6.setPaymentType(paymentType9);
        java.util.UUID uUID11 = payment6.getPaymentID();
        models.payment.PaymentMethod paymentMethod13 = models.payment.Payment.generateMethod("");
        payment6.setPaymentMethod(paymentMethod13);
        models.payment.Payment.PaymentStatus paymentStatus15 = payment6.getStatus();
        java.util.UUID uUID16 = payment6.getPaymentID();
        models.booking.Booking booking17 = payment6.getBooking();
        java.util.UUID uUID18 = null;
        models.booking.Booking booking19 = null;
        models.booking.Booking booking22 = null;
        java.util.UUID uUID23 = null;
        models.booking.Booking booking24 = null;
        models.payment.PaymentMethod paymentMethod26 = null;
        models.payment.Payment.PaymentStatus paymentStatus27 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType28 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment29 = new models.payment.Payment(uUID23, booking24, 100.0d, paymentMethod26, paymentStatus27, paymentType28);
        models.payment.Payment.PaymentType paymentType30 = payment29.getPaymentType();
        java.util.UUID uUID31 = payment29.getBookingID();
        models.payment.Payment.PaymentType paymentType32 = models.payment.Payment.PaymentType.FINAL;
        payment29.setPaymentType(paymentType32);
        java.util.UUID uUID34 = payment29.getPaymentID();
        models.payment.PaymentMethod paymentMethod36 = models.payment.Payment.generateMethod("");
        payment29.setPaymentMethod(paymentMethod36);
        java.util.UUID uUID38 = null;
        models.booking.Booking booking39 = null;
        models.payment.PaymentMethod paymentMethod41 = null;
        models.payment.Payment.PaymentStatus paymentStatus42 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType43 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment44 = new models.payment.Payment(uUID38, booking39, 100.0d, paymentMethod41, paymentStatus42, paymentType43);
        models.payment.Payment.PaymentType paymentType45 = payment44.getPaymentType();
        models.payment.Payment.PaymentType paymentType46 = payment44.getPaymentType();
        models.payment.Payment payment47 = new models.payment.Payment((double) 10, booking22, paymentMethod36, paymentType46);
        java.util.UUID uUID48 = null;
        models.booking.Booking booking49 = null;
        models.payment.PaymentMethod paymentMethod52 = models.payment.Payment.generateMethod("");
        java.util.UUID uUID53 = null;
        models.booking.Booking booking54 = null;
        models.payment.PaymentMethod paymentMethod56 = null;
        models.payment.Payment.PaymentStatus paymentStatus57 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType58 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment59 = new models.payment.Payment(uUID53, booking54, 100.0d, paymentMethod56, paymentStatus57, paymentType58);
        models.payment.Payment.PaymentStatus paymentStatus60 = payment59.getStatus();
        java.util.UUID uUID61 = null;
        models.booking.Booking booking62 = null;
        models.payment.PaymentMethod paymentMethod64 = null;
        models.payment.Payment.PaymentStatus paymentStatus65 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType66 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment67 = new models.payment.Payment(uUID61, booking62, 100.0d, paymentMethod64, paymentStatus65, paymentType66);
        models.payment.Payment.PaymentType paymentType68 = payment67.getPaymentType();
        java.util.UUID uUID69 = payment67.getBookingID();
        models.payment.Payment.PaymentType paymentType70 = models.payment.Payment.PaymentType.FINAL;
        payment67.setPaymentType(paymentType70);
        models.payment.PaymentMethod paymentMethod72 = payment67.getMethod();
        models.payment.Payment.PaymentType paymentType73 = payment67.getPaymentType();
        models.payment.Payment payment74 = new models.payment.Payment(uUID48, booking49, (double) 1L, paymentMethod52, paymentStatus60, paymentType73);
        java.util.UUID uUID75 = null;
        models.booking.Booking booking76 = null;
        models.payment.PaymentMethod paymentMethod78 = null;
        models.payment.Payment.PaymentStatus paymentStatus79 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType80 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment81 = new models.payment.Payment(uUID75, booking76, (-1.0d), paymentMethod78, paymentStatus79, paymentType80);
        models.payment.Payment payment82 = new models.payment.Payment(uUID18, booking19, (double) (byte) 0, paymentMethod36, paymentStatus60, paymentType80);
        payment6.setPaymentType(paymentType80);
        models.payment.Payment.PaymentType paymentType84 = payment6.getPaymentType();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean85 = payment6.processPayment();
            org.junit.Assert.fail("Expected exception of type models.ParkingSystemException; message: Cannot process payment of a payment that is not pending.");
        } catch (models.ParkingSystemException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + paymentStatus4 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus4.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType5 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType5.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType7 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType7.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID8);
        org.junit.Assert.assertTrue("'" + paymentType9 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType9.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod13);
        org.junit.Assert.assertTrue("'" + paymentStatus15 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus15.equals(models.payment.Payment.PaymentStatus.FAILED));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(booking17);
        org.junit.Assert.assertTrue("'" + paymentStatus27 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus27.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType28 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType28.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType30 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType30.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID31);
        org.junit.Assert.assertTrue("'" + paymentType32 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType32.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod36);
        org.junit.Assert.assertTrue("'" + paymentStatus42 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus42.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType43 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType43.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType45 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType45.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType46 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType46.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod52);
        org.junit.Assert.assertTrue("'" + paymentStatus57 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus57.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType58 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType58.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentStatus60 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus60.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentStatus65 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus65.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType66 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType66.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType68 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType68.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID69);
        org.junit.Assert.assertTrue("'" + paymentType70 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType70.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(paymentMethod72);
        org.junit.Assert.assertTrue("'" + paymentType73 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType73.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentStatus79 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus79.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType80 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType80.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType84 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType84.equals(models.payment.Payment.PaymentType.FINAL));
    }

    @Test
    public void test234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test234");
        models.booking.Booking booking1 = null;
        models.booking.Booking booking3 = null;
        models.payment.PaymentMethod paymentMethod5 = models.payment.Payment.generateMethod("");
        models.payment.Payment.PaymentType paymentType6 = null;
        models.payment.Payment payment7 = new models.payment.Payment(1.0d, booking3, paymentMethod5, paymentType6);
        models.payment.Payment.PaymentType paymentType8 = null;
        models.payment.Payment payment9 = new models.payment.Payment(97.0d, booking1, paymentMethod5, paymentType8);
        double double10 = payment9.getAmount();
        models.booking.Booking booking11 = payment9.getBooking();
        java.util.UUID uUID12 = null;
        models.booking.Booking booking13 = null;
        models.payment.PaymentMethod paymentMethod15 = null;
        models.payment.Payment.PaymentStatus paymentStatus16 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType17 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment18 = new models.payment.Payment(uUID12, booking13, (-1.0d), paymentMethod15, paymentStatus16, paymentType17);
        models.booking.Booking booking19 = payment18.getBooking();
        java.util.UUID uUID20 = payment18.getBookingID();
        models.payment.Payment.PaymentType paymentType21 = payment18.getPaymentType();
        payment9.setPaymentType(paymentType21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 97.0d + "'", double10 == 97.0d);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(booking11);
        org.junit.Assert.assertTrue("'" + paymentStatus16 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus16.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType17 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType17.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(booking19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID20);
        org.junit.Assert.assertTrue("'" + paymentType21 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType21.equals(models.payment.Payment.PaymentType.FINAL));
    }

    @Test
    public void test235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test235");
        java.util.UUID uUID0 = null;
        models.booking.Booking booking1 = null;
        java.util.UUID uUID3 = null;
        models.booking.Booking booking4 = null;
        models.payment.PaymentMethod paymentMethod6 = null;
        models.payment.Payment.PaymentStatus paymentStatus7 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType8 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment9 = new models.payment.Payment(uUID3, booking4, 100.0d, paymentMethod6, paymentStatus7, paymentType8);
        models.payment.Payment.PaymentType paymentType10 = payment9.getPaymentType();
        java.util.UUID uUID11 = payment9.getBookingID();
        models.payment.Payment.PaymentType paymentType12 = models.payment.Payment.PaymentType.FINAL;
        payment9.setPaymentType(paymentType12);
        java.util.UUID uUID14 = payment9.getPaymentID();
        models.payment.PaymentMethod paymentMethod16 = models.payment.Payment.generateMethod("");
        payment9.setPaymentMethod(paymentMethod16);
        models.payment.Payment.PaymentStatus paymentStatus18 = models.payment.Payment.PaymentStatus.PENDING;
        models.payment.Payment.PaymentType paymentType19 = null;
        models.payment.Payment payment20 = new models.payment.Payment(uUID0, booking1, (double) (byte) 0, paymentMethod16, paymentStatus18, paymentType19);
        models.payment.Payment.PaymentStatus paymentStatus21 = payment20.getStatus();
        java.lang.Class<?> wildcardClass22 = paymentStatus21.getClass();
        org.junit.Assert.assertTrue("'" + paymentStatus7 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus7.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType8 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType8.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType10 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType10.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID11);
        org.junit.Assert.assertTrue("'" + paymentType12 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType12.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod16);
        org.junit.Assert.assertTrue("'" + paymentStatus18 + "' != '" + models.payment.Payment.PaymentStatus.PENDING + "'", paymentStatus18.equals(models.payment.Payment.PaymentStatus.PENDING));
        org.junit.Assert.assertTrue("'" + paymentStatus21 + "' != '" + models.payment.Payment.PaymentStatus.PENDING + "'", paymentStatus21.equals(models.payment.Payment.PaymentStatus.PENDING));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass22);
    }

    @Test
    public void test236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test236");
        models.booking.Booking booking1 = null;
        models.payment.PaymentMethod paymentMethod3 = models.payment.Payment.generateMethod("hi!");
        java.util.UUID uUID4 = null;
        models.booking.Booking booking5 = null;
        models.payment.PaymentMethod paymentMethod7 = null;
        models.payment.Payment.PaymentStatus paymentStatus8 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType9 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment10 = new models.payment.Payment(uUID4, booking5, 100.0d, paymentMethod7, paymentStatus8, paymentType9);
        models.payment.Payment.PaymentStatus paymentStatus11 = payment10.getStatus();
        double double12 = payment10.getAmount();
        models.booking.Booking booking14 = null;
        models.booking.Booking booking16 = null;
        java.util.UUID uUID17 = null;
        models.booking.Booking booking18 = null;
        models.payment.PaymentMethod paymentMethod20 = null;
        models.payment.Payment.PaymentStatus paymentStatus21 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType22 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment23 = new models.payment.Payment(uUID17, booking18, 100.0d, paymentMethod20, paymentStatus21, paymentType22);
        models.payment.Payment.PaymentType paymentType24 = payment23.getPaymentType();
        java.util.UUID uUID25 = payment23.getBookingID();
        models.payment.Payment.PaymentType paymentType26 = models.payment.Payment.PaymentType.FINAL;
        payment23.setPaymentType(paymentType26);
        java.util.UUID uUID28 = payment23.getPaymentID();
        models.payment.PaymentMethod paymentMethod30 = models.payment.Payment.generateMethod("");
        payment23.setPaymentMethod(paymentMethod30);
        java.util.UUID uUID32 = null;
        models.booking.Booking booking33 = null;
        models.payment.PaymentMethod paymentMethod35 = null;
        models.payment.Payment.PaymentStatus paymentStatus36 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType37 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment38 = new models.payment.Payment(uUID32, booking33, (-1.0d), paymentMethod35, paymentStatus36, paymentType37);
        models.payment.Payment payment39 = new models.payment.Payment(0.0d, booking16, paymentMethod30, paymentType37);
        java.util.UUID uUID40 = null;
        models.booking.Booking booking41 = null;
        models.payment.PaymentMethod paymentMethod43 = null;
        models.payment.Payment.PaymentStatus paymentStatus44 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType45 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment46 = new models.payment.Payment(uUID40, booking41, 100.0d, paymentMethod43, paymentStatus44, paymentType45);
        models.payment.Payment.PaymentType paymentType47 = payment46.getPaymentType();
        java.util.UUID uUID48 = payment46.getBookingID();
        models.payment.Payment.PaymentType paymentType49 = models.payment.Payment.PaymentType.FINAL;
        payment46.setPaymentType(paymentType49);
        models.payment.PaymentMethod paymentMethod51 = payment46.getMethod();
        models.payment.Payment.PaymentType paymentType52 = payment46.getPaymentType();
        java.util.UUID uUID53 = null;
        models.booking.Booking booking54 = null;
        models.payment.PaymentMethod paymentMethod56 = null;
        models.payment.Payment.PaymentStatus paymentStatus57 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType58 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment59 = new models.payment.Payment(uUID53, booking54, 100.0d, paymentMethod56, paymentStatus57, paymentType58);
        java.util.UUID uUID60 = null;
        models.booking.Booking booking61 = null;
        java.util.UUID uUID63 = null;
        models.booking.Booking booking64 = null;
        models.payment.PaymentMethod paymentMethod66 = null;
        models.payment.Payment.PaymentStatus paymentStatus67 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType68 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment69 = new models.payment.Payment(uUID63, booking64, 100.0d, paymentMethod66, paymentStatus67, paymentType68);
        models.payment.Payment.PaymentType paymentType70 = payment69.getPaymentType();
        java.util.UUID uUID71 = payment69.getBookingID();
        models.payment.Payment.PaymentType paymentType72 = models.payment.Payment.PaymentType.FINAL;
        payment69.setPaymentType(paymentType72);
        java.util.UUID uUID74 = payment69.getPaymentID();
        models.payment.PaymentMethod paymentMethod76 = models.payment.Payment.generateMethod("");
        payment69.setPaymentMethod(paymentMethod76);
        models.payment.Payment.PaymentStatus paymentStatus78 = models.payment.Payment.PaymentStatus.PENDING;
        models.payment.Payment.PaymentType paymentType79 = null;
        models.payment.Payment payment80 = new models.payment.Payment(uUID60, booking61, (double) (byte) 0, paymentMethod76, paymentStatus78, paymentType79);
        payment59.setPaymentMethod(paymentMethod76);
        payment46.setPaymentMethod(paymentMethod76);
        models.booking.Booking booking83 = payment46.getBooking();
        models.payment.Payment.PaymentType paymentType84 = payment46.getPaymentType();
        models.payment.Payment payment85 = new models.payment.Payment((double) 100.0f, booking14, paymentMethod30, paymentType84);
        payment10.setPaymentType(paymentType84);
        models.payment.Payment payment87 = new models.payment.Payment((double) 100.0f, booking1, paymentMethod3, paymentType84);
        java.lang.Class<?> wildcardClass88 = paymentType84.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod3);
        org.junit.Assert.assertTrue("'" + paymentStatus8 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus8.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType9 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType9.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentStatus11 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus11.equals(models.payment.Payment.PaymentStatus.FAILED));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 100.0d + "'", double12 == 100.0d);
        org.junit.Assert.assertTrue("'" + paymentStatus21 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus21.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType22 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType22.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType24 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType24.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID25);
        org.junit.Assert.assertTrue("'" + paymentType26 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType26.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod30);
        org.junit.Assert.assertTrue("'" + paymentStatus36 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus36.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType37 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType37.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentStatus44 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus44.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType45 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType45.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType47 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType47.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID48);
        org.junit.Assert.assertTrue("'" + paymentType49 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType49.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(paymentMethod51);
        org.junit.Assert.assertTrue("'" + paymentType52 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType52.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentStatus57 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus57.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType58 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType58.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentStatus67 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus67.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType68 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType68.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType70 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType70.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID71);
        org.junit.Assert.assertTrue("'" + paymentType72 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType72.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod76);
        org.junit.Assert.assertTrue("'" + paymentStatus78 + "' != '" + models.payment.Payment.PaymentStatus.PENDING + "'", paymentStatus78.equals(models.payment.Payment.PaymentStatus.PENDING));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(booking83);
        org.junit.Assert.assertTrue("'" + paymentType84 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType84.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass88);
    }

    @Test
    public void test237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test237");
        models.booking.Booking booking1 = null;
        java.util.UUID uUID2 = null;
        models.booking.Booking booking3 = null;
        models.payment.PaymentMethod paymentMethod6 = models.payment.Payment.generateMethod("");
        java.util.UUID uUID7 = null;
        models.booking.Booking booking8 = null;
        models.payment.PaymentMethod paymentMethod10 = null;
        models.payment.Payment.PaymentStatus paymentStatus11 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType12 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment13 = new models.payment.Payment(uUID7, booking8, 100.0d, paymentMethod10, paymentStatus11, paymentType12);
        models.payment.Payment.PaymentStatus paymentStatus14 = payment13.getStatus();
        java.util.UUID uUID15 = null;
        models.booking.Booking booking16 = null;
        models.payment.PaymentMethod paymentMethod18 = null;
        models.payment.Payment.PaymentStatus paymentStatus19 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType20 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment21 = new models.payment.Payment(uUID15, booking16, 100.0d, paymentMethod18, paymentStatus19, paymentType20);
        models.payment.Payment.PaymentType paymentType22 = payment21.getPaymentType();
        java.util.UUID uUID23 = payment21.getBookingID();
        models.payment.Payment.PaymentType paymentType24 = models.payment.Payment.PaymentType.FINAL;
        payment21.setPaymentType(paymentType24);
        models.payment.PaymentMethod paymentMethod26 = payment21.getMethod();
        models.payment.Payment.PaymentType paymentType27 = payment21.getPaymentType();
        models.payment.Payment payment28 = new models.payment.Payment(uUID2, booking3, (double) 1L, paymentMethod6, paymentStatus14, paymentType27);
        models.booking.Booking booking30 = null;
        models.booking.Booking booking32 = null;
        java.util.UUID uUID33 = null;
        models.booking.Booking booking34 = null;
        models.payment.PaymentMethod paymentMethod36 = null;
        models.payment.Payment.PaymentStatus paymentStatus37 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType38 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment39 = new models.payment.Payment(uUID33, booking34, 100.0d, paymentMethod36, paymentStatus37, paymentType38);
        models.payment.Payment.PaymentType paymentType40 = payment39.getPaymentType();
        java.util.UUID uUID41 = payment39.getBookingID();
        models.payment.Payment.PaymentType paymentType42 = models.payment.Payment.PaymentType.FINAL;
        payment39.setPaymentType(paymentType42);
        java.util.UUID uUID44 = payment39.getPaymentID();
        models.payment.PaymentMethod paymentMethod46 = models.payment.Payment.generateMethod("");
        payment39.setPaymentMethod(paymentMethod46);
        java.util.UUID uUID48 = null;
        models.booking.Booking booking49 = null;
        models.payment.PaymentMethod paymentMethod51 = null;
        models.payment.Payment.PaymentStatus paymentStatus52 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType53 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment54 = new models.payment.Payment(uUID48, booking49, 100.0d, paymentMethod51, paymentStatus52, paymentType53);
        models.payment.Payment.PaymentType paymentType55 = payment54.getPaymentType();
        models.payment.Payment.PaymentType paymentType56 = payment54.getPaymentType();
        models.payment.Payment payment57 = new models.payment.Payment((double) 10, booking32, paymentMethod46, paymentType56);
        models.payment.Payment.PaymentType paymentType58 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment59 = new models.payment.Payment((double) 0.0f, booking30, paymentMethod46, paymentType58);
        models.payment.Payment payment60 = new models.payment.Payment((double) (-1L), booking1, paymentMethod6, paymentType58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod6);
        org.junit.Assert.assertTrue("'" + paymentStatus11 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus11.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType12 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType12.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentStatus14 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus14.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentStatus19 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus19.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType20 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType20.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType22 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType22.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID23);
        org.junit.Assert.assertTrue("'" + paymentType24 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType24.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(paymentMethod26);
        org.junit.Assert.assertTrue("'" + paymentType27 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType27.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentStatus37 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus37.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType38 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType38.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType40 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType40.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID41);
        org.junit.Assert.assertTrue("'" + paymentType42 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType42.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod46);
        org.junit.Assert.assertTrue("'" + paymentStatus52 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus52.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType53 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType53.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType55 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType55.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType56 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType56.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType58 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType58.equals(models.payment.Payment.PaymentType.FINAL));
    }

    @Test
    public void test238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test238");
        java.util.UUID uUID0 = null;
        models.booking.Booking booking1 = null;
        java.util.UUID uUID3 = null;
        models.booking.Booking booking4 = null;
        java.util.UUID uUID6 = null;
        models.booking.Booking booking7 = null;
        models.payment.PaymentMethod paymentMethod9 = null;
        models.payment.Payment.PaymentStatus paymentStatus10 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType11 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment12 = new models.payment.Payment(uUID6, booking7, 100.0d, paymentMethod9, paymentStatus10, paymentType11);
        models.payment.Payment.PaymentType paymentType13 = payment12.getPaymentType();
        java.util.UUID uUID14 = payment12.getBookingID();
        models.payment.Payment.PaymentType paymentType15 = models.payment.Payment.PaymentType.FINAL;
        payment12.setPaymentType(paymentType15);
        java.util.UUID uUID17 = payment12.getPaymentID();
        models.payment.PaymentMethod paymentMethod19 = models.payment.Payment.generateMethod("");
        payment12.setPaymentMethod(paymentMethod19);
        models.payment.Payment.PaymentStatus paymentStatus21 = models.payment.Payment.PaymentStatus.PENDING;
        models.payment.Payment.PaymentType paymentType22 = null;
        models.payment.Payment payment23 = new models.payment.Payment(uUID3, booking4, (double) (byte) 0, paymentMethod19, paymentStatus21, paymentType22);
        models.payment.Payment.PaymentStatus paymentStatus24 = models.payment.Payment.PaymentStatus.PENDING;
        models.payment.Payment.PaymentType paymentType25 = models.payment.Payment.PaymentType.DEPOSIT;
        models.payment.Payment payment26 = new models.payment.Payment(uUID0, booking1, (double) (byte) 100, paymentMethod19, paymentStatus24, paymentType25);
        models.booking.Booking booking27 = payment26.getBooking();
        double double28 = payment26.getAmount();
        java.util.UUID uUID29 = payment26.getBookingID();
        models.payment.PaymentMethod paymentMethod30 = payment26.getMethod();
        java.util.UUID uUID31 = null;
        models.booking.Booking booking32 = null;
        models.booking.Booking booking35 = null;
        models.booking.Booking booking37 = null;
        java.util.UUID uUID38 = null;
        models.booking.Booking booking39 = null;
        models.payment.PaymentMethod paymentMethod41 = null;
        models.payment.Payment.PaymentStatus paymentStatus42 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType43 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment44 = new models.payment.Payment(uUID38, booking39, 100.0d, paymentMethod41, paymentStatus42, paymentType43);
        models.payment.Payment.PaymentType paymentType45 = payment44.getPaymentType();
        java.util.UUID uUID46 = payment44.getBookingID();
        models.payment.Payment.PaymentType paymentType47 = models.payment.Payment.PaymentType.FINAL;
        payment44.setPaymentType(paymentType47);
        java.util.UUID uUID49 = payment44.getPaymentID();
        models.payment.PaymentMethod paymentMethod51 = models.payment.Payment.generateMethod("");
        payment44.setPaymentMethod(paymentMethod51);
        java.util.UUID uUID53 = null;
        models.booking.Booking booking54 = null;
        models.payment.PaymentMethod paymentMethod56 = null;
        models.payment.Payment.PaymentStatus paymentStatus57 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType58 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment59 = new models.payment.Payment(uUID53, booking54, 100.0d, paymentMethod56, paymentStatus57, paymentType58);
        models.payment.Payment.PaymentType paymentType60 = payment59.getPaymentType();
        models.payment.Payment.PaymentType paymentType61 = payment59.getPaymentType();
        models.payment.Payment payment62 = new models.payment.Payment((double) 10, booking37, paymentMethod51, paymentType61);
        models.payment.Payment.PaymentType paymentType63 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment64 = new models.payment.Payment((double) 0.0f, booking35, paymentMethod51, paymentType63);
        java.util.UUID uUID65 = null;
        models.booking.Booking booking66 = null;
        models.payment.PaymentMethod paymentMethod68 = null;
        models.payment.Payment.PaymentStatus paymentStatus69 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType70 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment71 = new models.payment.Payment(uUID65, booking66, (-1.0d), paymentMethod68, paymentStatus69, paymentType70);
        java.util.UUID uUID72 = null;
        models.booking.Booking booking73 = null;
        models.payment.PaymentMethod paymentMethod75 = null;
        models.payment.Payment.PaymentStatus paymentStatus76 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType77 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment78 = new models.payment.Payment(uUID72, booking73, 100.0d, paymentMethod75, paymentStatus76, paymentType77);
        models.payment.Payment.PaymentType paymentType79 = payment78.getPaymentType();
        java.util.UUID uUID80 = payment78.getBookingID();
        models.payment.Payment.PaymentType paymentType81 = models.payment.Payment.PaymentType.FINAL;
        payment78.setPaymentType(paymentType81);
        models.payment.PaymentMethod paymentMethod83 = payment78.getMethod();
        java.util.UUID uUID84 = null;
        models.booking.Booking booking85 = null;
        models.payment.PaymentMethod paymentMethod87 = null;
        models.payment.Payment.PaymentStatus paymentStatus88 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType89 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment90 = new models.payment.Payment(uUID84, booking85, 100.0d, paymentMethod87, paymentStatus88, paymentType89);
        models.payment.Payment.PaymentType paymentType91 = payment90.getPaymentType();
        java.util.UUID uUID92 = payment90.getBookingID();
        models.payment.Payment.PaymentType paymentType93 = models.payment.Payment.PaymentType.FINAL;
        payment90.setPaymentType(paymentType93);
        payment78.setPaymentType(paymentType93);
        models.payment.Payment payment96 = new models.payment.Payment(uUID31, booking32, (double) (byte) 10, paymentMethod51, paymentStatus69, paymentType93);
        models.payment.Payment.PaymentType paymentType97 = payment96.getPaymentType();
        payment26.setPaymentType(paymentType97);
        models.payment.PaymentMethod paymentMethod99 = payment26.getMethod();
        org.junit.Assert.assertTrue("'" + paymentStatus10 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus10.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType11 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType11.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType13 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType13.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID14);
        org.junit.Assert.assertTrue("'" + paymentType15 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType15.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod19);
        org.junit.Assert.assertTrue("'" + paymentStatus21 + "' != '" + models.payment.Payment.PaymentStatus.PENDING + "'", paymentStatus21.equals(models.payment.Payment.PaymentStatus.PENDING));
        org.junit.Assert.assertTrue("'" + paymentStatus24 + "' != '" + models.payment.Payment.PaymentStatus.PENDING + "'", paymentStatus24.equals(models.payment.Payment.PaymentStatus.PENDING));
        org.junit.Assert.assertTrue("'" + paymentType25 + "' != '" + models.payment.Payment.PaymentType.DEPOSIT + "'", paymentType25.equals(models.payment.Payment.PaymentType.DEPOSIT));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(booking27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 100.0d + "'", double28 == 100.0d);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod30);
        org.junit.Assert.assertTrue("'" + paymentStatus42 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus42.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType43 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType43.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType45 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType45.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID46);
        org.junit.Assert.assertTrue("'" + paymentType47 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType47.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod51);
        org.junit.Assert.assertTrue("'" + paymentStatus57 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus57.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType58 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType58.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType60 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType60.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType61 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType61.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType63 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType63.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentStatus69 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus69.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType70 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType70.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentStatus76 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus76.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType77 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType77.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType79 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType79.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID80);
        org.junit.Assert.assertTrue("'" + paymentType81 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType81.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(paymentMethod83);
        org.junit.Assert.assertTrue("'" + paymentStatus88 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus88.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType89 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType89.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType91 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType91.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID92);
        org.junit.Assert.assertTrue("'" + paymentType93 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType93.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType97 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType97.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod99);
    }

    @Test
    public void test239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test239");
        java.util.UUID uUID0 = null;
        models.booking.Booking booking1 = null;
        models.payment.PaymentMethod paymentMethod3 = null;
        models.payment.Payment.PaymentStatus paymentStatus4 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType5 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment6 = new models.payment.Payment(uUID0, booking1, 100.0d, paymentMethod3, paymentStatus4, paymentType5);
        models.payment.Payment.PaymentType paymentType7 = payment6.getPaymentType();
        java.util.UUID uUID8 = payment6.getBookingID();
        models.payment.Payment.PaymentType paymentType9 = models.payment.Payment.PaymentType.FINAL;
        payment6.setPaymentType(paymentType9);
        java.util.UUID uUID11 = payment6.getPaymentID();
        models.payment.PaymentMethod paymentMethod13 = models.payment.Payment.generateMethod("");
        payment6.setPaymentMethod(paymentMethod13);
        models.payment.Payment.PaymentStatus paymentStatus15 = payment6.getStatus();
        java.util.UUID uUID16 = payment6.getPaymentID();
        models.payment.Payment.PaymentStatus paymentStatus17 = payment6.getStatus();
        models.payment.PaymentMethod paymentMethod18 = null;
        payment6.setPaymentMethod(paymentMethod18);
        java.util.UUID uUID20 = payment6.getPaymentID();
        org.junit.Assert.assertTrue("'" + paymentStatus4 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus4.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType5 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType5.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType7 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType7.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID8);
        org.junit.Assert.assertTrue("'" + paymentType9 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType9.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod13);
        org.junit.Assert.assertTrue("'" + paymentStatus15 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus15.equals(models.payment.Payment.PaymentStatus.FAILED));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID16);
        org.junit.Assert.assertTrue("'" + paymentStatus17 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus17.equals(models.payment.Payment.PaymentStatus.FAILED));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID20);
    }

    @Test
    public void test240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test240");
        java.util.UUID uUID0 = null;
        models.booking.Booking booking1 = null;
        models.payment.PaymentMethod paymentMethod3 = null;
        models.payment.Payment.PaymentStatus paymentStatus4 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType5 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment6 = new models.payment.Payment(uUID0, booking1, 100.0d, paymentMethod3, paymentStatus4, paymentType5);
        models.payment.PaymentMethod paymentMethod7 = null;
        payment6.setPaymentMethod(paymentMethod7);
        models.payment.Payment.PaymentStatus paymentStatus9 = payment6.getStatus();
        java.util.UUID uUID10 = null;
        models.booking.Booking booking11 = null;
        java.util.UUID uUID13 = null;
        models.booking.Booking booking14 = null;
        models.payment.PaymentMethod paymentMethod16 = null;
        models.payment.Payment.PaymentStatus paymentStatus17 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType18 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment19 = new models.payment.Payment(uUID13, booking14, 100.0d, paymentMethod16, paymentStatus17, paymentType18);
        models.payment.Payment.PaymentType paymentType20 = payment19.getPaymentType();
        java.util.UUID uUID21 = payment19.getBookingID();
        models.payment.Payment.PaymentType paymentType22 = models.payment.Payment.PaymentType.FINAL;
        payment19.setPaymentType(paymentType22);
        java.util.UUID uUID24 = payment19.getPaymentID();
        models.payment.PaymentMethod paymentMethod26 = models.payment.Payment.generateMethod("");
        payment19.setPaymentMethod(paymentMethod26);
        java.util.UUID uUID28 = null;
        models.booking.Booking booking29 = null;
        models.payment.PaymentMethod paymentMethod31 = null;
        models.payment.Payment.PaymentStatus paymentStatus32 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType33 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment34 = new models.payment.Payment(uUID28, booking29, 100.0d, paymentMethod31, paymentStatus32, paymentType33);
        models.payment.Payment.PaymentType paymentType35 = payment34.getPaymentType();
        java.util.UUID uUID36 = payment34.getBookingID();
        models.payment.Payment.PaymentType paymentType37 = models.payment.Payment.PaymentType.FINAL;
        payment34.setPaymentType(paymentType37);
        models.payment.PaymentMethod paymentMethod39 = payment34.getMethod();
        models.payment.Payment.PaymentType paymentType40 = payment34.getPaymentType();
        models.payment.Payment.PaymentStatus paymentStatus41 = payment34.getStatus();
        models.payment.Payment.PaymentType paymentType42 = models.payment.Payment.PaymentType.REFUND;
        models.payment.Payment payment43 = new models.payment.Payment(uUID10, booking11, (double) '#', paymentMethod26, paymentStatus41, paymentType42);
        models.payment.Payment.PaymentType paymentType44 = payment43.getPaymentType();
        payment6.setPaymentType(paymentType44);
        org.junit.Assert.assertTrue("'" + paymentStatus4 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus4.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType5 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType5.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentStatus9 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus9.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentStatus17 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus17.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType18 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType18.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType20 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType20.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID21);
        org.junit.Assert.assertTrue("'" + paymentType22 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType22.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod26);
        org.junit.Assert.assertTrue("'" + paymentStatus32 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus32.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType33 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType33.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType35 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType35.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID36);
        org.junit.Assert.assertTrue("'" + paymentType37 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType37.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(paymentMethod39);
        org.junit.Assert.assertTrue("'" + paymentType40 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType40.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentStatus41 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus41.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType42 + "' != '" + models.payment.Payment.PaymentType.REFUND + "'", paymentType42.equals(models.payment.Payment.PaymentType.REFUND));
        org.junit.Assert.assertTrue("'" + paymentType44 + "' != '" + models.payment.Payment.PaymentType.REFUND + "'", paymentType44.equals(models.payment.Payment.PaymentType.REFUND));
    }

    @Test
    public void test241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test241");
        java.util.UUID uUID0 = null;
        models.booking.Booking booking1 = null;
        java.util.UUID uUID3 = null;
        models.booking.Booking booking4 = null;
        java.util.UUID uUID6 = null;
        models.booking.Booking booking7 = null;
        models.payment.PaymentMethod paymentMethod9 = null;
        models.payment.Payment.PaymentStatus paymentStatus10 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType11 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment12 = new models.payment.Payment(uUID6, booking7, 100.0d, paymentMethod9, paymentStatus10, paymentType11);
        models.payment.Payment.PaymentType paymentType13 = payment12.getPaymentType();
        java.util.UUID uUID14 = payment12.getBookingID();
        models.payment.Payment.PaymentType paymentType15 = models.payment.Payment.PaymentType.FINAL;
        payment12.setPaymentType(paymentType15);
        java.util.UUID uUID17 = payment12.getPaymentID();
        models.payment.PaymentMethod paymentMethod19 = models.payment.Payment.generateMethod("");
        payment12.setPaymentMethod(paymentMethod19);
        models.payment.Payment.PaymentStatus paymentStatus21 = models.payment.Payment.PaymentStatus.PENDING;
        models.payment.Payment.PaymentType paymentType22 = null;
        models.payment.Payment payment23 = new models.payment.Payment(uUID3, booking4, (double) (byte) 0, paymentMethod19, paymentStatus21, paymentType22);
        models.payment.Payment.PaymentStatus paymentStatus24 = models.payment.Payment.PaymentStatus.PENDING;
        models.payment.Payment.PaymentType paymentType25 = models.payment.Payment.PaymentType.DEPOSIT;
        models.payment.Payment payment26 = new models.payment.Payment(uUID0, booking1, (double) (byte) 100, paymentMethod19, paymentStatus24, paymentType25);
        models.booking.Booking booking27 = payment26.getBooking();
        double double28 = payment26.getAmount();
        java.util.UUID uUID29 = payment26.getBookingID();
        models.payment.Payment.PaymentType paymentType30 = payment26.getPaymentType();
        java.util.UUID uUID31 = payment26.getBookingID();
        double double32 = payment26.getAmount();
        org.junit.Assert.assertTrue("'" + paymentStatus10 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus10.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType11 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType11.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType13 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType13.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID14);
        org.junit.Assert.assertTrue("'" + paymentType15 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType15.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod19);
        org.junit.Assert.assertTrue("'" + paymentStatus21 + "' != '" + models.payment.Payment.PaymentStatus.PENDING + "'", paymentStatus21.equals(models.payment.Payment.PaymentStatus.PENDING));
        org.junit.Assert.assertTrue("'" + paymentStatus24 + "' != '" + models.payment.Payment.PaymentStatus.PENDING + "'", paymentStatus24.equals(models.payment.Payment.PaymentStatus.PENDING));
        org.junit.Assert.assertTrue("'" + paymentType25 + "' != '" + models.payment.Payment.PaymentType.DEPOSIT + "'", paymentType25.equals(models.payment.Payment.PaymentType.DEPOSIT));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(booking27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 100.0d + "'", double28 == 100.0d);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID29);
        org.junit.Assert.assertTrue("'" + paymentType30 + "' != '" + models.payment.Payment.PaymentType.DEPOSIT + "'", paymentType30.equals(models.payment.Payment.PaymentType.DEPOSIT));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 100.0d + "'", double32 == 100.0d);
    }

    @Test
    public void test242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test242");
        java.util.UUID uUID0 = null;
        models.booking.Booking booking1 = null;
        models.payment.PaymentMethod paymentMethod3 = null;
        models.payment.Payment.PaymentStatus paymentStatus4 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType5 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment6 = new models.payment.Payment(uUID0, booking1, 100.0d, paymentMethod3, paymentStatus4, paymentType5);
        double double7 = payment6.getAmount();
        models.booking.Booking booking8 = payment6.getBooking();
        models.booking.Booking booking9 = payment6.getBooking();
        java.util.UUID uUID10 = payment6.getBookingID();
        models.booking.Booking booking11 = payment6.getBooking();
        java.lang.Class<?> wildcardClass12 = payment6.getClass();
        org.junit.Assert.assertTrue("'" + paymentStatus4 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus4.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType5 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType5.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 100.0d + "'", double7 == 100.0d);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(booking8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(booking9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(booking11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test243");
        java.util.UUID uUID0 = null;
        models.booking.Booking booking1 = null;
        models.payment.PaymentMethod paymentMethod3 = null;
        models.payment.Payment.PaymentStatus paymentStatus4 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType5 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment6 = new models.payment.Payment(uUID0, booking1, 100.0d, paymentMethod3, paymentStatus4, paymentType5);
        models.payment.Payment.PaymentType paymentType7 = payment6.getPaymentType();
        java.util.UUID uUID8 = payment6.getBookingID();
        java.util.UUID uUID9 = payment6.getPaymentID();
        java.util.UUID uUID10 = null;
        models.booking.Booking booking11 = null;
        java.util.UUID uUID13 = null;
        models.booking.Booking booking14 = null;
        java.util.UUID uUID16 = null;
        models.booking.Booking booking17 = null;
        models.payment.PaymentMethod paymentMethod19 = null;
        models.payment.Payment.PaymentStatus paymentStatus20 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType21 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment22 = new models.payment.Payment(uUID16, booking17, 100.0d, paymentMethod19, paymentStatus20, paymentType21);
        models.payment.Payment.PaymentType paymentType23 = payment22.getPaymentType();
        java.util.UUID uUID24 = payment22.getBookingID();
        models.payment.Payment.PaymentType paymentType25 = models.payment.Payment.PaymentType.FINAL;
        payment22.setPaymentType(paymentType25);
        java.util.UUID uUID27 = payment22.getPaymentID();
        models.payment.PaymentMethod paymentMethod29 = models.payment.Payment.generateMethod("");
        payment22.setPaymentMethod(paymentMethod29);
        models.payment.Payment.PaymentStatus paymentStatus31 = models.payment.Payment.PaymentStatus.PENDING;
        models.payment.Payment.PaymentType paymentType32 = null;
        models.payment.Payment payment33 = new models.payment.Payment(uUID13, booking14, (double) (byte) 0, paymentMethod29, paymentStatus31, paymentType32);
        models.payment.Payment.PaymentStatus paymentStatus34 = models.payment.Payment.PaymentStatus.PENDING;
        models.payment.Payment.PaymentType paymentType35 = models.payment.Payment.PaymentType.DEPOSIT;
        models.payment.Payment payment36 = new models.payment.Payment(uUID10, booking11, (double) (byte) 100, paymentMethod29, paymentStatus34, paymentType35);
        models.booking.Booking booking37 = payment36.getBooking();
        double double38 = payment36.getAmount();
        java.util.UUID uUID39 = payment36.getBookingID();
        models.payment.PaymentMethod paymentMethod40 = payment36.getMethod();
        payment6.setPaymentMethod(paymentMethod40);
        models.payment.PaymentMethod paymentMethod42 = payment6.getMethod();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean43 = payment6.processPayment();
            org.junit.Assert.fail("Expected exception of type models.ParkingSystemException; message: Cannot process payment of a payment that is not pending.");
        } catch (models.ParkingSystemException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + paymentStatus4 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus4.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType5 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType5.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType7 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType7.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID9);
        org.junit.Assert.assertTrue("'" + paymentStatus20 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus20.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType21 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType21.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType23 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType23.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID24);
        org.junit.Assert.assertTrue("'" + paymentType25 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType25.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod29);
        org.junit.Assert.assertTrue("'" + paymentStatus31 + "' != '" + models.payment.Payment.PaymentStatus.PENDING + "'", paymentStatus31.equals(models.payment.Payment.PaymentStatus.PENDING));
        org.junit.Assert.assertTrue("'" + paymentStatus34 + "' != '" + models.payment.Payment.PaymentStatus.PENDING + "'", paymentStatus34.equals(models.payment.Payment.PaymentStatus.PENDING));
        org.junit.Assert.assertTrue("'" + paymentType35 + "' != '" + models.payment.Payment.PaymentType.DEPOSIT + "'", paymentType35.equals(models.payment.Payment.PaymentType.DEPOSIT));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(booking37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 100.0d + "'", double38 == 100.0d);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod42);
    }

    @Test
    public void test244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test244");
        models.booking.Booking booking1 = null;
        models.booking.Booking booking3 = null;
        models.payment.PaymentMethod paymentMethod5 = models.payment.Payment.generateMethod("");
        models.payment.Payment.PaymentType paymentType6 = null;
        models.payment.Payment payment7 = new models.payment.Payment(1.0d, booking3, paymentMethod5, paymentType6);
        models.payment.Payment.PaymentType paymentType8 = null;
        models.payment.Payment payment9 = new models.payment.Payment(97.0d, booking1, paymentMethod5, paymentType8);
        boolean boolean10 = payment9.processPayment();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test245");
        java.util.UUID uUID0 = null;
        models.booking.Booking booking1 = null;
        models.payment.PaymentMethod paymentMethod3 = null;
        models.payment.Payment.PaymentStatus paymentStatus4 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType5 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment6 = new models.payment.Payment(uUID0, booking1, 100.0d, paymentMethod3, paymentStatus4, paymentType5);
        models.payment.Payment.PaymentType paymentType7 = payment6.getPaymentType();
        java.util.UUID uUID8 = payment6.getBookingID();
        models.payment.Payment.PaymentType paymentType9 = models.payment.Payment.PaymentType.FINAL;
        payment6.setPaymentType(paymentType9);
        models.payment.PaymentMethod paymentMethod11 = payment6.getMethod();
        models.payment.Payment.PaymentType paymentType12 = payment6.getPaymentType();
        java.util.UUID uUID13 = null;
        models.booking.Booking booking14 = null;
        models.payment.PaymentMethod paymentMethod16 = null;
        models.payment.Payment.PaymentStatus paymentStatus17 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType18 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment19 = new models.payment.Payment(uUID13, booking14, 100.0d, paymentMethod16, paymentStatus17, paymentType18);
        java.util.UUID uUID20 = null;
        models.booking.Booking booking21 = null;
        java.util.UUID uUID23 = null;
        models.booking.Booking booking24 = null;
        models.payment.PaymentMethod paymentMethod26 = null;
        models.payment.Payment.PaymentStatus paymentStatus27 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType28 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment29 = new models.payment.Payment(uUID23, booking24, 100.0d, paymentMethod26, paymentStatus27, paymentType28);
        models.payment.Payment.PaymentType paymentType30 = payment29.getPaymentType();
        java.util.UUID uUID31 = payment29.getBookingID();
        models.payment.Payment.PaymentType paymentType32 = models.payment.Payment.PaymentType.FINAL;
        payment29.setPaymentType(paymentType32);
        java.util.UUID uUID34 = payment29.getPaymentID();
        models.payment.PaymentMethod paymentMethod36 = models.payment.Payment.generateMethod("");
        payment29.setPaymentMethod(paymentMethod36);
        models.payment.Payment.PaymentStatus paymentStatus38 = models.payment.Payment.PaymentStatus.PENDING;
        models.payment.Payment.PaymentType paymentType39 = null;
        models.payment.Payment payment40 = new models.payment.Payment(uUID20, booking21, (double) (byte) 0, paymentMethod36, paymentStatus38, paymentType39);
        payment19.setPaymentMethod(paymentMethod36);
        payment6.setPaymentMethod(paymentMethod36);
        models.booking.Booking booking44 = null;
        models.booking.Booking booking46 = null;
        java.util.UUID uUID47 = null;
        models.booking.Booking booking48 = null;
        models.payment.PaymentMethod paymentMethod50 = null;
        models.payment.Payment.PaymentStatus paymentStatus51 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType52 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment53 = new models.payment.Payment(uUID47, booking48, 100.0d, paymentMethod50, paymentStatus51, paymentType52);
        models.payment.Payment.PaymentType paymentType54 = payment53.getPaymentType();
        java.util.UUID uUID55 = payment53.getBookingID();
        models.payment.Payment.PaymentType paymentType56 = models.payment.Payment.PaymentType.FINAL;
        payment53.setPaymentType(paymentType56);
        java.util.UUID uUID58 = payment53.getPaymentID();
        models.payment.PaymentMethod paymentMethod60 = models.payment.Payment.generateMethod("");
        payment53.setPaymentMethod(paymentMethod60);
        java.util.UUID uUID62 = null;
        models.booking.Booking booking63 = null;
        models.payment.PaymentMethod paymentMethod65 = null;
        models.payment.Payment.PaymentStatus paymentStatus66 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType67 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment68 = new models.payment.Payment(uUID62, booking63, 100.0d, paymentMethod65, paymentStatus66, paymentType67);
        models.payment.Payment.PaymentType paymentType69 = payment68.getPaymentType();
        models.payment.Payment.PaymentType paymentType70 = payment68.getPaymentType();
        models.payment.Payment payment71 = new models.payment.Payment((double) 10, booking46, paymentMethod60, paymentType70);
        models.booking.Booking booking73 = null;
        models.payment.PaymentMethod paymentMethod75 = models.payment.Payment.generateMethod("hi!");
        java.util.UUID uUID76 = null;
        models.booking.Booking booking77 = null;
        models.payment.PaymentMethod paymentMethod79 = null;
        models.payment.Payment.PaymentStatus paymentStatus80 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType81 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment82 = new models.payment.Payment(uUID76, booking77, 100.0d, paymentMethod79, paymentStatus80, paymentType81);
        models.payment.Payment.PaymentType paymentType83 = payment82.getPaymentType();
        models.payment.Payment payment84 = new models.payment.Payment(0.0d, booking73, paymentMethod75, paymentType83);
        models.payment.Payment payment85 = new models.payment.Payment((double) (short) -1, booking44, paymentMethod60, paymentType83);
        payment6.setPaymentType(paymentType83);
        models.payment.PaymentMethod paymentMethod88 = models.payment.Payment.generateMethod("hi!");
        payment6.setPaymentMethod(paymentMethod88);
        org.junit.Assert.assertTrue("'" + paymentStatus4 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus4.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType5 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType5.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType7 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType7.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID8);
        org.junit.Assert.assertTrue("'" + paymentType9 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType9.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(paymentMethod11);
        org.junit.Assert.assertTrue("'" + paymentType12 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType12.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentStatus17 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus17.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType18 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType18.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentStatus27 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus27.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType28 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType28.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType30 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType30.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID31);
        org.junit.Assert.assertTrue("'" + paymentType32 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType32.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod36);
        org.junit.Assert.assertTrue("'" + paymentStatus38 + "' != '" + models.payment.Payment.PaymentStatus.PENDING + "'", paymentStatus38.equals(models.payment.Payment.PaymentStatus.PENDING));
        org.junit.Assert.assertTrue("'" + paymentStatus51 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus51.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType52 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType52.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType54 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType54.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID55);
        org.junit.Assert.assertTrue("'" + paymentType56 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType56.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod60);
        org.junit.Assert.assertTrue("'" + paymentStatus66 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus66.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType67 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType67.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType69 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType69.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType70 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType70.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod75);
        org.junit.Assert.assertTrue("'" + paymentStatus80 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus80.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType81 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType81.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType83 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType83.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod88);
    }

    @Test
    public void test246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test246");
        java.util.UUID uUID0 = null;
        models.booking.Booking booking1 = null;
        models.payment.PaymentMethod paymentMethod3 = null;
        models.payment.Payment.PaymentStatus paymentStatus4 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType5 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment6 = new models.payment.Payment(uUID0, booking1, 100.0d, paymentMethod3, paymentStatus4, paymentType5);
        models.payment.Payment.PaymentType paymentType7 = payment6.getPaymentType();
        java.util.UUID uUID8 = payment6.getBookingID();
        models.payment.Payment.PaymentType paymentType9 = models.payment.Payment.PaymentType.FINAL;
        payment6.setPaymentType(paymentType9);
        double double11 = payment6.getAmount();
        org.junit.Assert.assertTrue("'" + paymentStatus4 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus4.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType5 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType5.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType7 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType7.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID8);
        org.junit.Assert.assertTrue("'" + paymentType9 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType9.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
    }

    @Test
    public void test247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test247");
        models.booking.Booking booking1 = null;
        models.booking.Booking booking3 = null;
        java.util.UUID uUID4 = null;
        models.booking.Booking booking5 = null;
        models.payment.PaymentMethod paymentMethod7 = null;
        models.payment.Payment.PaymentStatus paymentStatus8 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType9 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment10 = new models.payment.Payment(uUID4, booking5, 100.0d, paymentMethod7, paymentStatus8, paymentType9);
        models.payment.Payment.PaymentType paymentType11 = payment10.getPaymentType();
        java.util.UUID uUID12 = payment10.getBookingID();
        models.payment.Payment.PaymentType paymentType13 = models.payment.Payment.PaymentType.FINAL;
        payment10.setPaymentType(paymentType13);
        java.util.UUID uUID15 = payment10.getPaymentID();
        models.payment.PaymentMethod paymentMethod17 = models.payment.Payment.generateMethod("");
        payment10.setPaymentMethod(paymentMethod17);
        java.util.UUID uUID19 = null;
        models.booking.Booking booking20 = null;
        models.payment.PaymentMethod paymentMethod22 = null;
        models.payment.Payment.PaymentStatus paymentStatus23 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType24 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment25 = new models.payment.Payment(uUID19, booking20, 100.0d, paymentMethod22, paymentStatus23, paymentType24);
        models.payment.Payment.PaymentType paymentType26 = payment25.getPaymentType();
        models.payment.Payment.PaymentType paymentType27 = payment25.getPaymentType();
        models.payment.Payment payment28 = new models.payment.Payment((double) 10, booking3, paymentMethod17, paymentType27);
        java.util.UUID uUID29 = null;
        models.booking.Booking booking30 = null;
        models.payment.PaymentMethod paymentMethod32 = null;
        models.payment.Payment.PaymentStatus paymentStatus33 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType34 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment35 = new models.payment.Payment(uUID29, booking30, 100.0d, paymentMethod32, paymentStatus33, paymentType34);
        models.payment.Payment.PaymentType paymentType36 = payment35.getPaymentType();
        java.util.UUID uUID37 = payment35.getBookingID();
        models.payment.Payment.PaymentType paymentType38 = models.payment.Payment.PaymentType.FINAL;
        payment35.setPaymentType(paymentType38);
        models.payment.PaymentMethod paymentMethod40 = payment35.getMethod();
        models.payment.Payment.PaymentType paymentType41 = payment35.getPaymentType();
        models.payment.Payment payment42 = new models.payment.Payment((double) 0, booking1, paymentMethod17, paymentType41);
        java.util.UUID uUID43 = payment42.getBookingID();
        java.util.UUID uUID44 = payment42.getBookingID();
        models.payment.Payment.PaymentStatus paymentStatus45 = payment42.getStatus();
        models.payment.PaymentMethod paymentMethod46 = payment42.getMethod();
        org.junit.Assert.assertTrue("'" + paymentStatus8 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus8.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType9 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType9.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType11 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType11.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID12);
        org.junit.Assert.assertTrue("'" + paymentType13 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType13.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod17);
        org.junit.Assert.assertTrue("'" + paymentStatus23 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus23.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType24 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType24.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType26 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType26.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType27 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType27.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentStatus33 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus33.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType34 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType34.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType36 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType36.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID37);
        org.junit.Assert.assertTrue("'" + paymentType38 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType38.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(paymentMethod40);
        org.junit.Assert.assertTrue("'" + paymentType41 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType41.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID44);
        org.junit.Assert.assertTrue("'" + paymentStatus45 + "' != '" + models.payment.Payment.PaymentStatus.PENDING + "'", paymentStatus45.equals(models.payment.Payment.PaymentStatus.PENDING));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod46);
    }

    @Test
    public void test248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test248");
        java.util.UUID uUID0 = null;
        models.booking.Booking booking1 = null;
        models.payment.PaymentMethod paymentMethod3 = null;
        models.payment.Payment.PaymentStatus paymentStatus4 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType5 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment6 = new models.payment.Payment(uUID0, booking1, 100.0d, paymentMethod3, paymentStatus4, paymentType5);
        models.payment.Payment.PaymentType paymentType7 = payment6.getPaymentType();
        models.payment.Payment.PaymentType paymentType8 = payment6.getPaymentType();
        models.payment.PaymentMethod paymentMethod9 = payment6.getMethod();
        java.util.UUID uUID10 = payment6.getPaymentID();
        models.booking.Booking booking11 = payment6.getBooking();
        org.junit.Assert.assertTrue("'" + paymentStatus4 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus4.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType5 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType5.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType7 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType7.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType8 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType8.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(paymentMethod9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(booking11);
    }

    @Test
    public void test249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test249");
        models.booking.Booking booking1 = null;
        models.booking.Booking booking3 = null;
        models.booking.Booking booking5 = null;
        models.payment.PaymentMethod paymentMethod7 = models.payment.Payment.generateMethod("");
        models.payment.Payment.PaymentType paymentType8 = null;
        models.payment.Payment payment9 = new models.payment.Payment(1.0d, booking5, paymentMethod7, paymentType8);
        models.booking.Booking booking11 = null;
        models.booking.Booking booking13 = null;
        java.util.UUID uUID14 = null;
        models.booking.Booking booking15 = null;
        models.payment.PaymentMethod paymentMethod17 = null;
        models.payment.Payment.PaymentStatus paymentStatus18 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType19 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment20 = new models.payment.Payment(uUID14, booking15, 100.0d, paymentMethod17, paymentStatus18, paymentType19);
        models.payment.Payment.PaymentType paymentType21 = payment20.getPaymentType();
        java.util.UUID uUID22 = payment20.getBookingID();
        models.payment.Payment.PaymentType paymentType23 = models.payment.Payment.PaymentType.FINAL;
        payment20.setPaymentType(paymentType23);
        java.util.UUID uUID25 = payment20.getPaymentID();
        models.payment.PaymentMethod paymentMethod27 = models.payment.Payment.generateMethod("");
        payment20.setPaymentMethod(paymentMethod27);
        java.util.UUID uUID29 = null;
        models.booking.Booking booking30 = null;
        models.payment.PaymentMethod paymentMethod32 = null;
        models.payment.Payment.PaymentStatus paymentStatus33 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType34 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment35 = new models.payment.Payment(uUID29, booking30, 100.0d, paymentMethod32, paymentStatus33, paymentType34);
        models.payment.Payment.PaymentType paymentType36 = payment35.getPaymentType();
        models.payment.Payment.PaymentType paymentType37 = payment35.getPaymentType();
        models.payment.Payment payment38 = new models.payment.Payment((double) 10, booking13, paymentMethod27, paymentType37);
        java.util.UUID uUID39 = null;
        models.booking.Booking booking40 = null;
        models.payment.PaymentMethod paymentMethod42 = null;
        models.payment.Payment.PaymentStatus paymentStatus43 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType44 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment45 = new models.payment.Payment(uUID39, booking40, 100.0d, paymentMethod42, paymentStatus43, paymentType44);
        models.payment.Payment.PaymentType paymentType46 = payment45.getPaymentType();
        java.util.UUID uUID47 = payment45.getBookingID();
        models.payment.Payment.PaymentType paymentType48 = models.payment.Payment.PaymentType.FINAL;
        payment45.setPaymentType(paymentType48);
        models.payment.PaymentMethod paymentMethod50 = payment45.getMethod();
        models.payment.Payment.PaymentType paymentType51 = payment45.getPaymentType();
        models.payment.Payment payment52 = new models.payment.Payment((double) 0, booking11, paymentMethod27, paymentType51);
        java.util.UUID uUID53 = payment52.getBookingID();
        boolean boolean54 = payment52.processPayment();
        java.util.UUID uUID55 = null;
        models.booking.Booking booking56 = null;
        java.util.UUID uUID58 = null;
        models.booking.Booking booking59 = null;
        java.util.UUID uUID61 = null;
        models.booking.Booking booking62 = null;
        models.payment.PaymentMethod paymentMethod64 = null;
        models.payment.Payment.PaymentStatus paymentStatus65 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType66 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment67 = new models.payment.Payment(uUID61, booking62, 100.0d, paymentMethod64, paymentStatus65, paymentType66);
        models.payment.Payment.PaymentType paymentType68 = payment67.getPaymentType();
        java.util.UUID uUID69 = payment67.getBookingID();
        models.payment.Payment.PaymentType paymentType70 = models.payment.Payment.PaymentType.FINAL;
        payment67.setPaymentType(paymentType70);
        java.util.UUID uUID72 = payment67.getPaymentID();
        models.payment.PaymentMethod paymentMethod74 = models.payment.Payment.generateMethod("");
        payment67.setPaymentMethod(paymentMethod74);
        models.payment.Payment.PaymentStatus paymentStatus76 = models.payment.Payment.PaymentStatus.PENDING;
        models.payment.Payment.PaymentType paymentType77 = null;
        models.payment.Payment payment78 = new models.payment.Payment(uUID58, booking59, (double) (byte) 0, paymentMethod74, paymentStatus76, paymentType77);
        models.payment.Payment.PaymentStatus paymentStatus79 = models.payment.Payment.PaymentStatus.PENDING;
        models.payment.Payment.PaymentType paymentType80 = models.payment.Payment.PaymentType.DEPOSIT;
        models.payment.Payment payment81 = new models.payment.Payment(uUID55, booking56, (double) (byte) 100, paymentMethod74, paymentStatus79, paymentType80);
        models.booking.Booking booking82 = payment81.getBooking();
        double double83 = payment81.getAmount();
        java.util.UUID uUID84 = payment81.getBookingID();
        models.payment.Payment.PaymentType paymentType85 = payment81.getPaymentType();
        payment52.setPaymentType(paymentType85);
        models.payment.Payment payment87 = new models.payment.Payment((double) (byte) 100, booking3, paymentMethod7, paymentType85);
        models.payment.Payment.PaymentType paymentType88 = models.payment.Payment.PaymentType.REFUND;
        models.payment.Payment payment89 = new models.payment.Payment((double) (byte) 100, booking1, paymentMethod7, paymentType88);
        boolean boolean90 = payment89.processPayment();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod7);
        org.junit.Assert.assertTrue("'" + paymentStatus18 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus18.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType19 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType19.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType21 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType21.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID22);
        org.junit.Assert.assertTrue("'" + paymentType23 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType23.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod27);
        org.junit.Assert.assertTrue("'" + paymentStatus33 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus33.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType34 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType34.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType36 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType36.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType37 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType37.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentStatus43 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus43.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType44 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType44.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType46 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType46.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID47);
        org.junit.Assert.assertTrue("'" + paymentType48 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType48.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(paymentMethod50);
        org.junit.Assert.assertTrue("'" + paymentType51 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType51.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + paymentStatus65 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus65.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType66 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType66.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType68 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType68.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID69);
        org.junit.Assert.assertTrue("'" + paymentType70 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType70.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod74);
        org.junit.Assert.assertTrue("'" + paymentStatus76 + "' != '" + models.payment.Payment.PaymentStatus.PENDING + "'", paymentStatus76.equals(models.payment.Payment.PaymentStatus.PENDING));
        org.junit.Assert.assertTrue("'" + paymentStatus79 + "' != '" + models.payment.Payment.PaymentStatus.PENDING + "'", paymentStatus79.equals(models.payment.Payment.PaymentStatus.PENDING));
        org.junit.Assert.assertTrue("'" + paymentType80 + "' != '" + models.payment.Payment.PaymentType.DEPOSIT + "'", paymentType80.equals(models.payment.Payment.PaymentType.DEPOSIT));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(booking82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 100.0d + "'", double83 == 100.0d);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID84);
        org.junit.Assert.assertTrue("'" + paymentType85 + "' != '" + models.payment.Payment.PaymentType.DEPOSIT + "'", paymentType85.equals(models.payment.Payment.PaymentType.DEPOSIT));
        org.junit.Assert.assertTrue("'" + paymentType88 + "' != '" + models.payment.Payment.PaymentType.REFUND + "'", paymentType88.equals(models.payment.Payment.PaymentType.REFUND));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
    }

    @Test
    public void test250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test250");
        java.util.UUID uUID0 = null;
        models.booking.Booking booking1 = null;
        models.payment.PaymentMethod paymentMethod4 = models.payment.Payment.generateMethod("");
        java.util.UUID uUID5 = null;
        models.booking.Booking booking6 = null;
        models.payment.PaymentMethod paymentMethod8 = null;
        models.payment.Payment.PaymentStatus paymentStatus9 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType10 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment11 = new models.payment.Payment(uUID5, booking6, 100.0d, paymentMethod8, paymentStatus9, paymentType10);
        models.payment.Payment.PaymentStatus paymentStatus12 = payment11.getStatus();
        java.util.UUID uUID13 = null;
        models.booking.Booking booking14 = null;
        models.payment.PaymentMethod paymentMethod16 = null;
        models.payment.Payment.PaymentStatus paymentStatus17 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType18 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment19 = new models.payment.Payment(uUID13, booking14, 100.0d, paymentMethod16, paymentStatus17, paymentType18);
        models.payment.Payment.PaymentType paymentType20 = payment19.getPaymentType();
        java.util.UUID uUID21 = payment19.getBookingID();
        models.payment.Payment.PaymentType paymentType22 = models.payment.Payment.PaymentType.FINAL;
        payment19.setPaymentType(paymentType22);
        models.payment.PaymentMethod paymentMethod24 = payment19.getMethod();
        models.payment.Payment.PaymentType paymentType25 = payment19.getPaymentType();
        models.payment.Payment payment26 = new models.payment.Payment(uUID0, booking1, (double) 1L, paymentMethod4, paymentStatus12, paymentType25);
        models.booking.Booking booking28 = null;
        models.booking.Booking booking30 = null;
        java.util.UUID uUID31 = null;
        models.booking.Booking booking32 = null;
        models.payment.PaymentMethod paymentMethod34 = null;
        models.payment.Payment.PaymentStatus paymentStatus35 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType36 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment37 = new models.payment.Payment(uUID31, booking32, 100.0d, paymentMethod34, paymentStatus35, paymentType36);
        models.payment.Payment.PaymentType paymentType38 = payment37.getPaymentType();
        java.util.UUID uUID39 = payment37.getBookingID();
        models.payment.Payment.PaymentType paymentType40 = models.payment.Payment.PaymentType.FINAL;
        payment37.setPaymentType(paymentType40);
        java.util.UUID uUID42 = payment37.getPaymentID();
        models.payment.PaymentMethod paymentMethod44 = models.payment.Payment.generateMethod("");
        payment37.setPaymentMethod(paymentMethod44);
        java.util.UUID uUID46 = null;
        models.booking.Booking booking47 = null;
        models.payment.PaymentMethod paymentMethod49 = null;
        models.payment.Payment.PaymentStatus paymentStatus50 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType51 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment52 = new models.payment.Payment(uUID46, booking47, 100.0d, paymentMethod49, paymentStatus50, paymentType51);
        models.payment.Payment.PaymentType paymentType53 = payment52.getPaymentType();
        models.payment.Payment.PaymentType paymentType54 = payment52.getPaymentType();
        models.payment.Payment payment55 = new models.payment.Payment((double) 10, booking30, paymentMethod44, paymentType54);
        java.util.UUID uUID56 = null;
        models.booking.Booking booking57 = null;
        models.payment.PaymentMethod paymentMethod59 = null;
        models.payment.Payment.PaymentStatus paymentStatus60 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType61 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment62 = new models.payment.Payment(uUID56, booking57, 100.0d, paymentMethod59, paymentStatus60, paymentType61);
        models.payment.Payment.PaymentType paymentType63 = payment62.getPaymentType();
        java.util.UUID uUID64 = payment62.getBookingID();
        models.payment.Payment.PaymentType paymentType65 = models.payment.Payment.PaymentType.FINAL;
        payment62.setPaymentType(paymentType65);
        models.payment.PaymentMethod paymentMethod67 = payment62.getMethod();
        models.payment.Payment.PaymentType paymentType68 = payment62.getPaymentType();
        models.payment.Payment payment69 = new models.payment.Payment((double) (short) -1, booking28, paymentMethod44, paymentType68);
        payment26.setPaymentMethod(paymentMethod44);
        java.util.UUID uUID71 = payment26.getPaymentID();
        models.payment.PaymentMethod paymentMethod72 = payment26.getMethod();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod4);
        org.junit.Assert.assertTrue("'" + paymentStatus9 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus9.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType10 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType10.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentStatus12 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus12.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentStatus17 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus17.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType18 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType18.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType20 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType20.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID21);
        org.junit.Assert.assertTrue("'" + paymentType22 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType22.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(paymentMethod24);
        org.junit.Assert.assertTrue("'" + paymentType25 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType25.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentStatus35 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus35.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType36 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType36.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType38 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType38.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID39);
        org.junit.Assert.assertTrue("'" + paymentType40 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType40.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod44);
        org.junit.Assert.assertTrue("'" + paymentStatus50 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus50.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType51 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType51.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType53 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType53.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType54 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType54.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentStatus60 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus60.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType61 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType61.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType63 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType63.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID64);
        org.junit.Assert.assertTrue("'" + paymentType65 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType65.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(paymentMethod67);
        org.junit.Assert.assertTrue("'" + paymentType68 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType68.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod72);
    }

    @Test
    public void test251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test251");
        java.util.UUID uUID0 = null;
        models.booking.Booking booking1 = null;
        java.util.UUID uUID3 = null;
        models.booking.Booking booking4 = null;
        models.payment.PaymentMethod paymentMethod6 = null;
        models.payment.Payment.PaymentStatus paymentStatus7 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType8 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment9 = new models.payment.Payment(uUID3, booking4, 100.0d, paymentMethod6, paymentStatus7, paymentType8);
        models.payment.Payment.PaymentType paymentType10 = payment9.getPaymentType();
        java.util.UUID uUID11 = payment9.getBookingID();
        models.payment.Payment.PaymentType paymentType12 = models.payment.Payment.PaymentType.FINAL;
        payment9.setPaymentType(paymentType12);
        java.util.UUID uUID14 = payment9.getPaymentID();
        models.payment.PaymentMethod paymentMethod16 = models.payment.Payment.generateMethod("");
        payment9.setPaymentMethod(paymentMethod16);
        java.util.UUID uUID18 = null;
        models.booking.Booking booking19 = null;
        models.payment.PaymentMethod paymentMethod21 = null;
        models.payment.Payment.PaymentStatus paymentStatus22 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType23 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment24 = new models.payment.Payment(uUID18, booking19, 100.0d, paymentMethod21, paymentStatus22, paymentType23);
        models.payment.Payment.PaymentType paymentType25 = payment24.getPaymentType();
        java.util.UUID uUID26 = payment24.getBookingID();
        models.payment.Payment.PaymentType paymentType27 = models.payment.Payment.PaymentType.FINAL;
        payment24.setPaymentType(paymentType27);
        models.payment.PaymentMethod paymentMethod29 = payment24.getMethod();
        models.payment.Payment.PaymentType paymentType30 = payment24.getPaymentType();
        models.payment.Payment.PaymentStatus paymentStatus31 = payment24.getStatus();
        models.payment.Payment.PaymentType paymentType32 = models.payment.Payment.PaymentType.REFUND;
        models.payment.Payment payment33 = new models.payment.Payment(uUID0, booking1, (double) '#', paymentMethod16, paymentStatus31, paymentType32);
        java.util.UUID uUID34 = payment33.getBookingID();
        java.util.UUID uUID35 = payment33.getPaymentID();
        org.junit.Assert.assertTrue("'" + paymentStatus7 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus7.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType8 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType8.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType10 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType10.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID11);
        org.junit.Assert.assertTrue("'" + paymentType12 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType12.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod16);
        org.junit.Assert.assertTrue("'" + paymentStatus22 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus22.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType23 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType23.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType25 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType25.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID26);
        org.junit.Assert.assertTrue("'" + paymentType27 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType27.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(paymentMethod29);
        org.junit.Assert.assertTrue("'" + paymentType30 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType30.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentStatus31 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus31.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType32 + "' != '" + models.payment.Payment.PaymentType.REFUND + "'", paymentType32.equals(models.payment.Payment.PaymentType.REFUND));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID35);
    }

    @Test
    public void test252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test252");
        models.booking.Booking booking1 = null;
        models.booking.Booking booking3 = null;
        java.util.UUID uUID4 = null;
        models.booking.Booking booking5 = null;
        models.payment.PaymentMethod paymentMethod7 = null;
        models.payment.Payment.PaymentStatus paymentStatus8 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType9 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment10 = new models.payment.Payment(uUID4, booking5, 100.0d, paymentMethod7, paymentStatus8, paymentType9);
        models.payment.Payment.PaymentType paymentType11 = payment10.getPaymentType();
        java.util.UUID uUID12 = payment10.getBookingID();
        models.payment.Payment.PaymentType paymentType13 = models.payment.Payment.PaymentType.FINAL;
        payment10.setPaymentType(paymentType13);
        java.util.UUID uUID15 = payment10.getPaymentID();
        models.payment.PaymentMethod paymentMethod17 = models.payment.Payment.generateMethod("");
        payment10.setPaymentMethod(paymentMethod17);
        java.util.UUID uUID19 = null;
        models.booking.Booking booking20 = null;
        models.payment.PaymentMethod paymentMethod22 = null;
        models.payment.Payment.PaymentStatus paymentStatus23 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType24 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment25 = new models.payment.Payment(uUID19, booking20, 100.0d, paymentMethod22, paymentStatus23, paymentType24);
        models.payment.Payment.PaymentType paymentType26 = payment25.getPaymentType();
        models.payment.Payment.PaymentType paymentType27 = payment25.getPaymentType();
        models.payment.Payment payment28 = new models.payment.Payment((double) 10, booking3, paymentMethod17, paymentType27);
        models.payment.Payment.PaymentType paymentType29 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment30 = new models.payment.Payment((double) 0.0f, booking1, paymentMethod17, paymentType29);
        boolean boolean31 = payment30.processPayment();
        double double32 = payment30.getAmount();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean33 = payment30.processPayment();
            org.junit.Assert.fail("Expected exception of type models.ParkingSystemException; message: Cannot process payment of a payment that is not pending.");
        } catch (models.ParkingSystemException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + paymentStatus8 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus8.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType9 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType9.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType11 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType11.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID12);
        org.junit.Assert.assertTrue("'" + paymentType13 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType13.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod17);
        org.junit.Assert.assertTrue("'" + paymentStatus23 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus23.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType24 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType24.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType26 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType26.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType27 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType27.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType29 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType29.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
    }

    @Test
    public void test253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test253");
        models.booking.Booking booking1 = null;
        models.booking.Booking booking3 = null;
        java.util.UUID uUID4 = null;
        models.booking.Booking booking5 = null;
        models.payment.PaymentMethod paymentMethod7 = null;
        models.payment.Payment.PaymentStatus paymentStatus8 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType9 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment10 = new models.payment.Payment(uUID4, booking5, 100.0d, paymentMethod7, paymentStatus8, paymentType9);
        models.payment.Payment.PaymentType paymentType11 = payment10.getPaymentType();
        java.util.UUID uUID12 = payment10.getBookingID();
        models.payment.Payment.PaymentType paymentType13 = models.payment.Payment.PaymentType.FINAL;
        payment10.setPaymentType(paymentType13);
        java.util.UUID uUID15 = payment10.getPaymentID();
        models.payment.PaymentMethod paymentMethod17 = models.payment.Payment.generateMethod("");
        payment10.setPaymentMethod(paymentMethod17);
        java.util.UUID uUID19 = null;
        models.booking.Booking booking20 = null;
        models.payment.PaymentMethod paymentMethod22 = null;
        models.payment.Payment.PaymentStatus paymentStatus23 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType24 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment25 = new models.payment.Payment(uUID19, booking20, 100.0d, paymentMethod22, paymentStatus23, paymentType24);
        models.payment.Payment.PaymentType paymentType26 = payment25.getPaymentType();
        models.payment.Payment.PaymentType paymentType27 = payment25.getPaymentType();
        models.payment.Payment payment28 = new models.payment.Payment((double) 10, booking3, paymentMethod17, paymentType27);
        java.util.UUID uUID29 = null;
        models.booking.Booking booking30 = null;
        models.payment.PaymentMethod paymentMethod32 = null;
        models.payment.Payment.PaymentStatus paymentStatus33 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType34 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment35 = new models.payment.Payment(uUID29, booking30, 100.0d, paymentMethod32, paymentStatus33, paymentType34);
        models.payment.Payment.PaymentType paymentType36 = payment35.getPaymentType();
        java.util.UUID uUID37 = payment35.getBookingID();
        models.payment.Payment.PaymentType paymentType38 = models.payment.Payment.PaymentType.FINAL;
        payment35.setPaymentType(paymentType38);
        models.payment.PaymentMethod paymentMethod40 = payment35.getMethod();
        models.payment.Payment.PaymentType paymentType41 = payment35.getPaymentType();
        models.payment.Payment payment42 = new models.payment.Payment((double) 0, booking1, paymentMethod17, paymentType41);
        java.util.UUID uUID43 = payment42.getBookingID();
        java.util.UUID uUID44 = payment42.getBookingID();
        double double45 = payment42.getAmount();
        org.junit.Assert.assertTrue("'" + paymentStatus8 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus8.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType9 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType9.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType11 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType11.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID12);
        org.junit.Assert.assertTrue("'" + paymentType13 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType13.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod17);
        org.junit.Assert.assertTrue("'" + paymentStatus23 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus23.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType24 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType24.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType26 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType26.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType27 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType27.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentStatus33 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus33.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType34 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType34.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType36 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType36.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID37);
        org.junit.Assert.assertTrue("'" + paymentType38 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType38.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(paymentMethod40);
        org.junit.Assert.assertTrue("'" + paymentType41 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType41.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.0d + "'", double45 == 0.0d);
    }

    @Test
    public void test254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test254");
        java.util.UUID uUID0 = null;
        models.booking.Booking booking1 = null;
        models.payment.PaymentMethod paymentMethod3 = null;
        models.payment.Payment.PaymentStatus paymentStatus4 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType5 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment6 = new models.payment.Payment(uUID0, booking1, 100.0d, paymentMethod3, paymentStatus4, paymentType5);
        models.payment.Payment.PaymentStatus paymentStatus7 = payment6.getStatus();
        double double8 = payment6.getAmount();
        models.booking.Booking booking10 = null;
        models.booking.Booking booking12 = null;
        java.util.UUID uUID13 = null;
        models.booking.Booking booking14 = null;
        models.payment.PaymentMethod paymentMethod16 = null;
        models.payment.Payment.PaymentStatus paymentStatus17 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType18 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment19 = new models.payment.Payment(uUID13, booking14, 100.0d, paymentMethod16, paymentStatus17, paymentType18);
        models.payment.Payment.PaymentType paymentType20 = payment19.getPaymentType();
        java.util.UUID uUID21 = payment19.getBookingID();
        models.payment.Payment.PaymentType paymentType22 = models.payment.Payment.PaymentType.FINAL;
        payment19.setPaymentType(paymentType22);
        java.util.UUID uUID24 = payment19.getPaymentID();
        models.payment.PaymentMethod paymentMethod26 = models.payment.Payment.generateMethod("");
        payment19.setPaymentMethod(paymentMethod26);
        java.util.UUID uUID28 = null;
        models.booking.Booking booking29 = null;
        models.payment.PaymentMethod paymentMethod31 = null;
        models.payment.Payment.PaymentStatus paymentStatus32 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType33 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment34 = new models.payment.Payment(uUID28, booking29, (-1.0d), paymentMethod31, paymentStatus32, paymentType33);
        models.payment.Payment payment35 = new models.payment.Payment(0.0d, booking12, paymentMethod26, paymentType33);
        java.util.UUID uUID36 = null;
        models.booking.Booking booking37 = null;
        models.payment.PaymentMethod paymentMethod39 = null;
        models.payment.Payment.PaymentStatus paymentStatus40 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType41 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment42 = new models.payment.Payment(uUID36, booking37, 100.0d, paymentMethod39, paymentStatus40, paymentType41);
        models.payment.Payment.PaymentType paymentType43 = payment42.getPaymentType();
        java.util.UUID uUID44 = payment42.getBookingID();
        models.payment.Payment.PaymentType paymentType45 = models.payment.Payment.PaymentType.FINAL;
        payment42.setPaymentType(paymentType45);
        models.payment.PaymentMethod paymentMethod47 = payment42.getMethod();
        models.payment.Payment.PaymentType paymentType48 = payment42.getPaymentType();
        java.util.UUID uUID49 = null;
        models.booking.Booking booking50 = null;
        models.payment.PaymentMethod paymentMethod52 = null;
        models.payment.Payment.PaymentStatus paymentStatus53 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType54 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment55 = new models.payment.Payment(uUID49, booking50, 100.0d, paymentMethod52, paymentStatus53, paymentType54);
        java.util.UUID uUID56 = null;
        models.booking.Booking booking57 = null;
        java.util.UUID uUID59 = null;
        models.booking.Booking booking60 = null;
        models.payment.PaymentMethod paymentMethod62 = null;
        models.payment.Payment.PaymentStatus paymentStatus63 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType64 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment65 = new models.payment.Payment(uUID59, booking60, 100.0d, paymentMethod62, paymentStatus63, paymentType64);
        models.payment.Payment.PaymentType paymentType66 = payment65.getPaymentType();
        java.util.UUID uUID67 = payment65.getBookingID();
        models.payment.Payment.PaymentType paymentType68 = models.payment.Payment.PaymentType.FINAL;
        payment65.setPaymentType(paymentType68);
        java.util.UUID uUID70 = payment65.getPaymentID();
        models.payment.PaymentMethod paymentMethod72 = models.payment.Payment.generateMethod("");
        payment65.setPaymentMethod(paymentMethod72);
        models.payment.Payment.PaymentStatus paymentStatus74 = models.payment.Payment.PaymentStatus.PENDING;
        models.payment.Payment.PaymentType paymentType75 = null;
        models.payment.Payment payment76 = new models.payment.Payment(uUID56, booking57, (double) (byte) 0, paymentMethod72, paymentStatus74, paymentType75);
        payment55.setPaymentMethod(paymentMethod72);
        payment42.setPaymentMethod(paymentMethod72);
        models.booking.Booking booking79 = payment42.getBooking();
        models.payment.Payment.PaymentType paymentType80 = payment42.getPaymentType();
        models.payment.Payment payment81 = new models.payment.Payment((double) 100.0f, booking10, paymentMethod26, paymentType80);
        payment6.setPaymentType(paymentType80);
        double double83 = payment6.getAmount();
        org.junit.Assert.assertTrue("'" + paymentStatus4 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus4.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType5 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType5.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentStatus7 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus7.equals(models.payment.Payment.PaymentStatus.FAILED));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 100.0d + "'", double8 == 100.0d);
        org.junit.Assert.assertTrue("'" + paymentStatus17 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus17.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType18 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType18.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType20 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType20.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID21);
        org.junit.Assert.assertTrue("'" + paymentType22 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType22.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod26);
        org.junit.Assert.assertTrue("'" + paymentStatus32 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus32.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType33 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType33.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentStatus40 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus40.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType41 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType41.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType43 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType43.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID44);
        org.junit.Assert.assertTrue("'" + paymentType45 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType45.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(paymentMethod47);
        org.junit.Assert.assertTrue("'" + paymentType48 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType48.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentStatus53 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus53.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType54 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType54.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentStatus63 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus63.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType64 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType64.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType66 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType66.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID67);
        org.junit.Assert.assertTrue("'" + paymentType68 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType68.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod72);
        org.junit.Assert.assertTrue("'" + paymentStatus74 + "' != '" + models.payment.Payment.PaymentStatus.PENDING + "'", paymentStatus74.equals(models.payment.Payment.PaymentStatus.PENDING));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(booking79);
        org.junit.Assert.assertTrue("'" + paymentType80 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType80.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 100.0d + "'", double83 == 100.0d);
    }

    @Test
    public void test255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test255");
        models.booking.Booking booking1 = null;
        models.booking.Booking booking3 = null;
        java.util.UUID uUID4 = null;
        models.booking.Booking booking5 = null;
        models.payment.PaymentMethod paymentMethod7 = null;
        models.payment.Payment.PaymentStatus paymentStatus8 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType9 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment10 = new models.payment.Payment(uUID4, booking5, 100.0d, paymentMethod7, paymentStatus8, paymentType9);
        models.payment.Payment.PaymentType paymentType11 = payment10.getPaymentType();
        models.payment.Payment.PaymentType paymentType12 = payment10.getPaymentType();
        java.util.UUID uUID13 = null;
        models.booking.Booking booking14 = null;
        java.util.UUID uUID16 = null;
        models.booking.Booking booking17 = null;
        models.payment.PaymentMethod paymentMethod19 = null;
        models.payment.Payment.PaymentStatus paymentStatus20 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType21 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment22 = new models.payment.Payment(uUID16, booking17, 100.0d, paymentMethod19, paymentStatus20, paymentType21);
        models.payment.Payment.PaymentType paymentType23 = payment22.getPaymentType();
        java.util.UUID uUID24 = payment22.getBookingID();
        models.payment.Payment.PaymentType paymentType25 = models.payment.Payment.PaymentType.FINAL;
        payment22.setPaymentType(paymentType25);
        java.util.UUID uUID27 = payment22.getPaymentID();
        models.payment.PaymentMethod paymentMethod29 = models.payment.Payment.generateMethod("");
        payment22.setPaymentMethod(paymentMethod29);
        models.payment.Payment.PaymentStatus paymentStatus31 = models.payment.Payment.PaymentStatus.PENDING;
        models.payment.Payment.PaymentType paymentType32 = null;
        models.payment.Payment payment33 = new models.payment.Payment(uUID13, booking14, (double) (byte) 0, paymentMethod29, paymentStatus31, paymentType32);
        payment10.setPaymentMethod(paymentMethod29);
        java.util.UUID uUID35 = null;
        models.booking.Booking booking36 = null;
        java.util.UUID uUID38 = null;
        models.booking.Booking booking39 = null;
        java.util.UUID uUID41 = null;
        models.booking.Booking booking42 = null;
        models.payment.PaymentMethod paymentMethod44 = null;
        models.payment.Payment.PaymentStatus paymentStatus45 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType46 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment47 = new models.payment.Payment(uUID41, booking42, 100.0d, paymentMethod44, paymentStatus45, paymentType46);
        models.payment.Payment.PaymentType paymentType48 = payment47.getPaymentType();
        java.util.UUID uUID49 = payment47.getBookingID();
        models.payment.Payment.PaymentType paymentType50 = models.payment.Payment.PaymentType.FINAL;
        payment47.setPaymentType(paymentType50);
        java.util.UUID uUID52 = payment47.getPaymentID();
        models.payment.PaymentMethod paymentMethod54 = models.payment.Payment.generateMethod("");
        payment47.setPaymentMethod(paymentMethod54);
        models.payment.Payment.PaymentStatus paymentStatus56 = models.payment.Payment.PaymentStatus.PENDING;
        models.payment.Payment.PaymentType paymentType57 = null;
        models.payment.Payment payment58 = new models.payment.Payment(uUID38, booking39, (double) (byte) 0, paymentMethod54, paymentStatus56, paymentType57);
        models.payment.Payment.PaymentStatus paymentStatus59 = models.payment.Payment.PaymentStatus.PENDING;
        models.payment.Payment.PaymentType paymentType60 = models.payment.Payment.PaymentType.DEPOSIT;
        models.payment.Payment payment61 = new models.payment.Payment(uUID35, booking36, (double) (byte) 100, paymentMethod54, paymentStatus59, paymentType60);
        models.payment.Payment payment62 = new models.payment.Payment((double) 100, booking3, paymentMethod29, paymentType60);
        models.booking.Booking booking64 = null;
        models.payment.PaymentMethod paymentMethod66 = models.payment.Payment.generateMethod("hi!");
        java.util.UUID uUID67 = null;
        models.booking.Booking booking68 = null;
        models.payment.PaymentMethod paymentMethod70 = null;
        models.payment.Payment.PaymentStatus paymentStatus71 = models.payment.Payment.PaymentStatus.FAILED;
        models.payment.Payment.PaymentType paymentType72 = models.payment.Payment.PaymentType.FINAL;
        models.payment.Payment payment73 = new models.payment.Payment(uUID67, booking68, 100.0d, paymentMethod70, paymentStatus71, paymentType72);
        models.payment.Payment.PaymentType paymentType74 = payment73.getPaymentType();
        models.payment.Payment payment75 = new models.payment.Payment(0.0d, booking64, paymentMethod66, paymentType74);
        models.payment.Payment payment76 = new models.payment.Payment((double) (short) 10, booking1, paymentMethod29, paymentType74);
        org.junit.Assert.assertTrue("'" + paymentStatus8 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus8.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType9 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType9.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType11 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType11.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType12 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType12.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentStatus20 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus20.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType21 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType21.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType23 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType23.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID24);
        org.junit.Assert.assertTrue("'" + paymentType25 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType25.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod29);
        org.junit.Assert.assertTrue("'" + paymentStatus31 + "' != '" + models.payment.Payment.PaymentStatus.PENDING + "'", paymentStatus31.equals(models.payment.Payment.PaymentStatus.PENDING));
        org.junit.Assert.assertTrue("'" + paymentStatus45 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus45.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType46 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType46.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType48 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType48.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID49);
        org.junit.Assert.assertTrue("'" + paymentType50 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType50.equals(models.payment.Payment.PaymentType.FINAL));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(uUID52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod54);
        org.junit.Assert.assertTrue("'" + paymentStatus56 + "' != '" + models.payment.Payment.PaymentStatus.PENDING + "'", paymentStatus56.equals(models.payment.Payment.PaymentStatus.PENDING));
        org.junit.Assert.assertTrue("'" + paymentStatus59 + "' != '" + models.payment.Payment.PaymentStatus.PENDING + "'", paymentStatus59.equals(models.payment.Payment.PaymentStatus.PENDING));
        org.junit.Assert.assertTrue("'" + paymentType60 + "' != '" + models.payment.Payment.PaymentType.DEPOSIT + "'", paymentType60.equals(models.payment.Payment.PaymentType.DEPOSIT));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(paymentMethod66);
        org.junit.Assert.assertTrue("'" + paymentStatus71 + "' != '" + models.payment.Payment.PaymentStatus.FAILED + "'", paymentStatus71.equals(models.payment.Payment.PaymentStatus.FAILED));
        org.junit.Assert.assertTrue("'" + paymentType72 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType72.equals(models.payment.Payment.PaymentType.FINAL));
        org.junit.Assert.assertTrue("'" + paymentType74 + "' != '" + models.payment.Payment.PaymentType.FINAL + "'", paymentType74.equals(models.payment.Payment.PaymentType.FINAL));
    }
}
